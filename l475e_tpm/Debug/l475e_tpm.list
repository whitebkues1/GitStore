
l475e_tpm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071a4  080071a4  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071ac  080071ac  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071ac  080071ac  000171ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071b0  080071b0  000171b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080071b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  200000ac  08007260  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  08007260  000205cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4eb  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002673  00000000  00000000  0002e5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00030c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  000318d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000295d7  00000000  00000000  00032418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d76  00000000  00000000  0005b9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed30b  00000000  00000000  0006e765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ba70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb4  00000000  00000000  0015bac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006834 	.word	0x08006834

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	08006834 	.word	0x08006834

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <MX_GPIO_Init+0x78>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <MX_GPIO_Init+0x78>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <MX_GPIO_Init+0x78>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_GPIO_Init+0x78>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <MX_GPIO_Init+0x78>)
 80005c8:	f043 0302 	orr.w	r3, r3, #2
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_GPIO_Init+0x78>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2104      	movs	r1, #4
 80005de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e2:	f001 f9ed 	bl	80019c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005e6:	2304      	movs	r3, #4
 80005e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f001 f834 	bl	800166c <HAL_GPIO_Init>

}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40021000 	.word	0x40021000

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

 	uint8_t ch;
	bool displayMenu = true;
 8000616:	2301      	movs	r3, #1
 8000618:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fecc 	bl	80013b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f833 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f7ff ffb7 	bl	8000594 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000626:	f000 f887 	bl	8000738 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800062a:	f000 f9fd 	bl	8000a28 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (displayMenu)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d016      	beq.n	8000662 <main+0x52>
	  {
		  scanf("%c", &ch);
 8000634:	1dbb      	adds	r3, r7, #6
 8000636:	4619      	mov	r1, r3
 8000638:	4812      	ldr	r0, [pc, #72]	; (8000684 <main+0x74>)
 800063a:	f004 fb09 	bl	8004c50 <iscanf>
		  if (ch)
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0f4      	beq.n	800062e <main+0x1e>
		  {
			  displayMenu = false;
 8000644:	2300      	movs	r3, #0
 8000646:	71fb      	strb	r3, [r7, #7]
			  ch = menuHandler();
 8000648:	f000 fdd0 	bl	80011ec <menuHandler>
 800064c:	4603      	mov	r3, r0
 800064e:	71bb      	strb	r3, [r7, #6]
			  printf("%c",ch);
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fa70 	bl	8004b38 <putchar>
			  doCommand(ch);
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fe6c 	bl	8001338 <doCommand>
 8000660:	e7e5      	b.n	800062e <main+0x1e>
		  }
	  }
	  else
	  {
		  ch = menuHandler();
 8000662:	f000 fdc3 	bl	80011ec <menuHandler>
 8000666:	4603      	mov	r3, r0
 8000668:	71bb      	strb	r3, [r7, #6]
		  if (ch)
 800066a:	79bb      	ldrb	r3, [r7, #6]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0de      	beq.n	800062e <main+0x1e>
		  {
			  printf("%c",ch);
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	4618      	mov	r0, r3
 8000674:	f004 fa60 	bl	8004b38 <putchar>
			  doCommand(ch);
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fe5c 	bl	8001338 <doCommand>
	  if (displayMenu)
 8000680:	e7d5      	b.n	800062e <main+0x1e>
 8000682:	bf00      	nop
 8000684:	0800684c 	.word	0x0800684c

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b096      	sub	sp, #88	; 0x58
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2244      	movs	r2, #68	; 0x44
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fa2e 	bl	8004af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ae:	f001 f9ad 	bl	8001a0c <HAL_PWREx_ControlVoltageScaling>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006b8:	f000 f838 	bl	800072c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006bc:	2310      	movs	r3, #16
 80006be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c8:	2360      	movs	r3, #96	; 0x60
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006d0:	2301      	movs	r3, #1
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006d8:	2328      	movs	r3, #40	; 0x28
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006dc:	2307      	movs	r3, #7
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 f9e3 	bl	8001ab8 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006f8:	f000 f818 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2303      	movs	r3, #3
 8000702:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	2104      	movs	r1, #4
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fdab 	bl	8002270 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000720:	f000 f804 	bl	800072c <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3758      	adds	r7, #88	; 0x58
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_SPI1_Init+0x74>)
 800073e:	4a1c      	ldr	r2, [pc, #112]	; (80007b0 <MX_SPI1_Init+0x78>)
 8000740:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_SPI1_Init+0x74>)
 8000744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000748:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_SPI1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_SPI1_Init+0x74>)
 8000752:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000756:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_SPI1_Init+0x74>)
 800075a:	2202      	movs	r2, #2
 800075c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_SPI1_Init+0x74>)
 8000760:	2201      	movs	r2, #1
 8000762:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_SPI1_Init+0x74>)
 8000766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_SPI1_Init+0x74>)
 800076e:	2210      	movs	r2, #16
 8000770:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_SPI1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_SPI1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_SPI1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_SPI1_Init+0x74>)
 8000786:	2207      	movs	r2, #7
 8000788:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_SPI1_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_SPI1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_SPI1_Init+0x74>)
 8000798:	f002 fc4a 	bl	8003030 <HAL_SPI_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007a2:	f7ff ffc3 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000c8 	.word	0x200000c8
 80007b0:	40013000 	.word	0x40013000

080007b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a17      	ldr	r2, [pc, #92]	; (8000830 <HAL_SPI_MspInit+0x7c>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d128      	bne.n	8000828 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <HAL_SPI_MspInit+0x80>)
 80007d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007da:	4a16      	ldr	r2, [pc, #88]	; (8000834 <HAL_SPI_MspInit+0x80>)
 80007dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007e0:	6613      	str	r3, [r2, #96]	; 0x60
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <HAL_SPI_MspInit+0x80>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <HAL_SPI_MspInit+0x80>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a10      	ldr	r2, [pc, #64]	; (8000834 <HAL_SPI_MspInit+0x80>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <HAL_SPI_MspInit+0x80>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000806:	23e0      	movs	r3, #224	; 0xe0
 8000808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000816:	2305      	movs	r3, #5
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000824:	f000 ff22 	bl	800166c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40013000 	.word	0x40013000
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_MspInit+0x44>)
 8000840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <HAL_MspInit+0x44>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6613      	str	r3, [r2, #96]	; 0x60
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_MspInit+0x44>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_MspInit+0x44>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <HAL_MspInit+0x44>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6593      	str	r3, [r2, #88]	; 0x58
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_MspInit+0x44>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <NMI_Handler+0x4>

08000886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <MemManage_Handler+0x4>

08000892 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <UsageFault_Handler+0x4>

0800089e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 fdc8 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 80008e0:	f000 f946 	bl	8000b70 <__io_getchar>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	701a      	strb	r2, [r3, #0]

	return 1;
 80008ec:	2301      	movs	r3, #1
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b086      	sub	sp, #24
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	e009      	b.n	800091c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	60ba      	str	r2, [r7, #8]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f917 	bl	8000b44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	3301      	adds	r3, #1
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	429a      	cmp	r2, r3
 8000922:	dbf1      	blt.n	8000908 <_write+0x12>
	}
	return len;
 8000924:	687b      	ldr	r3, [r7, #4]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <_close>:

int _close(int file)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
	return -1;
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000956:	605a      	str	r2, [r3, #4]
	return 0;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <_isatty>:

int _isatty(int file)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
	return 1;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
	return 0;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a0:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <_sbrk+0x5c>)
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <_sbrk+0x60>)
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d102      	bne.n	80009ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <_sbrk+0x64>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <_sbrk+0x68>)
 80009b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d207      	bcs.n	80009d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c8:	f004 f85e 	bl	8004a88 <__errno>
 80009cc:	4603      	mov	r3, r0
 80009ce:	220c      	movs	r2, #12
 80009d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	e009      	b.n	80009ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <_sbrk+0x64>)
 80009e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ea:	68fb      	ldr	r3, [r7, #12]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20018000 	.word	0x20018000
 80009f8:	00000400 	.word	0x00000400
 80009fc:	2000012c 	.word	0x2000012c
 8000a00:	200005d0 	.word	0x200005d0

08000a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a2e:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <MX_USART1_UART_Init+0x5c>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a6c:	f003 f9f0 	bl	8003e50 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a76:	f7ff fe59 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000130 	.word	0x20000130
 8000a84:	40013800 	.word	0x40013800

08000a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b0ac      	sub	sp, #176	; 0xb0
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2288      	movs	r2, #136	; 0x88
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f004 f825 	bl	8004af8 <memset>
  if(uartHandle->Instance==USART1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <HAL_UART_MspInit+0xb0>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d13a      	bne.n	8000b2e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000abc:	2300      	movs	r3, #0
 8000abe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fdf7 	bl	80026b8 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad0:	f7ff fe2c 	bl	800072c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <HAL_UART_MspInit+0xb4>)
 8000ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad8:	4a18      	ldr	r2, [pc, #96]	; (8000b3c <HAL_UART_MspInit+0xb4>)
 8000ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ade:	6613      	str	r3, [r2, #96]	; 0x60
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <HAL_UART_MspInit+0xb4>)
 8000ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_UART_MspInit+0xb4>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <HAL_UART_MspInit+0xb4>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_UART_MspInit+0xb4>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b04:	23c0      	movs	r3, #192	; 0xc0
 8000b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <HAL_UART_MspInit+0xb8>)
 8000b2a:	f000 fd9f 	bl	800166c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b2e:	bf00      	nop
 8000b30:	37b0      	adds	r7, #176	; 0xb0
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40013800 	.word	0x40013800
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	48000400 	.word	0x48000400

08000b44 <__io_putchar>:
  * @brief Retargets the C library msg_info function to the USART.
  * @param None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the serial port and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 30000))
 8000b4c:	bf00      	nop
 8000b4e:	1d39      	adds	r1, r7, #4
 8000b50:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b54:	2201      	movs	r2, #1
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <__io_putchar+0x28>)
 8000b58:	f003 f9c8 	bl	8003eec <HAL_UART_Transmit>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1f5      	bne.n	8000b4e <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 8000b62:	687b      	ldr	r3, [r7, #4]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000130 	.word	0x20000130

08000b70 <__io_getchar>:
  * @brief Retargets the C library scanf function to the USART.
  * @param None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. readwrite a character to the USART2 and Loop until the end of transmission */
  uint8_t ch = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 10))
 8000b7a:	bf00      	nop
 8000b7c:	1df9      	adds	r1, r7, #7
 8000b7e:	230a      	movs	r3, #10
 8000b80:	2201      	movs	r2, #1
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <__io_getchar+0x28>)
 8000b84:	f003 fa46 	bl	8004014 <HAL_UART_Receive>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1f6      	bne.n	8000b7c <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000130 	.word	0x20000130

08000b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba0:	f7ff ff30 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <LoopForever+0xe>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	; (8000be8 <LoopForever+0x16>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bca:	f003 ff63 	bl	8004a94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bce:	f7ff fd1f 	bl	8000610 <main>

08000bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd2:	e7fe      	b.n	8000bd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000be0:	080071b4 	.word	0x080071b4
  ldr r2, =_sbss
 8000be4:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8000be8:	200005cc 	.word	0x200005cc

08000bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC1_2_IRQHandler>
	...

08000bf0 <findCommand>:




TPM_Command *findCommand(const char *commandName)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	TPM_Command *pCommand;
	uint16_t	i;

	for(i=0; i < numCommands; i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	81fb      	strh	r3, [r7, #14]
 8000bfc:	e012      	b.n	8000c24 <findCommand+0x34>
	{
		pCommand = &commandTable[i];
 8000bfe:	89fb      	ldrh	r3, [r7, #14]
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <findCommand+0x48>)
 8000c04:	4413      	add	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
		if(! (strcmp(commandName, (char*) pCommand->commandName )) )
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff fade 	bl	80001d0 <strcmp>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <findCommand+0x2e>
			return pCommand;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	e008      	b.n	8000c30 <findCommand+0x40>
	for(i=0; i < numCommands; i++)
 8000c1e:	89fb      	ldrh	r3, [r7, #14]
 8000c20:	3301      	adds	r3, #1
 8000c22:	81fb      	strh	r3, [r7, #14]
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <findCommand+0x4c>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	89fa      	ldrh	r2, [r7, #14]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d3e7      	bcc.n	8000bfe <findCommand+0xe>
	}
	/* not found... */
	return (TPM_Command *) NULL;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000024 	.word	0x20000024
 8000c3c:	2000003c 	.word	0x2000003c

08000c40 <findFuncPtr>:


TPM_FuncPtr *findFuncPtr(const char *commandName)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	TPM_FuncPtr *pFuncPtr;
	uint16_t	i;

	for(i=0; i < numCommands; i++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	81fb      	strh	r3, [r7, #14]
 8000c4c:	e012      	b.n	8000c74 <findFuncPtr+0x34>
	{
		pFuncPtr = &FuncPtrTable[i];
 8000c4e:	89fb      	ldrh	r3, [r7, #14]
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <findFuncPtr+0x48>)
 8000c54:	4413      	add	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
		if(! (strcmp(commandName, (char*) pFuncPtr->commandName )) )
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff fab6 	bl	80001d0 <strcmp>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <findFuncPtr+0x2e>
		return pFuncPtr;
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	e008      	b.n	8000c80 <findFuncPtr+0x40>
	for(i=0; i < numCommands; i++)
 8000c6e:	89fb      	ldrh	r3, [r7, #14]
 8000c70:	3301      	adds	r3, #1
 8000c72:	81fb      	strh	r3, [r7, #14]
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <findFuncPtr+0x4c>)
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	89fa      	ldrh	r2, [r7, #14]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d3e7      	bcc.n	8000c4e <findFuncPtr+0xe>
	}
	/* not found... */
	return (TPM_FuncPtr *) NULL;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000034 	.word	0x20000034
 8000c8c:	2000003c 	.word	0x2000003c

08000c90 <init_xferbuf>:

/*****************************************************************************************************/
void init_xferbuf()
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
	uint16_t	i;
	for(i=0; i<sizeof(xferBuf); i++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	80fb      	strh	r3, [r7, #6]
 8000c9a:	e006      	b.n	8000caa <init_xferbuf+0x1a>
		xferBuf[i]=0;
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <init_xferbuf+0x30>)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<sizeof(xferBuf); i++)
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	80fb      	strh	r3, [r7, #6]
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cb0:	d3f4      	bcc.n	8000c9c <init_xferbuf+0xc>
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	200001b4 	.word	0x200001b4

08000cc4 <commandHandler>:
/*****************************************************************************************************/


bool commandHandler(const char* commandName)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	TPM_Command *pCommand;
	TPM_FuncPtr *pFuncPtr;
	uint32_t	errCode =0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]

	funcPtr		commandFunc;
 	bool 		returnVal =0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	77fb      	strb	r3, [r7, #31]
	uint8_t		i;

	/* special cases, print user friendly name,... definitely redo code */
	if(strcmp(commandName,"TPM_GetCap_PROP_OWNER")== 0)
 8000cd4:	4954      	ldr	r1, [pc, #336]	; (8000e28 <commandHandler+0x164>)
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fa7a 	bl	80001d0 <strcmp>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d103      	bne.n	8000cea <commandHandler+0x26>
		printf("\r\n\r\nCommand called: TPM_GetCap(PROP_OWNER)" );
 8000ce2:	4852      	ldr	r0, [pc, #328]	; (8000e2c <commandHandler+0x168>)
 8000ce4:	f003 ff10 	bl	8004b08 <iprintf>
 8000ce8:	e048      	b.n	8000d7c <commandHandler+0xb8>
	else if (strcmp(commandName,"contSelfTest")== 0)
 8000cea:	4951      	ldr	r1, [pc, #324]	; (8000e30 <commandHandler+0x16c>)
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fa6f 	bl	80001d0 <strcmp>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d103      	bne.n	8000d00 <commandHandler+0x3c>
		printf("\r\n\r\nCommand called: TPM_ContinueSelfTest" );
 8000cf8:	484e      	ldr	r0, [pc, #312]	; (8000e34 <commandHandler+0x170>)
 8000cfa:	f003 ff05 	bl	8004b08 <iprintf>
 8000cfe:	e03d      	b.n	8000d7c <commandHandler+0xb8>
	else if (strcmp(commandName,"createEKPair")== 0)
 8000d00:	494d      	ldr	r1, [pc, #308]	; (8000e38 <commandHandler+0x174>)
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff fa64 	bl	80001d0 <strcmp>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d103      	bne.n	8000d16 <commandHandler+0x52>
		printf("\r\n\r\nCommand called: TPM_CreateEndorsementKeyPair" );
 8000d0e:	484b      	ldr	r0, [pc, #300]	; (8000e3c <commandHandler+0x178>)
 8000d10:	f003 fefa 	bl	8004b08 <iprintf>
 8000d14:	e032      	b.n	8000d7c <commandHandler+0xb8>
	else if (strcmp(commandName,"readEK")== 0)
 8000d16:	494a      	ldr	r1, [pc, #296]	; (8000e40 <commandHandler+0x17c>)
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff fa59 	bl	80001d0 <strcmp>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d103      	bne.n	8000d2c <commandHandler+0x68>
		printf("\r\n\r\nCommand called: TPM_ReadPubEK" );
 8000d24:	4847      	ldr	r0, [pc, #284]	; (8000e44 <commandHandler+0x180>)
 8000d26:	f003 feef 	bl	8004b08 <iprintf>
 8000d2a:	e027      	b.n	8000d7c <commandHandler+0xb8>
	else if (strcmp(commandName,"OIAP")== 0)
 8000d2c:	4946      	ldr	r1, [pc, #280]	; (8000e48 <commandHandler+0x184>)
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fa4e 	bl	80001d0 <strcmp>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d103      	bne.n	8000d42 <commandHandler+0x7e>
		printf("\r\n\r\nCommand called: TPM_OIAP" );
 8000d3a:	4844      	ldr	r0, [pc, #272]	; (8000e4c <commandHandler+0x188>)
 8000d3c:	f003 fee4 	bl	8004b08 <iprintf>
 8000d40:	e01c      	b.n	8000d7c <commandHandler+0xb8>
	else if (strcmp(commandName,"generateRandN")==0)
 8000d42:	4943      	ldr	r1, [pc, #268]	; (8000e50 <commandHandler+0x18c>)
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fa43 	bl	80001d0 <strcmp>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d103      	bne.n	8000d58 <commandHandler+0x94>
		printf("\r\n\r\nCommand called:generateRandN");
 8000d50:	4840      	ldr	r0, [pc, #256]	; (8000e54 <commandHandler+0x190>)
 8000d52:	f003 fed9 	bl	8004b08 <iprintf>
 8000d56:	e011      	b.n	8000d7c <commandHandler+0xb8>
	else if (strcmp(commandName,"takeOwnership")== 0)
 8000d58:	493f      	ldr	r1, [pc, #252]	; (8000e58 <commandHandler+0x194>)
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fa38 	bl	80001d0 <strcmp>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d106      	bne.n	8000d74 <commandHandler+0xb0>
	{
		printf("\r\n\r\nCommand called: TPM_TakeOwneship" );
 8000d66:	483d      	ldr	r0, [pc, #244]	; (8000e5c <commandHandler+0x198>)
 8000d68:	f003 fece 	bl	8004b08 <iprintf>
		printf("\r\nTaking Ownership. Please wait... ");
 8000d6c:	483c      	ldr	r0, [pc, #240]	; (8000e60 <commandHandler+0x19c>)
 8000d6e:	f003 fecb 	bl	8004b08 <iprintf>
 8000d72:	e003      	b.n	8000d7c <commandHandler+0xb8>
	}
	else
 	 printf("\r\n\r\nCommand called: %s", commandName );
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	483b      	ldr	r0, [pc, #236]	; (8000e64 <commandHandler+0x1a0>)
 8000d78:	f003 fec6 	bl	8004b08 <iprintf>

	if( (pCommand = findCommand(commandName)) == NULL )
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff37 	bl	8000bf0 <findCommand>
 8000d82:	6178      	str	r0, [r7, #20]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d105      	bne.n	8000d96 <commandHandler+0xd2>
	{
		printf("\r\ncommand not found: %s", commandName );
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	4836      	ldr	r0, [pc, #216]	; (8000e68 <commandHandler+0x1a4>)
 8000d8e:	f003 febb 	bl	8004b08 <iprintf>
		return false;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e043      	b.n	8000e1e <commandHandler+0x15a>
	}

	if( (pFuncPtr = findFuncPtr(commandName)) == NULL )//�������
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff52 	bl	8000c40 <findFuncPtr>
 8000d9c:	6138      	str	r0, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d105      	bne.n	8000db0 <commandHandler+0xec>
	{
		printf("\r\ncommand not found: %s", commandName );
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	4830      	ldr	r0, [pc, #192]	; (8000e68 <commandHandler+0x1a4>)
 8000da8:	f003 feae 	bl	8004b08 <iprintf>
		return false;
 8000dac:	2300      	movs	r3, #0
 8000dae:	e036      	b.n	8000e1e <commandHandler+0x15a>
	}

	init_xferbuf();
 8000db0:	f7ff ff6e 	bl	8000c90 <init_xferbuf>

	memcpy(&xferBuf[0],pCommand->commandBytes,pCommand->commandSize);
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	6859      	ldr	r1, [r3, #4]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	891b      	ldrh	r3, [r3, #8]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	482b      	ldr	r0, [pc, #172]	; (8000e6c <commandHandler+0x1a8>)
 8000dc0:	f003 fe8c 	bl	8004adc <memcpy>

	/* set numBytes */
	numBytes = pCommand->commandSize;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	891a      	ldrh	r2, [r3, #8]
 8000dc8:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <commandHandler+0x1ac>)
 8000dca:	801a      	strh	r2, [r3, #0]

	/* call command function */
	commandFunc = (funcPtr) pFuncPtr->commandFunc;
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]
	commandFunc(pCommand);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	6978      	ldr	r0, [r7, #20]
 8000dd6:	4798      	blx	r3

	if(convertArrayToLong(((TPM_return*) xferBuf)->returnCode)  != TPM_SUCCESS )//TPM_SUCCESS��ֵΪ0
 8000dd8:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <commandHandler+0x1b0>)
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 face 	bl	800137c <convertArrayToLong>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d009      	beq.n	8000dfa <commandHandler+0x136>
		{
			printf("\r\n%s failed!" , commandName);
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	4823      	ldr	r0, [pc, #140]	; (8000e78 <commandHandler+0x1b4>)
 8000dea:	f003 fe8d 	bl	8004b08 <iprintf>
			error_notification(pCommand);
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f000 f856 	bl	8000ea0 <error_notification>
			returnVal = true;
 8000df4:	2301      	movs	r3, #1
 8000df6:	77fb      	strb	r3, [r7, #31]
 8000df8:	e007      	b.n	8000e0a <commandHandler+0x146>
		}
		else
		{
			 /* POST Processing */
			 printf("\r\nTPM_SUCCESS");
 8000dfa:	4820      	ldr	r0, [pc, #128]	; (8000e7c <commandHandler+0x1b8>)
 8000dfc:	f003 fe84 	bl	8004b08 <iprintf>
			 //printf("\r\ndone!");

			success_post_processing(pCommand);
 8000e00:	6978      	ldr	r0, [r7, #20]
 8000e02:	f000 f8d9 	bl	8000fb8 <success_post_processing>
			returnVal = false;
 8000e06:	2300      	movs	r3, #0
 8000e08:	77fb      	strb	r3, [r7, #31]
		}

	printf("\r\npress any key to continue...");
 8000e0a:	481d      	ldr	r0, [pc, #116]	; (8000e80 <commandHandler+0x1bc>)
 8000e0c:	f003 fe7c 	bl	8004b08 <iprintf>
	scanf( ("%c"), &i);
 8000e10:	f107 030b 	add.w	r3, r7, #11
 8000e14:	4619      	mov	r1, r3
 8000e16:	481b      	ldr	r0, [pc, #108]	; (8000e84 <commandHandler+0x1c0>)
 8000e18:	f003 ff1a 	bl	8004c50 <iscanf>

	return returnVal;
 8000e1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3720      	adds	r7, #32
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	08006850 	.word	0x08006850
 8000e2c:	08006868 	.word	0x08006868
 8000e30:	08006894 	.word	0x08006894
 8000e34:	080068a4 	.word	0x080068a4
 8000e38:	080068d0 	.word	0x080068d0
 8000e3c:	080068e0 	.word	0x080068e0
 8000e40:	08006914 	.word	0x08006914
 8000e44:	0800691c 	.word	0x0800691c
 8000e48:	08006940 	.word	0x08006940
 8000e4c:	08006948 	.word	0x08006948
 8000e50:	08006968 	.word	0x08006968
 8000e54:	08006978 	.word	0x08006978
 8000e58:	0800699c 	.word	0x0800699c
 8000e5c:	080069ac 	.word	0x080069ac
 8000e60:	080069d4 	.word	0x080069d4
 8000e64:	080069f8 	.word	0x080069f8
 8000e68:	08006a10 	.word	0x08006a10
 8000e6c:	200001b4 	.word	0x200001b4
 8000e70:	200005b4 	.word	0x200005b4
 8000e74:	200001ba 	.word	0x200001ba
 8000e78:	08006a28 	.word	0x08006a28
 8000e7c:	08006a38 	.word	0x08006a38
 8000e80:	08006a48 	.word	0x08006a48
 8000e84:	08006a68 	.word	0x08006a68

08000e88 <genericFunc>:

/*****************************************************************************************************/


void genericFunc( TPM_Command *pCommand )
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	// generic send/receive routine (generally used for 0Auth commands)
	// can also be used for compliance mode (fixed) vectors
	// printf("\r\n    genericFunc called");

	// send/receive TPM bytes
	sendCommand(getResponse, getLog);
 8000e90:	2101      	movs	r1, #1
 8000e92:	2001      	movs	r0, #1
 8000e94:	f000 f96c 	bl	8001170 <sendCommand>

}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <error_notification>:

/* error notification */
/* error notification */
/* error notification */
void error_notification(TPM_Command *pCommand)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	uint32_t errCode = convertArrayToLong(((TPM_return*) xferBuf)->returnCode);
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	; (8000fa4 <error_notification+0x104>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fa66 	bl	800137c <convertArrayToLong>
 8000eb0:	60f8      	str	r0, [r7, #12]


	/* error notification */
	switch(pCommand->commandTPM)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7a9b      	ldrb	r3, [r3, #10]
 8000eb6:	2b20      	cmp	r3, #32
 8000eb8:	d870      	bhi.n	8000f9c <error_notification+0xfc>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <error_notification+0x20>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000f45 	.word	0x08000f45
 8000ec4:	08000f6f 	.word	0x08000f6f
 8000ec8:	08000f61 	.word	0x08000f61
 8000ecc:	08000f7d 	.word	0x08000f7d
 8000ed0:	08000f7d 	.word	0x08000f7d
 8000ed4:	08000f7d 	.word	0x08000f7d
 8000ed8:	08000f7d 	.word	0x08000f7d
 8000edc:	08000f7d 	.word	0x08000f7d
 8000ee0:	08000f7d 	.word	0x08000f7d
 8000ee4:	08000f7d 	.word	0x08000f7d
 8000ee8:	08000f7d 	.word	0x08000f7d
 8000eec:	08000f7d 	.word	0x08000f7d
 8000ef0:	08000f7d 	.word	0x08000f7d
 8000ef4:	08000f7d 	.word	0x08000f7d
 8000ef8:	08000f7d 	.word	0x08000f7d
 8000efc:	08000f7d 	.word	0x08000f7d
 8000f00:	08000f7d 	.word	0x08000f7d
 8000f04:	08000f7d 	.word	0x08000f7d
 8000f08:	08000f7d 	.word	0x08000f7d
 8000f0c:	08000f7d 	.word	0x08000f7d
 8000f10:	08000f7d 	.word	0x08000f7d
 8000f14:	08000f7d 	.word	0x08000f7d
 8000f18:	08000f7d 	.word	0x08000f7d
 8000f1c:	08000f7d 	.word	0x08000f7d
 8000f20:	08000f7d 	.word	0x08000f7d
 8000f24:	08000f53 	.word	0x08000f53
 8000f28:	08000f7d 	.word	0x08000f7d
 8000f2c:	08000f7d 	.word	0x08000f7d
 8000f30:	08000f7d 	.word	0x08000f7d
 8000f34:	08000f7d 	.word	0x08000f7d
 8000f38:	08000f7d 	.word	0x08000f7d
 8000f3c:	08000f7d 	.word	0x08000f7d
 8000f40:	08000f7d 	.word	0x08000f7d
	{

		case TPM_CMD_STARTUP_CLEAR:
			if(errCode == 0x26)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b26      	cmp	r3, #38	; 0x26
 8000f48:	d11f      	bne.n	8000f8a <error_notification+0xea>
				printf("\r\nTPM_POSTINIT error.\r\nTPM_Startup_Clear command can only be executed once per POR");
 8000f4a:	4817      	ldr	r0, [pc, #92]	; (8000fa8 <error_notification+0x108>)
 8000f4c:	f003 fddc 	bl	8004b08 <iprintf>
		break;
 8000f50:	e01b      	b.n	8000f8a <error_notification+0xea>

		case TPM_CMD_PHYSPRES_PRESENT:
			if(errCode == 0x03)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d11a      	bne.n	8000f8e <error_notification+0xee>
				printf("\r\nTPM_BAD_PARAMETER error.\r\nPhysical Presence command can not be executed.");
 8000f58:	4814      	ldr	r0, [pc, #80]	; (8000fac <error_notification+0x10c>)
 8000f5a:	f003 fdd5 	bl	8004b08 <iprintf>
		break;
 8000f5e:	e016      	b.n	8000f8e <error_notification+0xee>

		case TPM_CMD_CREATE_EKPAIR:
			if(errCode == 0x08)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b08      	cmp	r3, #8
 8000f64:	d115      	bne.n	8000f92 <error_notification+0xf2>
				printf("\r\nTPM_CMD_DISABLED error.\r\nEndorsement Key already Created.");
 8000f66:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <error_notification+0x110>)
 8000f68:	f003 fdce 	bl	8004b08 <iprintf>
		break;
 8000f6c:	e011      	b.n	8000f92 <error_notification+0xf2>

		case TPM_CMD_CONT_SELFTEST:
			if(errCode == 0x26)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2b26      	cmp	r3, #38	; 0x26
 8000f72:	d110      	bne.n	8000f96 <error_notification+0xf6>
				printf("\r\nTPM_POSTINIT error.\r\nTPM_Startup_Clear command can only be executed once per POR");
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <error_notification+0x108>)
 8000f76:	f003 fdc7 	bl	8004b08 <iprintf>
		break;
 8000f7a:	e00c      	b.n	8000f96 <error_notification+0xf6>
		case TPM_CMD_GET_SET_MEM:///Taken out of code
		case TPM_CMD_GET_CAP_PROP_OWNER:
		case TPM_CMD_OSAP_ET_KEY_SRK:


		if(errCode == 0x26)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2b26      	cmp	r3, #38	; 0x26
 8000f80:	d10b      	bne.n	8000f9a <error_notification+0xfa>
			printf("\r\nTPM_POSTINIT error.\r\nTPM_Startup_Clear command must be first command executed.");
 8000f82:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <error_notification+0x114>)
 8000f84:	f003 fdc0 	bl	8004b08 <iprintf>

		break;
 8000f88:	e007      	b.n	8000f9a <error_notification+0xfa>
		break;
 8000f8a:	bf00      	nop
 8000f8c:	e006      	b.n	8000f9c <error_notification+0xfc>
		break;
 8000f8e:	bf00      	nop
 8000f90:	e004      	b.n	8000f9c <error_notification+0xfc>
		break;
 8000f92:	bf00      	nop
 8000f94:	e002      	b.n	8000f9c <error_notification+0xfc>
		break;
 8000f96:	bf00      	nop
 8000f98:	e000      	b.n	8000f9c <error_notification+0xfc>
		break;
 8000f9a:	bf00      	nop

	}
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200001ba 	.word	0x200001ba
 8000fa8:	08006a6c 	.word	0x08006a6c
 8000fac:	08006ac0 	.word	0x08006ac0
 8000fb0:	08006b0c 	.word	0x08006b0c
 8000fb4:	08006b48 	.word	0x08006b48

08000fb8 <success_post_processing>:



void success_post_processing(TPM_Command *pCommand)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	6078      	str	r0, [r7, #4]
	/* command requiring post-processing */
	switch(pCommand->commandTPM)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7a9b      	ldrb	r3, [r3, #10]
 8000fc4:	2b20      	cmp	r3, #32
 8000fc6:	dc19      	bgt.n	8000ffc <success_post_processing+0x44>
 8000fc8:	2b12      	cmp	r3, #18
 8000fca:	da16      	bge.n	8000ffa <success_post_processing+0x42>
 8000fcc:	2b10      	cmp	r3, #16
 8000fce:	dc01      	bgt.n	8000fd4 <success_post_processing+0x1c>
 8000fd0:	2b00      	cmp	r3, #0
		case TPM_CMD_TERMINATE_HANDLE1:///Taken out of code
		case TPM_CMD_TERMINATE_HANDLE0:///Taken out of code
		case TPM_CMD_GET_SET_MEM:///Taken out of code
		case TPM_CMD_GET_CAP_PROP_OWNER:
		case TPM_CMD_OSAP_ET_KEY_SRK:
		break;
 8000fd2:	e012      	b.n	8000ffa <success_post_processing+0x42>
	switch(pCommand->commandTPM)
 8000fd4:	2b11      	cmp	r3, #17
 8000fd6:	d111      	bne.n	8000ffc <success_post_processing+0x44>
			printf("\r\nTPM version: %02X.%02X.%02X.%02X", xferBuf[16], \
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <success_post_processing+0x4c>)
 8000fda:	7c1b      	ldrb	r3, [r3, #16]
 8000fdc:	4619      	mov	r1, r3
					xferBuf[17],xferBuf[18],xferBuf[19]);
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <success_post_processing+0x4c>)
 8000fe0:	7c5b      	ldrb	r3, [r3, #17]
			printf("\r\nTPM version: %02X.%02X.%02X.%02X", xferBuf[16], \
 8000fe2:	461a      	mov	r2, r3
					xferBuf[17],xferBuf[18],xferBuf[19]);
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <success_post_processing+0x4c>)
 8000fe6:	7c9b      	ldrb	r3, [r3, #18]
			printf("\r\nTPM version: %02X.%02X.%02X.%02X", xferBuf[16], \
 8000fe8:	4618      	mov	r0, r3
					xferBuf[17],xferBuf[18],xferBuf[19]);
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <success_post_processing+0x4c>)
 8000fec:	7cdb      	ldrb	r3, [r3, #19]
			printf("\r\nTPM version: %02X.%02X.%02X.%02X", xferBuf[16], \
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <success_post_processing+0x50>)
 8000ff4:	f003 fd88 	bl	8004b08 <iprintf>
		break;
 8000ff8:	e000      	b.n	8000ffc <success_post_processing+0x44>
		break;
 8000ffa:	bf00      	nop

	}

}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200001b4 	.word	0x200001b4
 8001008:	08006b9c 	.word	0x08006b9c

0800100c <dumpXferBuf>:

#define MAX_RETRIES		100

//-----------------------------------------------------------------------------
void dumpXferBuf(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	uint16_t	i;

	for(i=0; i < numBytes; i++)
 8001012:	2300      	movs	r3, #0
 8001014:	80fb      	strh	r3, [r7, #6]
 8001016:	e012      	b.n	800103e <dumpXferBuf+0x32>
	{
		if(!(i % 16))
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	b29b      	uxth	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <dumpXferBuf+0x1e>
		{
			printf("\r\n");
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <dumpXferBuf+0x4c>)
 8001026:	f003 fe0b 	bl	8004c40 <puts>
		}
		printf("%02X ", xferBuf[i] );
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	4a0b      	ldr	r2, [pc, #44]	; (800105c <dumpXferBuf+0x50>)
 800102e:	5cd3      	ldrb	r3, [r2, r3]
 8001030:	4619      	mov	r1, r3
 8001032:	480b      	ldr	r0, [pc, #44]	; (8001060 <dumpXferBuf+0x54>)
 8001034:	f003 fd68 	bl	8004b08 <iprintf>
	for(i=0; i < numBytes; i++)
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	3301      	adds	r3, #1
 800103c:	80fb      	strh	r3, [r7, #6]
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <dumpXferBuf+0x58>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	88fa      	ldrh	r2, [r7, #6]
 8001044:	429a      	cmp	r2, r3
 8001046:	d3e7      	bcc.n	8001018 <dumpXferBuf+0xc>
	}
	printf("\r\n");
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <dumpXferBuf+0x4c>)
 800104a:	f003 fdf9 	bl	8004c40 <puts>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	08006bc0 	.word	0x08006bc0
 800105c:	200001b4 	.word	0x200001b4
 8001060:	08006bc4 	.word	0x08006bc4
 8001064:	200005b4 	.word	0x200005b4

08001068 <spi_master_transfer>:
//-----------------------------------------------------------------------------

uint8_t spi_master_transfer(uint8_t *p_buf, uint8_t *resp, uint32_t size)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
	bool test_bit = false;
 8001074:	2300      	movs	r3, #0
 8001076:	75fb      	strb	r3, [r7, #23]
	if(*p_buf == SPI_WRITE_CMD)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d109      	bne.n	8001094 <spi_master_transfer+0x2c>
	{
		if(size > 1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d906      	bls.n	8001094 <spi_master_transfer+0x2c>
		{
			/* (send size-1) bytes */
			spi_transfer(p_buf, resp, (size-1));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3b01      	subs	r3, #1
 800108a:	461a      	mov	r2, r3
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f000 f806 	bl	80010a0 <spi_transfer>
		}
	}

}
 8001094:	bf00      	nop
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <spi_transfer>:
 *
 * \param pbuf Pointer to buffer to transfer.
 * \param size Size of the buffer.
 */
 uint8_t spi_transfer(uint8_t *p_buf, uint8_t *resp, uint32_t size)
 {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
		uint16_t i;
		uint8_t uc_pcs;
		uint16_t data;
		bool updateCnt = false;
 80010ac:	2300      	movs	r3, #0
 80010ae:	76bb      	strb	r3, [r7, #26]
			uint8_t		bytes[2];
			uint16_t	size;
		} paramSize;

		/* send command bytes */
		for (i = 0; i < CMD_SIZE; i++) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	83fb      	strh	r3, [r7, #30]
 80010b4:	e01d      	b.n	80010f2 <spi_transfer+0x52>
			HAL_SPI_Transmit(&hspi1, &p_buf[i], sizeof(p_buf), 1000);
 80010b6:	8bfb      	ldrh	r3, [r7, #30]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	18d1      	adds	r1, r2, r3
 80010bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c0:	2204      	movs	r2, #4
 80010c2:	4829      	ldr	r0, [pc, #164]	; (8001168 <spi_transfer+0xc8>)
 80010c4:	f002 f857 	bl	8003176 <HAL_SPI_Transmit>

			/* Read Data. */
			uint8_t tmpdata[2];
			HAL_SPI_Receive(&hspi1, tmpdata, sizeof(tmpdata), 1000);
 80010c8:	f107 0114 	add.w	r1, r7, #20
 80010cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d0:	2202      	movs	r2, #2
 80010d2:	4825      	ldr	r0, [pc, #148]	; (8001168 <spi_transfer+0xc8>)
 80010d4:	f002 f9bd 	bl	8003452 <HAL_SPI_Receive>
			data = (uint16_t)tmpdata[0];
 80010d8:	7d3b      	ldrb	r3, [r7, #20]
 80010da:	83bb      	strh	r3, [r7, #28]
			data = (data << 8);
 80010dc:	8bbb      	ldrh	r3, [r7, #28]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	83bb      	strh	r3, [r7, #28]
			data |= (uint16_t)tmpdata[1];
 80010e2:	7d7b      	ldrb	r3, [r7, #21]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	8bbb      	ldrh	r3, [r7, #28]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	83bb      	strh	r3, [r7, #28]
		for (i = 0; i < CMD_SIZE; i++) {
 80010ec:	8bfb      	ldrh	r3, [r7, #30]
 80010ee:	3301      	adds	r3, #1
 80010f0:	83fb      	strh	r3, [r7, #30]
 80010f2:	8bfb      	ldrh	r3, [r7, #30]
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d9de      	bls.n	80010b6 <spi_transfer+0x16>
		}

		retry = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	76fb      	strb	r3, [r7, #27]
		/* handle wait state before proceeding */
		do
		{
			/* check for wait state, loop 'til completed */
			if((data & WAIT_STATE_MASK) == WAIT_STATE_REQUIRED)
 80010fc:	8bbb      	ldrh	r3, [r7, #28]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d11b      	bne.n	800113e <spi_transfer+0x9e>
			{
				uint8_t tmp = 0xFF;
 8001106:	23ff      	movs	r3, #255	; 0xff
 8001108:	74fb      	strb	r3, [r7, #19]
				HAL_SPI_Transmit(&hspi1, &tmp, sizeof(tmp), 1000);
 800110a:	f107 0113 	add.w	r1, r7, #19
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	2201      	movs	r2, #1
 8001114:	4814      	ldr	r0, [pc, #80]	; (8001168 <spi_transfer+0xc8>)
 8001116:	f002 f82e 	bl	8003176 <HAL_SPI_Transmit>
				uint8_t tmpdata[2];
				HAL_SPI_Receive(&hspi1, tmpdata, sizeof(tmpdata), 1000);
 800111a:	f107 0110 	add.w	r1, r7, #16
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	2202      	movs	r2, #2
 8001124:	4810      	ldr	r0, [pc, #64]	; (8001168 <spi_transfer+0xc8>)
 8001126:	f002 f994 	bl	8003452 <HAL_SPI_Receive>
				data = (uint16_t)tmpdata[0];
 800112a:	7c3b      	ldrb	r3, [r7, #16]
 800112c:	83bb      	strh	r3, [r7, #28]
				data = (data << 8);
 800112e:	8bbb      	ldrh	r3, [r7, #28]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	83bb      	strh	r3, [r7, #28]
				data |= (uint16_t)tmpdata[1];
 8001134:	7c7b      	ldrb	r3, [r7, #17]
 8001136:	b29a      	uxth	r2, r3
 8001138:	8bbb      	ldrh	r3, [r7, #28]
 800113a:	4313      	orrs	r3, r2
 800113c:	83bb      	strh	r3, [r7, #28]
			}

			if(retry > MAX_RETRIES)
 800113e:	7efb      	ldrb	r3, [r7, #27]
 8001140:	2b64      	cmp	r3, #100	; 0x64
 8001142:	d904      	bls.n	800114e <spi_transfer+0xae>
			{
				printf("\n\r Comm Error: WAIT STATE bit was never \
 8001144:	4809      	ldr	r0, [pc, #36]	; (800116c <spi_transfer+0xcc>)
 8001146:	f003 fd7b 	bl	8004c40 <puts>
				\r\n was never  released by TPM device\r\n");
				return 1;
 800114a:	2301      	movs	r3, #1
 800114c:	e007      	b.n	800115e <spi_transfer+0xbe>
			}
			retry++;
 800114e:	7efb      	ldrb	r3, [r7, #27]
 8001150:	3301      	adds	r3, #1
 8001152:	76fb      	strb	r3, [r7, #27]
		}while((data & WAIT_STATE_MASK) == WAIT_STATE_REQUIRED);
 8001154:	8bbb      	ldrh	r3, [r7, #28]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0ce      	beq.n	80010fc <spi_transfer+0x5c>

 }
 800115e:	4618      	mov	r0, r3
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000c8 	.word	0x200000c8
 800116c:	08006bcc 	.word	0x08006bcc

08001170 <sendCommand>:

void sendCommand(responseAction wantResponse, logAction wantLog)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b096      	sub	sp, #88	; 0x58
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	460a      	mov	r2, r1
 800117a:	71fb      	strb	r3, [r7, #7]
 800117c:	4613      	mov	r3, r2
 800117e:	71bb      	strb	r3, [r7, #6]
	uint8_t retry_tpmGo;
	/* this must remain static */
	static bool firstTime = true;

	/* show what we're sending */
	if(wantLog == getLog)
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d104      	bne.n	8001190 <sendCommand+0x20>
	{
		printf("\r\nto TPM:");
 8001186:	4815      	ldr	r0, [pc, #84]	; (80011dc <sendCommand+0x6c>)
 8001188:	f003 fcbe 	bl	8004b08 <iprintf>
		dumpXferBuf();
 800118c:	f7ff ff3e 	bl	800100c <dumpXferBuf>
	}

	/* notify user about takeownFunc's key generation */
	if(xferBuf[9] == 0x0D)
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <sendCommand+0x70>)
 8001192:	7a5b      	ldrb	r3, [r3, #9]
 8001194:	2b0d      	cmp	r3, #13
 8001196:	d102      	bne.n	800119e <sendCommand+0x2e>
	{
		printf("\r\nPlease wait. Generating SRK ...");
 8001198:	4812      	ldr	r0, [pc, #72]	; (80011e4 <sendCommand+0x74>)
 800119a:	f003 fcb5 	bl	8004b08 <iprintf>
	}

	/* notify user about createWrapFunc's key generation */
	if(xferBuf[9] == 0x1f)
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <sendCommand+0x70>)
 80011a0:	7a5b      	ldrb	r3, [r3, #9]
 80011a2:	2b1f      	cmp	r3, #31
 80011a4:	d102      	bne.n	80011ac <sendCommand+0x3c>
	{
		printf("\r\nPlease wait. Generating key ...");
 80011a6:	4810      	ldr	r0, [pc, #64]	; (80011e8 <sendCommand+0x78>)
 80011a8:	f003 fcae 	bl	8004b08 <iprintf>
	}

	/* check locality register access */
	cmd_buffer[0] = SPI_READ_CMD;
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	cmd_buffer[1] = 0xD4;
 80011b2:	23d4      	movs	r3, #212	; 0xd4
 80011b4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	cmd_buffer[2] = 0x00;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	cmd_buffer[3] = 0x00;
 80011be:	2300      	movs	r3, #0
 80011c0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	spi_master_transfer(&cmd_buffer[0],&resp_buffer[0], 0x01);
 80011c4:	f107 0108 	add.w	r1, r7, #8
 80011c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011cc:	2201      	movs	r2, #1
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff4a 	bl	8001068 <spi_master_transfer>


}
 80011d4:	bf00      	nop
 80011d6:	3758      	adds	r7, #88	; 0x58
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	08006c20 	.word	0x08006c20
 80011e0:	200001b4 	.word	0x200001b4
 80011e4:	08006c2c 	.word	0x08006c2c
 80011e8:	08006c50 	.word	0x08006c50

080011ec <menuHandler>:
#include "usart.h"



uint8_t menuHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	uint8_t	option;
	printf("\033[2J" );	// clear VT-100 screen
 80011f2:	4835      	ldr	r0, [pc, #212]	; (80012c8 <menuHandler+0xdc>)
 80011f4:	f003 fc88 	bl	8004b08 <iprintf>
	printf("\033[H"  );	// home cursor
 80011f8:	4834      	ldr	r0, [pc, #208]	; (80012cc <menuHandler+0xe0>)
 80011fa:	f003 fc85 	bl	8004b08 <iprintf>

	printf("\033[2J" );	// clear VT-100 screen
 80011fe:	4832      	ldr	r0, [pc, #200]	; (80012c8 <menuHandler+0xdc>)
 8001200:	f003 fc82 	bl	8004b08 <iprintf>
	printf("\033[H"  );	// home cursor
 8001204:	4831      	ldr	r0, [pc, #196]	; (80012cc <menuHandler+0xe0>)
 8001206:	f003 fc7f 	bl	8004b08 <iprintf>

	printf("\r\n    SPI Demo for TPM - Version 2.0" );
 800120a:	4831      	ldr	r0, [pc, #196]	; (80012d0 <menuHandler+0xe4>)
 800120c:	f003 fc7c 	bl	8004b08 <iprintf>
	printf("\r\n (for AT97SSC3205P SPI protocol only)" );
 8001210:	4830      	ldr	r0, [pc, #192]	; (80012d4 <menuHandler+0xe8>)
 8001212:	f003 fc79 	bl	8004b08 <iprintf>

	printf("\r\n" );
 8001216:	4830      	ldr	r0, [pc, #192]	; (80012d8 <menuHandler+0xec>)
 8001218:	f003 fd12 	bl	8004c40 <puts>
	printf("\r\n These are all available commands:" );
 800121c:	482f      	ldr	r0, [pc, #188]	; (80012dc <menuHandler+0xf0>)
 800121e:	f003 fc73 	bl	8004b08 <iprintf>
	printf("\r\n\r\n" );
 8001222:	482f      	ldr	r0, [pc, #188]	; (80012e0 <menuHandler+0xf4>)
 8001224:	f003 fd0c 	bl	8004c40 <puts>
	printf("\r\n1  TPM_Startup(ST_CLEAR)" );
 8001228:	482e      	ldr	r0, [pc, #184]	; (80012e4 <menuHandler+0xf8>)
 800122a:	f003 fc6d 	bl	8004b08 <iprintf>
	printf("\r\n2  TPM_ContinueSelfTest" );
 800122e:	482e      	ldr	r0, [pc, #184]	; (80012e8 <menuHandler+0xfc>)
 8001230:	f003 fc6a 	bl	8004b08 <iprintf>
	printf("\r\n3  TPM_CreateEKPair" );
 8001234:	482d      	ldr	r0, [pc, #180]	; (80012ec <menuHandler+0x100>)
 8001236:	f003 fc67 	bl	8004b08 <iprintf>
	printf("\r\n4  TPM_TakeOwnerShip (sequence)" );
 800123a:	482d      	ldr	r0, [pc, #180]	; (80012f0 <menuHandler+0x104>)
 800123c:	f003 fc64 	bl	8004b08 <iprintf>
	printf("\r\n5  TPM_CreateWrapKey (sequence)" );
 8001240:	482c      	ldr	r0, [pc, #176]	; (80012f4 <menuHandler+0x108>)
 8001242:	f003 fc61 	bl	8004b08 <iprintf>
	printf("\r\n6  TPM_Loadkey (sequence)" );
 8001246:	482c      	ldr	r0, [pc, #176]	; (80012f8 <menuHandler+0x10c>)
 8001248:	f003 fc5e 	bl	8004b08 <iprintf>
	printf("\r\n7  TPM_Seal (sequence)" );
 800124c:	482b      	ldr	r0, [pc, #172]	; (80012fc <menuHandler+0x110>)
 800124e:	f003 fc5b 	bl	8004b08 <iprintf>
	printf("\r\na  TPM_UnSeal (sequence)" );
 8001252:	482b      	ldr	r0, [pc, #172]	; (8001300 <menuHandler+0x114>)
 8001254:	f003 fc58 	bl	8004b08 <iprintf>
	printf("\r\nb  TPM_Sign (sequence)" );
 8001258:	482a      	ldr	r0, [pc, #168]	; (8001304 <menuHandler+0x118>)
 800125a:	f003 fc55 	bl	8004b08 <iprintf>
	printf("\r\nc  TPM_VerifySign (sequence)" );
 800125e:	482a      	ldr	r0, [pc, #168]	; (8001308 <menuHandler+0x11c>)
 8001260:	f003 fc52 	bl	8004b08 <iprintf>
	printf("\r\nd  TPM_GetPubKey" );
 8001264:	4829      	ldr	r0, [pc, #164]	; (800130c <menuHandler+0x120>)
 8001266:	f003 fc4f 	bl	8004b08 <iprintf>
	printf("\r\n" );
 800126a:	481b      	ldr	r0, [pc, #108]	; (80012d8 <menuHandler+0xec>)
 800126c:	f003 fce8 	bl	8004c40 <puts>
	printf("\r\nr  TPM_GeneratePrime128");
 8001270:	4827      	ldr	r0, [pc, #156]	; (8001310 <menuHandler+0x124>)
 8001272:	f003 fc49 	bl	8004b08 <iprintf>
	printf("\r\nt  TPM_GetCapability (versionVal)" );
 8001276:	4827      	ldr	r0, [pc, #156]	; (8001314 <menuHandler+0x128>)
 8001278:	f003 fc46 	bl	8004b08 <iprintf>
	printf("\r\nu  TPM_Reset (clears authSessions)" );
 800127c:	4826      	ldr	r0, [pc, #152]	; (8001318 <menuHandler+0x12c>)
 800127e:	f003 fc43 	bl	8004b08 <iprintf>
	printf("\r\nv  TPM_FlushSpecifc - keyHandle" );
 8001282:	4826      	ldr	r0, [pc, #152]	; (800131c <menuHandler+0x130>)
 8001284:	f003 fc40 	bl	8004b08 <iprintf>
	printf("\r\nw  TPM_ForceClear (sequence)" );
 8001288:	4825      	ldr	r0, [pc, #148]	; (8001320 <menuHandler+0x134>)
 800128a:	f003 fc3d 	bl	8004b08 <iprintf>
	printf("\r\nx  enable/activate TPM (sequence)" );
 800128e:	4825      	ldr	r0, [pc, #148]	; (8001324 <menuHandler+0x138>)
 8001290:	f003 fc3a 	bl	8004b08 <iprintf>
	printf("\r\ny  disable/deactivate TPM (sequence)" );
 8001294:	4824      	ldr	r0, [pc, #144]	; (8001328 <menuHandler+0x13c>)
 8001296:	f003 fc37 	bl	8004b08 <iprintf>
	printf("\r\nz  display known keys" );
 800129a:	4824      	ldr	r0, [pc, #144]	; (800132c <menuHandler+0x140>)
 800129c:	f003 fc34 	bl	8004b08 <iprintf>
	printf("\r\n" );
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <menuHandler+0xec>)
 80012a2:	f003 fccd 	bl	8004c40 <puts>
	printf("\r\n" );
 80012a6:	480c      	ldr	r0, [pc, #48]	; (80012d8 <menuHandler+0xec>)
 80012a8:	f003 fcca 	bl	8004c40 <puts>
//	printf( "\r\nq)  quit demo                   ");

	printf("\r\n\r\nplease pick a command: ");
 80012ac:	4820      	ldr	r0, [pc, #128]	; (8001330 <menuHandler+0x144>)
 80012ae:	f003 fc2b 	bl	8004b08 <iprintf>
    scanf( " %c", &option);
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	4619      	mov	r1, r3
 80012b6:	481f      	ldr	r0, [pc, #124]	; (8001334 <menuHandler+0x148>)
 80012b8:	f003 fcca 	bl	8004c50 <iscanf>
	return option;
 80012bc:	79fb      	ldrb	r3, [r7, #7]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	08006c74 	.word	0x08006c74
 80012cc:	08006c7c 	.word	0x08006c7c
 80012d0:	08006c80 	.word	0x08006c80
 80012d4:	08006ca8 	.word	0x08006ca8
 80012d8:	08006cd0 	.word	0x08006cd0
 80012dc:	08006cd4 	.word	0x08006cd4
 80012e0:	08006cfc 	.word	0x08006cfc
 80012e4:	08006d00 	.word	0x08006d00
 80012e8:	08006d1c 	.word	0x08006d1c
 80012ec:	08006d38 	.word	0x08006d38
 80012f0:	08006d50 	.word	0x08006d50
 80012f4:	08006d74 	.word	0x08006d74
 80012f8:	08006d98 	.word	0x08006d98
 80012fc:	08006db4 	.word	0x08006db4
 8001300:	08006dd0 	.word	0x08006dd0
 8001304:	08006dec 	.word	0x08006dec
 8001308:	08006e08 	.word	0x08006e08
 800130c:	08006e28 	.word	0x08006e28
 8001310:	08006e3c 	.word	0x08006e3c
 8001314:	08006e58 	.word	0x08006e58
 8001318:	08006e7c 	.word	0x08006e7c
 800131c:	08006ea4 	.word	0x08006ea4
 8001320:	08006ec8 	.word	0x08006ec8
 8001324:	08006ee8 	.word	0x08006ee8
 8001328:	08006f0c 	.word	0x08006f0c
 800132c:	08006f34 	.word	0x08006f34
 8001330:	08006f4c 	.word	0x08006f4c
 8001334:	08006f68 	.word	0x08006f68

08001338 <doCommand>:


void doCommand(uint8_t menuOption)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	switch(menuOption)
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b31      	cmp	r3, #49	; 0x31
 8001346:	d103      	bne.n	8001350 <doCommand+0x18>
	{
	case '1':
		commandHandler("TPM_Startup_Clear");
 8001348:	4809      	ldr	r0, [pc, #36]	; (8001370 <doCommand+0x38>)
 800134a:	f7ff fcbb 	bl	8000cc4 <commandHandler>
		break;
 800134e:	e00a      	b.n	8001366 <doCommand+0x2e>

	default:
		printf("\r\nInvalid option: %c", menuOption);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4619      	mov	r1, r3
 8001354:	4807      	ldr	r0, [pc, #28]	; (8001374 <doCommand+0x3c>)
 8001356:	f003 fbd7 	bl	8004b08 <iprintf>
		scanf("%c", &menuOption);
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <doCommand+0x40>)
 8001360:	f003 fc76 	bl	8004c50 <iscanf>
	}

}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	08006f6c 	.word	0x08006f6c
 8001374:	08006f80 	.word	0x08006f80
 8001378:	08006f98 	.word	0x08006f98

0800137c <convertArrayToLong>:


/*****************************************************************************************************/
// converts 4 byte MSB ordered array to uint32
uint32_t convertArrayToLong( uint8_t *addr )
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
        struct ul sul;
        uint32_t longvar;
    } theUnion;

    // Align The Individual Bytes In The Proper Order
    theUnion.sul.uc4 = *addr++;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	73fb      	strb	r3, [r7, #15]
    theUnion.sul.uc3 = *addr++;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	73bb      	strb	r3, [r7, #14]
    theUnion.sul.uc2 = *addr++;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	737b      	strb	r3, [r7, #13]
    theUnion.sul.uc1 = *addr;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	733b      	strb	r3, [r7, #12]

    // Return The Value As A Unsigned Long
    return( theUnion.longvar );
 80013a8:	68fb      	ldr	r3, [r7, #12]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c0:	2003      	movs	r0, #3
 80013c2:	f000 f91f 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c6:	200f      	movs	r0, #15
 80013c8:	f000 f80e 	bl	80013e8 <HAL_InitTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	e001      	b.n	80013dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d8:	f7ff fa2e 	bl	8000838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013dc:	79fb      	ldrb	r3, [r7, #7]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_InitTick+0x6c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d023      	beq.n	8001444 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_InitTick+0x70>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_InitTick+0x6c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f91d 	bl	8001652 <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10f      	bne.n	800143e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d809      	bhi.n	8001438 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f000 f8f5 	bl	800161a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_InitTick+0x74>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e007      	b.n	8001448 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e004      	b.n	8001448 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e001      	b.n	8001448 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000044 	.word	0x20000044
 8001458:	20000000 	.word	0x20000000
 800145c:	20000040 	.word	0x20000040

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000044 	.word	0x20000044
 8001484:	200005b8 	.word	0x200005b8

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	200005b8 	.word	0x200005b8

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d0:	d301      	bcc.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00f      	b.n	80015f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <SysTick_Config+0x40>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	210f      	movs	r1, #15
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f7ff ff8e 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <SysTick_Config+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SysTick_Config+0x40>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff47 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff5c 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ff8e 	bl	8001558 <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff5d 	bl	8001504 <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffb0 	bl	80015c0 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	e17f      	b.n	800197c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2101      	movs	r1, #1
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8171 	beq.w	8001976 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d005      	beq.n	80016ac <HAL_GPIO_Init+0x40>
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d130      	bne.n	800170e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016e2:	2201      	movs	r2, #1
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	f003 0201 	and.w	r2, r3, #1
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b03      	cmp	r3, #3
 8001718:	d118      	bne.n	800174c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001720:	2201      	movs	r2, #1
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	08db      	lsrs	r3, r3, #3
 8001736:	f003 0201 	and.w	r2, r3, #1
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b03      	cmp	r3, #3
 8001756:	d017      	beq.n	8001788 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d123      	bne.n	80017dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	6939      	ldr	r1, [r7, #16]
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0203 	and.w	r2, r3, #3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80ac 	beq.w	8001976 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	4b5f      	ldr	r3, [pc, #380]	; (800199c <HAL_GPIO_Init+0x330>)
 8001820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001822:	4a5e      	ldr	r2, [pc, #376]	; (800199c <HAL_GPIO_Init+0x330>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6613      	str	r3, [r2, #96]	; 0x60
 800182a:	4b5c      	ldr	r3, [pc, #368]	; (800199c <HAL_GPIO_Init+0x330>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001836:	4a5a      	ldr	r2, [pc, #360]	; (80019a0 <HAL_GPIO_Init+0x334>)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001860:	d025      	beq.n	80018ae <HAL_GPIO_Init+0x242>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4f      	ldr	r2, [pc, #316]	; (80019a4 <HAL_GPIO_Init+0x338>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d01f      	beq.n	80018aa <HAL_GPIO_Init+0x23e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4e      	ldr	r2, [pc, #312]	; (80019a8 <HAL_GPIO_Init+0x33c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d019      	beq.n	80018a6 <HAL_GPIO_Init+0x23a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4d      	ldr	r2, [pc, #308]	; (80019ac <HAL_GPIO_Init+0x340>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0x236>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4c      	ldr	r2, [pc, #304]	; (80019b0 <HAL_GPIO_Init+0x344>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00d      	beq.n	800189e <HAL_GPIO_Init+0x232>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4b      	ldr	r2, [pc, #300]	; (80019b4 <HAL_GPIO_Init+0x348>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d007      	beq.n	800189a <HAL_GPIO_Init+0x22e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4a      	ldr	r2, [pc, #296]	; (80019b8 <HAL_GPIO_Init+0x34c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_GPIO_Init+0x22a>
 8001892:	2306      	movs	r3, #6
 8001894:	e00c      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 8001896:	2307      	movs	r3, #7
 8001898:	e00a      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 800189a:	2305      	movs	r3, #5
 800189c:	e008      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 800189e:	2304      	movs	r3, #4
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 80018a2:	2303      	movs	r3, #3
 80018a4:	e004      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e002      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 80018ae:	2300      	movs	r3, #0
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	f002 0203 	and.w	r2, r2, #3
 80018b6:	0092      	lsls	r2, r2, #2
 80018b8:	4093      	lsls	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018c0:	4937      	ldr	r1, [pc, #220]	; (80019a0 <HAL_GPIO_Init+0x334>)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <HAL_GPIO_Init+0x350>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018f2:	4a32      	ldr	r2, [pc, #200]	; (80019bc <HAL_GPIO_Init+0x350>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018f8:	4b30      	ldr	r3, [pc, #192]	; (80019bc <HAL_GPIO_Init+0x350>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800191c:	4a27      	ldr	r2, [pc, #156]	; (80019bc <HAL_GPIO_Init+0x350>)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001922:	4b26      	ldr	r3, [pc, #152]	; (80019bc <HAL_GPIO_Init+0x350>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001946:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <HAL_GPIO_Init+0x350>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <HAL_GPIO_Init+0x350>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001970:	4a12      	ldr	r2, [pc, #72]	; (80019bc <HAL_GPIO_Init+0x350>)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa22 f303 	lsr.w	r3, r2, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	f47f ae78 	bne.w	800167c <HAL_GPIO_Init+0x10>
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010000 	.word	0x40010000
 80019a4:	48000400 	.word	0x48000400
 80019a8:	48000800 	.word	0x48000800
 80019ac:	48000c00 	.word	0x48000c00
 80019b0:	48001000 	.word	0x48001000
 80019b4:	48001400 	.word	0x48001400
 80019b8:	48001800 	.word	0x48001800
 80019bc:	40010400 	.word	0x40010400

080019c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
 80019cc:	4613      	mov	r3, r2
 80019ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d0:	787b      	ldrb	r3, [r7, #1]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019dc:	e002      	b.n	80019e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_PWREx_GetVoltageRange+0x18>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40007000 	.word	0x40007000

08001a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a1a:	d130      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a28:	d038      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2232      	movs	r2, #50	; 0x32
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9b      	lsrs	r3, r3, #18
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a50:	e002      	b.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a64:	d102      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f2      	bne.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a78:	d110      	bne.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e00f      	b.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8a:	d007      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a94:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	431bde83 	.word	0x431bde83

08001ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e3ca      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aca:	4b97      	ldr	r3, [pc, #604]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad4:	4b94      	ldr	r3, [pc, #592]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 80e4 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <HAL_RCC_OscConfig+0x4a>
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b0c      	cmp	r3, #12
 8001af6:	f040 808b 	bne.w	8001c10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	f040 8087 	bne.w	8001c10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b02:	4b89      	ldr	r3, [pc, #548]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x62>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e3a2      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1a      	ldr	r2, [r3, #32]
 8001b1e:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_RCC_OscConfig+0x7c>
 8001b2a:	4b7f      	ldr	r3, [pc, #508]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b32:	e005      	b.n	8001b40 <HAL_RCC_OscConfig+0x88>
 8001b34:	4b7c      	ldr	r3, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d223      	bcs.n	8001b8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fd55 	bl	80025f8 <RCC_SetFlashLatencyFromMSIRange>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e383      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b58:	4b73      	ldr	r3, [pc, #460]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a72      	ldr	r2, [pc, #456]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	496d      	ldr	r1, [pc, #436]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b76:	4b6c      	ldr	r3, [pc, #432]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	4968      	ldr	r1, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
 8001b8a:	e025      	b.n	8001bd8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b8c:	4b66      	ldr	r3, [pc, #408]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a65      	ldr	r2, [pc, #404]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4960      	ldr	r1, [pc, #384]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001baa:	4b5f      	ldr	r3, [pc, #380]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	495b      	ldr	r1, [pc, #364]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d109      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 fd15 	bl	80025f8 <RCC_SetFlashLatencyFromMSIRange>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e343      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd8:	f000 fc4a 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b52      	ldr	r3, [pc, #328]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	4950      	ldr	r1, [pc, #320]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf4:	4a4e      	ldr	r2, [pc, #312]	; (8001d30 <HAL_RCC_OscConfig+0x278>)
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	; (8001d34 <HAL_RCC_OscConfig+0x27c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fbf3 	bl	80013e8 <HAL_InitTick>
 8001c02:	4603      	mov	r3, r0
 8001c04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d052      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	e327      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d032      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c18:	4b43      	ldr	r3, [pc, #268]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a42      	ldr	r2, [pc, #264]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fc30 	bl	8001488 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fc2c 	bl	8001488 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e310      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3e:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c4a:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a36      	ldr	r2, [pc, #216]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4931      	ldr	r1, [pc, #196]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c68:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	492c      	ldr	r1, [pc, #176]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
 8001c7c:	e01a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a29      	ldr	r2, [pc, #164]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff fbfd 	bl	8001488 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c92:	f7ff fbf9 	bl	8001488 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e2dd      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca4:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x1da>
 8001cb0:	e000      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d074      	beq.n	8001daa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x21a>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	d10e      	bne.n	8001cea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d10b      	bne.n	8001cea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d064      	beq.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d160      	bne.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e2ba      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x24a>
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e026      	b.n	8001d50 <HAL_RCC_OscConfig+0x298>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d0a:	d115      	bne.n	8001d38 <HAL_RCC_OscConfig+0x280>
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a02      	ldr	r2, [pc, #8]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_OscConfig+0x298>
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08006fa8 	.word	0x08006fa8
 8001d30:	20000000 	.word	0x20000000
 8001d34:	20000040 	.word	0x20000040
 8001d38:	4ba0      	ldr	r3, [pc, #640]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a9f      	ldr	r2, [pc, #636]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b9d      	ldr	r3, [pc, #628]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a9c      	ldr	r2, [pc, #624]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff fb96 	bl	8001488 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7ff fb92 	bl	8001488 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e276      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d72:	4b92      	ldr	r3, [pc, #584]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x2a8>
 8001d7e:	e014      	b.n	8001daa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff fb82 	bl	8001488 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff fb7e 	bl	8001488 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e262      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9a:	4b88      	ldr	r3, [pc, #544]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x2d0>
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d060      	beq.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x310>
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d119      	bne.n	8001df6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d116      	bne.n	8001df6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc8:	4b7c      	ldr	r3, [pc, #496]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_OscConfig+0x328>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e23f      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	4973      	ldr	r1, [pc, #460]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df4:	e040      	b.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d023      	beq.n	8001e46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfe:	4b6f      	ldr	r3, [pc, #444]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6e      	ldr	r2, [pc, #440]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fb3d 	bl	8001488 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e12:	f7ff fb39 	bl	8001488 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e21d      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e24:	4b65      	ldr	r3, [pc, #404]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b62      	ldr	r3, [pc, #392]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	495f      	ldr	r1, [pc, #380]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
 8001e44:	e018      	b.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a5c      	ldr	r2, [pc, #368]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7ff fb19 	bl	8001488 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fb15 	bl	8001488 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e1f9      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e6c:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f0      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d03c      	beq.n	8001efe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01c      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8c:	4b4b      	ldr	r3, [pc, #300]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e92:	4a4a      	ldr	r2, [pc, #296]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7ff faf4 	bl	8001488 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7ff faf0 	bl	8001488 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e1d4      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ef      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x3ec>
 8001ec4:	e01b      	b.n	8001efe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ecc:	4a3b      	ldr	r2, [pc, #236]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001ece:	f023 0301 	bic.w	r3, r3, #1
 8001ed2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fad7 	bl	8001488 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ede:	f7ff fad3 	bl	8001488 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e1b7      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef0:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ef      	bne.n	8001ede <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80a6 	beq.w	8002058 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10d      	bne.n	8001f38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f26:	6593      	str	r3, [r2, #88]	; 0x58
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f34:	2301      	movs	r3, #1
 8001f36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f38:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <HAL_RCC_OscConfig+0x508>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d118      	bne.n	8001f76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCC_OscConfig+0x508>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <HAL_RCC_OscConfig+0x508>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f50:	f7ff fa9a 	bl	8001488 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f58:	f7ff fa96 	bl	8001488 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e17a      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_RCC_OscConfig+0x508>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d108      	bne.n	8001f90 <HAL_RCC_OscConfig+0x4d8>
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f84:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f8e:	e029      	b.n	8001fe4 <HAL_RCC_OscConfig+0x52c>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	d115      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x50c>
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9e:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	4a03      	ldr	r2, [pc, #12]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb8:	e014      	b.n	8001fe4 <HAL_RCC_OscConfig+0x52c>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	4b9c      	ldr	r3, [pc, #624]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fca:	4a9b      	ldr	r2, [pc, #620]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd4:	4b98      	ldr	r3, [pc, #608]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	4a97      	ldr	r2, [pc, #604]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d016      	beq.n	800201a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fec:	f7ff fa4c 	bl	8001488 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff4:	f7ff fa48 	bl	8001488 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e12a      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200a:	4b8b      	ldr	r3, [pc, #556]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0ed      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x53c>
 8002018:	e015      	b.n	8002046 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201a:	f7ff fa35 	bl	8001488 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002020:	e00a      	b.n	8002038 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7ff fa31 	bl	8001488 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e113      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002038:	4b7f      	ldr	r3, [pc, #508]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1ed      	bne.n	8002022 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002046:	7ffb      	ldrb	r3, [r7, #31]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d105      	bne.n	8002058 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204c:	4b7a      	ldr	r3, [pc, #488]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	4a79      	ldr	r2, [pc, #484]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002056:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80fe 	beq.w	800225e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	2b02      	cmp	r3, #2
 8002068:	f040 80d0 	bne.w	800220c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800206c:	4b72      	ldr	r3, [pc, #456]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	429a      	cmp	r2, r3
 800207e:	d130      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	3b01      	subs	r3, #1
 800208c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d127      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d11f      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020ac:	2a07      	cmp	r2, #7
 80020ae:	bf14      	ite	ne
 80020b0:	2201      	movne	r2, #1
 80020b2:	2200      	moveq	r2, #0
 80020b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d113      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	3b01      	subs	r3, #1
 80020c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	085b      	lsrs	r3, r3, #1
 80020da:	3b01      	subs	r3, #1
 80020dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d06e      	beq.n	80021c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	d069      	beq.n	80021bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020f4:	4b50      	ldr	r3, [pc, #320]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0ad      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002104:	4b4c      	ldr	r3, [pc, #304]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a4b      	ldr	r2, [pc, #300]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800210a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800210e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002110:	f7ff f9ba 	bl	8001488 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff f9b6 	bl	8001488 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e09a      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212a:	4b43      	ldr	r3, [pc, #268]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002136:	4b40      	ldr	r3, [pc, #256]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	4b40      	ldr	r3, [pc, #256]	; (800223c <HAL_RCC_OscConfig+0x784>)
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002146:	3a01      	subs	r2, #1
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002150:	0212      	lsls	r2, r2, #8
 8002152:	4311      	orrs	r1, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002158:	0852      	lsrs	r2, r2, #1
 800215a:	3a01      	subs	r2, #1
 800215c:	0552      	lsls	r2, r2, #21
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002164:	0852      	lsrs	r2, r2, #1
 8002166:	3a01      	subs	r2, #1
 8002168:	0652      	lsls	r2, r2, #25
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002170:	0912      	lsrs	r2, r2, #4
 8002172:	0452      	lsls	r2, r2, #17
 8002174:	430a      	orrs	r2, r1
 8002176:	4930      	ldr	r1, [pc, #192]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002178:	4313      	orrs	r3, r2
 800217a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800217c:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2d      	ldr	r2, [pc, #180]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002186:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002188:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a2a      	ldr	r2, [pc, #168]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002192:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002194:	f7ff f978 	bl	8001488 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff f974 	bl	8001488 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e058      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ba:	e050      	b.n	800225e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e04f      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d148      	bne.n	800225e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a19      	ldr	r2, [pc, #100]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80021de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021e4:	f7ff f950 	bl	8001488 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7ff f94c 	bl	8001488 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e030      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x734>
 800220a:	e028      	b.n	800225e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d023      	beq.n	800225a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a08      	ldr	r2, [pc, #32]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002218:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800221c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221e:	f7ff f933 	bl	8001488 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002224:	e00c      	b.n	8002240 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002226:	f7ff f92f 	bl	8001488 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d905      	bls.n	8002240 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e013      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
 8002238:	40021000 	.word	0x40021000
 800223c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_RCC_OscConfig+0x7b0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ec      	bne.n	8002226 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_OscConfig+0x7b0>)
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	4905      	ldr	r1, [pc, #20]	; (8002268 <HAL_RCC_OscConfig+0x7b0>)
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_RCC_OscConfig+0x7b4>)
 8002254:	4013      	ands	r3, r2
 8002256:	60cb      	str	r3, [r1, #12]
 8002258:	e001      	b.n	800225e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	feeefffc 	.word	0xfeeefffc

08002270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0e7      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002284:	4b75      	ldr	r3, [pc, #468]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d910      	bls.n	80022b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b72      	ldr	r3, [pc, #456]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 0207 	bic.w	r2, r3, #7
 800229a:	4970      	ldr	r1, [pc, #448]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a2:	4b6e      	ldr	r3, [pc, #440]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0cf      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d010      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	4b66      	ldr	r3, [pc, #408]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d908      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b63      	ldr	r3, [pc, #396]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4960      	ldr	r1, [pc, #384]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d04c      	beq.n	8002388 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f6:	4b5a      	ldr	r3, [pc, #360]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d121      	bne.n	8002346 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0a6      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230e:	4b54      	ldr	r3, [pc, #336]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d115      	bne.n	8002346 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e09a      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d107      	bne.n	8002336 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002326:	4b4e      	ldr	r3, [pc, #312]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e08e      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002336:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e086      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002346:	4b46      	ldr	r3, [pc, #280]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f023 0203 	bic.w	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4943      	ldr	r1, [pc, #268]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002354:	4313      	orrs	r3, r2
 8002356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002358:	f7ff f896 	bl	8001488 <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	e00a      	b.n	8002376 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002360:	f7ff f892 	bl	8001488 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e06e      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 020c 	and.w	r2, r3, #12
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	429a      	cmp	r2, r3
 8002386:	d1eb      	bne.n	8002360 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d010      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	4b31      	ldr	r3, [pc, #196]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d208      	bcs.n	80023b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	492b      	ldr	r1, [pc, #172]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b6:	4b29      	ldr	r3, [pc, #164]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d210      	bcs.n	80023e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c4:	4b25      	ldr	r3, [pc, #148]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 0207 	bic.w	r2, r3, #7
 80023cc:	4923      	ldr	r1, [pc, #140]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e036      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f2:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4918      	ldr	r1, [pc, #96]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d009      	beq.n	8002424 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4910      	ldr	r1, [pc, #64]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002424:	f000 f824 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	490b      	ldr	r1, [pc, #44]	; (8002464 <HAL_RCC_ClockConfig+0x1f4>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
 8002440:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 8002442:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x1fc>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe ffcd 	bl	80013e8 <HAL_InitTick>
 800244e:	4603      	mov	r3, r0
 8002450:	72fb      	strb	r3, [r7, #11]

  return status;
 8002452:	7afb      	ldrb	r3, [r7, #11]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40022000 	.word	0x40022000
 8002460:	40021000 	.word	0x40021000
 8002464:	08006fa8 	.word	0x08006fa8
 8002468:	20000000 	.word	0x20000000
 800246c:	20000040 	.word	0x20000040

08002470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247e:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002488:	4b3b      	ldr	r3, [pc, #236]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d121      	bne.n	80024e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d11e      	bne.n	80024e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024a4:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024b0:	4b31      	ldr	r3, [pc, #196]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	e005      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024c0:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024cc:	4a2b      	ldr	r2, [pc, #172]	; (800257c <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10d      	bne.n	80024f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d102      	bne.n	80024ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	e004      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024f4:	4b23      	ldr	r3, [pc, #140]	; (8002584 <HAL_RCC_GetSysClockFreq+0x114>)
 80024f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d134      	bne.n	8002568 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024fe:	4b1e      	ldr	r3, [pc, #120]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d003      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0xa6>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d003      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0xac>
 8002514:	e005      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_RCC_GetSysClockFreq+0x110>)
 8002518:	617b      	str	r3, [r7, #20]
      break;
 800251a:	e005      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_RCC_GetSysClockFreq+0x114>)
 800251e:	617b      	str	r3, [r7, #20]
      break;
 8002520:	e002      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	617b      	str	r3, [r7, #20]
      break;
 8002526:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	3301      	adds	r3, #1
 8002534:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	fb03 f202 	mul.w	r2, r3, r2
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	0e5b      	lsrs	r3, r3, #25
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	3301      	adds	r3, #1
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002568:	69bb      	ldr	r3, [r7, #24]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3724      	adds	r7, #36	; 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	08006fc0 	.word	0x08006fc0
 8002580:	00f42400 	.word	0x00f42400
 8002584:	007a1200 	.word	0x007a1200

08002588 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <HAL_RCC_GetHCLKFreq+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000000 	.word	0x20000000

080025a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025a4:	f7ff fff0 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4904      	ldr	r1, [pc, #16]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08006fb8 	.word	0x08006fb8

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025d0:	f7ff ffda 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0adb      	lsrs	r3, r3, #11
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4904      	ldr	r1, [pc, #16]	; (80025f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08006fb8 	.word	0x08006fb8

080025f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002600:	2300      	movs	r3, #0
 8002602:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002604:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002610:	f7ff f9ee 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 8002614:	6178      	str	r0, [r7, #20]
 8002616:	e014      	b.n	8002642 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	4a24      	ldr	r2, [pc, #144]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002622:	6593      	str	r3, [r2, #88]	; 0x58
 8002624:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002630:	f7ff f9de 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 8002634:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002640:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002648:	d10b      	bne.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b80      	cmp	r3, #128	; 0x80
 800264e:	d919      	bls.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2ba0      	cmp	r3, #160	; 0xa0
 8002654:	d902      	bls.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002656:	2302      	movs	r3, #2
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	e013      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800265c:	2301      	movs	r3, #1
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e010      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b80      	cmp	r3, #128	; 0x80
 8002666:	d902      	bls.n	800266e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002668:	2303      	movs	r3, #3
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	e00a      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b80      	cmp	r3, #128	; 0x80
 8002672:	d102      	bne.n	800267a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002674:	2302      	movs	r3, #2
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	e004      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b70      	cmp	r3, #112	; 0x70
 800267e:	d101      	bne.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002680:	2301      	movs	r3, #1
 8002682:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 0207 	bic.w	r2, r3, #7
 800268c:	4909      	ldr	r1, [pc, #36]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002694:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d001      	beq.n	80026a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40022000 	.word	0x40022000

080026b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026c0:	2300      	movs	r3, #0
 80026c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026c4:	2300      	movs	r3, #0
 80026c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d041      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026dc:	d02a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026e2:	d824      	bhi.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026e8:	d008      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026ee:	d81e      	bhi.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f8:	d010      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026fa:	e018      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026fc:	4b86      	ldr	r3, [pc, #536]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a85      	ldr	r2, [pc, #532]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002706:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002708:	e015      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3304      	adds	r3, #4
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fabb 	bl	8002c8c <RCCEx_PLLSAI1_Config>
 8002716:	4603      	mov	r3, r0
 8002718:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800271a:	e00c      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3320      	adds	r3, #32
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fba6 	bl	8002e74 <RCCEx_PLLSAI2_Config>
 8002728:	4603      	mov	r3, r0
 800272a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800272c:	e003      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	74fb      	strb	r3, [r7, #19]
      break;
 8002732:	e000      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10b      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800273c:	4b76      	ldr	r3, [pc, #472]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800274a:	4973      	ldr	r1, [pc, #460]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002752:	e001      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d041      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002768:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800276c:	d02a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800276e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002772:	d824      	bhi.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002778:	d008      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800277a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800277e:	d81e      	bhi.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002788:	d010      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800278a:	e018      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800278c:	4b62      	ldr	r3, [pc, #392]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a61      	ldr	r2, [pc, #388]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002796:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002798:	e015      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fa73 	bl	8002c8c <RCCEx_PLLSAI1_Config>
 80027a6:	4603      	mov	r3, r0
 80027a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027aa:	e00c      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3320      	adds	r3, #32
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fb5e 	bl	8002e74 <RCCEx_PLLSAI2_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027bc:	e003      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	74fb      	strb	r3, [r7, #19]
      break;
 80027c2:	e000      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10b      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027cc:	4b52      	ldr	r3, [pc, #328]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027da:	494f      	ldr	r1, [pc, #316]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027e2:	e001      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80a0 	beq.w	8002936 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027fa:	4b47      	ldr	r3, [pc, #284]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800280a:	2300      	movs	r3, #0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00d      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002810:	4b41      	ldr	r3, [pc, #260]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	4a40      	ldr	r2, [pc, #256]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281a:	6593      	str	r3, [r2, #88]	; 0x58
 800281c:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002828:	2301      	movs	r3, #1
 800282a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800282c:	4b3b      	ldr	r3, [pc, #236]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a3a      	ldr	r2, [pc, #232]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002836:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002838:	f7fe fe26 	bl	8001488 <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800283e:	e009      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002840:	f7fe fe22 	bl	8001488 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d902      	bls.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	74fb      	strb	r3, [r7, #19]
        break;
 8002852:	e005      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002854:	4b31      	ldr	r3, [pc, #196]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ef      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d15c      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002866:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002870:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01f      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	429a      	cmp	r2, r3
 8002882:	d019      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002884:	4b24      	ldr	r3, [pc, #144]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002890:	4b21      	ldr	r3, [pc, #132]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	4a20      	ldr	r2, [pc, #128]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028b0:	4a19      	ldr	r2, [pc, #100]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d016      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7fe fde1 	bl	8001488 <HAL_GetTick>
 80028c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c8:	e00b      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ca:	f7fe fddd 	bl	8001488 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d8:	4293      	cmp	r3, r2
 80028da:	d902      	bls.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	74fb      	strb	r3, [r7, #19]
            break;
 80028e0:	e006      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ec      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10c      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002906:	4904      	ldr	r1, [pc, #16]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800290e:	e009      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	74bb      	strb	r3, [r7, #18]
 8002914:	e006      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002920:	7cfb      	ldrb	r3, [r7, #19]
 8002922:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002924:	7c7b      	ldrb	r3, [r7, #17]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d105      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292a:	4b9e      	ldr	r3, [pc, #632]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	4a9d      	ldr	r2, [pc, #628]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002934:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002942:	4b98      	ldr	r3, [pc, #608]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002948:	f023 0203 	bic.w	r2, r3, #3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	4994      	ldr	r1, [pc, #592]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002964:	4b8f      	ldr	r3, [pc, #572]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	f023 020c 	bic.w	r2, r3, #12
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	498c      	ldr	r1, [pc, #560]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002986:	4b87      	ldr	r3, [pc, #540]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	4983      	ldr	r1, [pc, #524]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029a8:	4b7e      	ldr	r3, [pc, #504]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	497b      	ldr	r1, [pc, #492]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029ca:	4b76      	ldr	r3, [pc, #472]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d8:	4972      	ldr	r1, [pc, #456]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029ec:	4b6d      	ldr	r3, [pc, #436]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	496a      	ldr	r1, [pc, #424]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a0e:	4b65      	ldr	r3, [pc, #404]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	4961      	ldr	r1, [pc, #388]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a30:	4b5c      	ldr	r3, [pc, #368]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3e:	4959      	ldr	r1, [pc, #356]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a52:	4b54      	ldr	r3, [pc, #336]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a60:	4950      	ldr	r1, [pc, #320]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a74:	4b4b      	ldr	r3, [pc, #300]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	4948      	ldr	r1, [pc, #288]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a96:	4b43      	ldr	r3, [pc, #268]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	493f      	ldr	r1, [pc, #252]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d028      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ab8:	4b3a      	ldr	r3, [pc, #232]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac6:	4937      	ldr	r1, [pc, #220]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad8:	4b32      	ldr	r3, [pc, #200]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4a31      	ldr	r2, [pc, #196]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae2:	60d3      	str	r3, [r2, #12]
 8002ae4:	e011      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aee:	d10c      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	2101      	movs	r1, #1
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f8c8 	bl	8002c8c <RCCEx_PLLSAI1_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d028      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b16:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	491f      	ldr	r1, [pc, #124]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b34:	d106      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b40:	60d3      	str	r3, [r2, #12]
 8002b42:	e011      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2101      	movs	r1, #1
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 f899 	bl	8002c8c <RCCEx_PLLSAI1_Config>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b5e:	7cfb      	ldrb	r3, [r7, #19]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d02b      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b82:	4908      	ldr	r1, [pc, #32]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b92:	d109      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4a02      	ldr	r2, [pc, #8]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b9e:	60d3      	str	r3, [r2, #12]
 8002ba0:	e014      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f867 	bl	8002c8c <RCCEx_PLLSAI1_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d02f      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bd8:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be6:	4928      	ldr	r1, [pc, #160]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bf6:	d10d      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f844 	bl	8002c8c <RCCEx_PLLSAI1_Config>
 8002c04:	4603      	mov	r3, r0
 8002c06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c08:	7cfb      	ldrb	r3, [r7, #19]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d014      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c0e:	7cfb      	ldrb	r3, [r7, #19]
 8002c10:	74bb      	strb	r3, [r7, #18]
 8002c12:	e011      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3320      	adds	r3, #32
 8002c22:	2102      	movs	r1, #2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f925 	bl	8002e74 <RCCEx_PLLSAI2_Config>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c52:	490d      	ldr	r1, [pc, #52]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c76:	4904      	ldr	r1, [pc, #16]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40021000 	.word	0x40021000

08002c8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c9a:	4b75      	ldr	r3, [pc, #468]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d018      	beq.n	8002cd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ca6:	4b72      	ldr	r3, [pc, #456]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0203 	and.w	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d10d      	bne.n	8002cd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cbe:	4b6c      	ldr	r3, [pc, #432]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
       ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d047      	beq.n	8002d62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
 8002cd6:	e044      	b.n	8002d62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d018      	beq.n	8002d12 <RCCEx_PLLSAI1_Config+0x86>
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d825      	bhi.n	8002d30 <RCCEx_PLLSAI1_Config+0xa4>
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d002      	beq.n	8002cee <RCCEx_PLLSAI1_Config+0x62>
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d009      	beq.n	8002d00 <RCCEx_PLLSAI1_Config+0x74>
 8002cec:	e020      	b.n	8002d30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cee:	4b60      	ldr	r3, [pc, #384]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d11d      	bne.n	8002d36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfe:	e01a      	b.n	8002d36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d00:	4b5b      	ldr	r3, [pc, #364]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d116      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d10:	e013      	b.n	8002d3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d12:	4b57      	ldr	r3, [pc, #348]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d1e:	4b54      	ldr	r3, [pc, #336]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d2e:	e006      	b.n	8002d3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      break;
 8002d34:	e004      	b.n	8002d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d36:	bf00      	nop
 8002d38:	e002      	b.n	8002d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10d      	bne.n	8002d62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d46:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	4944      	ldr	r1, [pc, #272]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d17d      	bne.n	8002e64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d68:	4b41      	ldr	r3, [pc, #260]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a40      	ldr	r2, [pc, #256]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d74:	f7fe fb88 	bl	8001488 <HAL_GetTick>
 8002d78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d7a:	e009      	b.n	8002d90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d7c:	f7fe fb84 	bl	8001488 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d902      	bls.n	8002d90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d8e:	e005      	b.n	8002d9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d90:	4b37      	ldr	r3, [pc, #220]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ef      	bne.n	8002d7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d160      	bne.n	8002e64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d111      	bne.n	8002dcc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da8:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6892      	ldr	r2, [r2, #8]
 8002db8:	0211      	lsls	r1, r2, #8
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68d2      	ldr	r2, [r2, #12]
 8002dbe:	0912      	lsrs	r2, r2, #4
 8002dc0:	0452      	lsls	r2, r2, #17
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	492a      	ldr	r1, [pc, #168]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	610b      	str	r3, [r1, #16]
 8002dca:	e027      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d112      	bne.n	8002df8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dd2:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6892      	ldr	r2, [r2, #8]
 8002de2:	0211      	lsls	r1, r2, #8
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6912      	ldr	r2, [r2, #16]
 8002de8:	0852      	lsrs	r2, r2, #1
 8002dea:	3a01      	subs	r2, #1
 8002dec:	0552      	lsls	r2, r2, #21
 8002dee:	430a      	orrs	r2, r1
 8002df0:	491f      	ldr	r1, [pc, #124]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	610b      	str	r3, [r1, #16]
 8002df6:	e011      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6892      	ldr	r2, [r2, #8]
 8002e08:	0211      	lsls	r1, r2, #8
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6952      	ldr	r2, [r2, #20]
 8002e0e:	0852      	lsrs	r2, r2, #1
 8002e10:	3a01      	subs	r2, #1
 8002e12:	0652      	lsls	r2, r2, #25
 8002e14:	430a      	orrs	r2, r1
 8002e16:	4916      	ldr	r1, [pc, #88]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f7fe fb2e 	bl	8001488 <HAL_GetTick>
 8002e2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e2e:	e009      	b.n	8002e44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e30:	f7fe fb2a 	bl	8001488 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d902      	bls.n	8002e44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	73fb      	strb	r3, [r7, #15]
          break;
 8002e42:	e005      	b.n	8002e50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0ef      	beq.n	8002e30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	4904      	ldr	r1, [pc, #16]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000

08002e74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e82:	4b6a      	ldr	r3, [pc, #424]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d018      	beq.n	8002ec0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e8e:	4b67      	ldr	r3, [pc, #412]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0203 	and.w	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d10d      	bne.n	8002eba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ea6:	4b61      	ldr	r3, [pc, #388]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
       ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d047      	beq.n	8002f4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	e044      	b.n	8002f4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d018      	beq.n	8002efa <RCCEx_PLLSAI2_Config+0x86>
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d825      	bhi.n	8002f18 <RCCEx_PLLSAI2_Config+0xa4>
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d002      	beq.n	8002ed6 <RCCEx_PLLSAI2_Config+0x62>
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d009      	beq.n	8002ee8 <RCCEx_PLLSAI2_Config+0x74>
 8002ed4:	e020      	b.n	8002f18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ed6:	4b55      	ldr	r3, [pc, #340]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11d      	bne.n	8002f1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee6:	e01a      	b.n	8002f1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ee8:	4b50      	ldr	r3, [pc, #320]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d116      	bne.n	8002f22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef8:	e013      	b.n	8002f22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002efa:	4b4c      	ldr	r3, [pc, #304]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10f      	bne.n	8002f26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f06:	4b49      	ldr	r3, [pc, #292]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f16:	e006      	b.n	8002f26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1c:	e004      	b.n	8002f28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e002      	b.n	8002f28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10d      	bne.n	8002f4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f2e:	4b3f      	ldr	r3, [pc, #252]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6819      	ldr	r1, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	430b      	orrs	r3, r1
 8002f44:	4939      	ldr	r1, [pc, #228]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d167      	bne.n	8003020 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f50:	4b36      	ldr	r3, [pc, #216]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a35      	ldr	r2, [pc, #212]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5c:	f7fe fa94 	bl	8001488 <HAL_GetTick>
 8002f60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f62:	e009      	b.n	8002f78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f64:	f7fe fa90 	bl	8001488 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d902      	bls.n	8002f78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	73fb      	strb	r3, [r7, #15]
        break;
 8002f76:	e005      	b.n	8002f84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f78:	4b2c      	ldr	r3, [pc, #176]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ef      	bne.n	8002f64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d14a      	bne.n	8003020 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d111      	bne.n	8002fb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f90:	4b26      	ldr	r3, [pc, #152]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6892      	ldr	r2, [r2, #8]
 8002fa0:	0211      	lsls	r1, r2, #8
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68d2      	ldr	r2, [r2, #12]
 8002fa6:	0912      	lsrs	r2, r2, #4
 8002fa8:	0452      	lsls	r2, r2, #17
 8002faa:	430a      	orrs	r2, r1
 8002fac:	491f      	ldr	r1, [pc, #124]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	614b      	str	r3, [r1, #20]
 8002fb2:	e011      	b.n	8002fd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6892      	ldr	r2, [r2, #8]
 8002fc4:	0211      	lsls	r1, r2, #8
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6912      	ldr	r2, [r2, #16]
 8002fca:	0852      	lsrs	r2, r2, #1
 8002fcc:	3a01      	subs	r2, #1
 8002fce:	0652      	lsls	r2, r2, #25
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	4916      	ldr	r1, [pc, #88]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fd8:	4b14      	ldr	r3, [pc, #80]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a13      	ldr	r2, [pc, #76]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe4:	f7fe fa50 	bl	8001488 <HAL_GetTick>
 8002fe8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fea:	e009      	b.n	8003000 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fec:	f7fe fa4c 	bl	8001488 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d902      	bls.n	8003000 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ffe:	e005      	b.n	800300c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ef      	beq.n	8002fec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	4904      	ldr	r1, [pc, #16]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 800301c:	4313      	orrs	r3, r2
 800301e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000

08003030 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e095      	b.n	800316e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	2b00      	cmp	r3, #0
 8003048:	d108      	bne.n	800305c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003052:	d009      	beq.n	8003068 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	61da      	str	r2, [r3, #28]
 800305a:	e005      	b.n	8003068 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fd fb96 	bl	80007b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800309e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030a8:	d902      	bls.n	80030b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	e002      	b.n	80030b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030be:	d007      	beq.n	80030d0 <HAL_SPI_Init+0xa0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030c8:	d002      	beq.n	80030d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003112:	ea42 0103 	orr.w	r1, r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	0c1b      	lsrs	r3, r3, #16
 800312c:	f003 0204 	and.w	r2, r3, #4
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800314c:	ea42 0103 	orr.w	r1, r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b088      	sub	sp, #32
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_SPI_Transmit+0x22>
 8003194:	2302      	movs	r3, #2
 8003196:	e158      	b.n	800344a <HAL_SPI_Transmit+0x2d4>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031a0:	f7fe f972 	bl	8001488 <HAL_GetTick>
 80031a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d002      	beq.n	80031bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
 80031b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031ba:	e13d      	b.n	8003438 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_SPI_Transmit+0x52>
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d102      	bne.n	80031ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031cc:	e134      	b.n	8003438 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2203      	movs	r2, #3
 80031d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	88fa      	ldrh	r2, [r7, #6]
 80031e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	88fa      	ldrh	r2, [r7, #6]
 80031ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003218:	d10f      	bne.n	800323a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003228:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003238:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d007      	beq.n	8003258 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003256:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003260:	d94b      	bls.n	80032fa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_SPI_Transmit+0xfa>
 800326a:	8afb      	ldrh	r3, [r7, #22]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d13e      	bne.n	80032ee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	881a      	ldrh	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	1c9a      	adds	r2, r3, #2
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003294:	e02b      	b.n	80032ee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d112      	bne.n	80032ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	881a      	ldrh	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	1c9a      	adds	r2, r3, #2
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032c8:	e011      	b.n	80032ee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ca:	f7fe f8dd 	bl	8001488 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d803      	bhi.n	80032e2 <HAL_SPI_Transmit+0x16c>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d102      	bne.n	80032e8 <HAL_SPI_Transmit+0x172>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032ec:	e0a4      	b.n	8003438 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1ce      	bne.n	8003296 <HAL_SPI_Transmit+0x120>
 80032f8:	e07c      	b.n	80033f4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_SPI_Transmit+0x192>
 8003302:	8afb      	ldrh	r3, [r7, #22]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d170      	bne.n	80033ea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d912      	bls.n	8003338 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003316:	881a      	ldrh	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	1c9a      	adds	r2, r3, #2
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b02      	subs	r3, #2
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003336:	e058      	b.n	80033ea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	330c      	adds	r3, #12
 8003342:	7812      	ldrb	r2, [r2, #0]
 8003344:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800335e:	e044      	b.n	80033ea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b02      	cmp	r3, #2
 800336c:	d12b      	bne.n	80033c6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d912      	bls.n	800339e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	881a      	ldrh	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	1c9a      	adds	r2, r3, #2
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b02      	subs	r3, #2
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800339c:	e025      	b.n	80033ea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	7812      	ldrb	r2, [r2, #0]
 80033aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033c4:	e011      	b.n	80033ea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033c6:	f7fe f85f 	bl	8001488 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d803      	bhi.n	80033de <HAL_SPI_Transmit+0x268>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d102      	bne.n	80033e4 <HAL_SPI_Transmit+0x26e>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033e8:	e026      	b.n	8003438 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1b5      	bne.n	8003360 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	6839      	ldr	r1, [r7, #0]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fce3 	bl	8003dc4 <SPI_EndRxTxTransaction>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10a      	bne.n	8003428 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e000      	b.n	8003438 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003436:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003448:	7ffb      	ldrb	r3, [r7, #31]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b088      	sub	sp, #32
 8003456:	af02      	add	r7, sp, #8
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	603b      	str	r3, [r7, #0]
 800345e:	4613      	mov	r3, r2
 8003460:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800346e:	d112      	bne.n	8003496 <HAL_SPI_Receive+0x44>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10e      	bne.n	8003496 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2204      	movs	r2, #4
 800347c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003480:	88fa      	ldrh	r2, [r7, #6]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	4613      	mov	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f910 	bl	80036b2 <HAL_SPI_TransmitReceive>
 8003492:	4603      	mov	r3, r0
 8003494:	e109      	b.n	80036aa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_SPI_Receive+0x52>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e102      	b.n	80036aa <HAL_SPI_Receive+0x258>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034ac:	f7fd ffec 	bl	8001488 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d002      	beq.n	80034c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034be:	2302      	movs	r3, #2
 80034c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034c2:	e0e9      	b.n	8003698 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_SPI_Receive+0x7e>
 80034ca:	88fb      	ldrh	r3, [r7, #6]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d102      	bne.n	80034d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034d4:	e0e0      	b.n	8003698 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2204      	movs	r2, #4
 80034da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	88fa      	ldrh	r2, [r7, #6]
 80034f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003520:	d908      	bls.n	8003534 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	e007      	b.n	8003544 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003542:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354c:	d10f      	bne.n	800356e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800356c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d007      	beq.n	800358c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800358a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003594:	d867      	bhi.n	8003666 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003596:	e030      	b.n	80035fa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d117      	bne.n	80035d6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f103 020c 	add.w	r2, r3, #12
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	7812      	ldrb	r2, [r2, #0]
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80035d4:	e011      	b.n	80035fa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035d6:	f7fd ff57 	bl	8001488 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d803      	bhi.n	80035ee <HAL_SPI_Receive+0x19c>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d102      	bne.n	80035f4 <HAL_SPI_Receive+0x1a2>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035f8:	e04e      	b.n	8003698 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1c8      	bne.n	8003598 <HAL_SPI_Receive+0x146>
 8003606:	e034      	b.n	8003672 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b01      	cmp	r3, #1
 8003614:	d115      	bne.n	8003642 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	b292      	uxth	r2, r2
 8003622:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	1c9a      	adds	r2, r3, #2
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003640:	e011      	b.n	8003666 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003642:	f7fd ff21 	bl	8001488 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d803      	bhi.n	800365a <HAL_SPI_Receive+0x208>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d102      	bne.n	8003660 <HAL_SPI_Receive+0x20e>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003664:	e018      	b.n	8003698 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1ca      	bne.n	8003608 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	6839      	ldr	r1, [r7, #0]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fb4c 	bl	8003d14 <SPI_EndRxTransaction>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	75fb      	strb	r3, [r7, #23]
 8003694:	e000      	b.n	8003698 <HAL_SPI_Receive+0x246>
  }

error :
 8003696:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b08a      	sub	sp, #40	; 0x28
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036c0:	2301      	movs	r3, #1
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_SPI_TransmitReceive+0x26>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e1fb      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x41e>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036e0:	f7fd fed2 	bl	8001488 <HAL_GetTick>
 80036e4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036ec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80036f8:	887b      	ldrh	r3, [r7, #2]
 80036fa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036fc:	7efb      	ldrb	r3, [r7, #27]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d00e      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x6e>
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003708:	d106      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x66>
 8003712:	7efb      	ldrb	r3, [r7, #27]
 8003714:	2b04      	cmp	r3, #4
 8003716:	d003      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003718:	2302      	movs	r3, #2
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800371e:	e1cd      	b.n	8003abc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x80>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x80>
 800372c:	887b      	ldrh	r3, [r7, #2]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003738:	e1c0      	b.n	8003abc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b04      	cmp	r3, #4
 8003744:	d003      	beq.n	800374e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2205      	movs	r2, #5
 800374a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	887a      	ldrh	r2, [r7, #2]
 800375e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	887a      	ldrh	r2, [r7, #2]
 8003766:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	887a      	ldrh	r2, [r7, #2]
 8003774:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	887a      	ldrh	r2, [r7, #2]
 800377a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003790:	d802      	bhi.n	8003798 <HAL_SPI_TransmitReceive+0xe6>
 8003792:	8a3b      	ldrh	r3, [r7, #16]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d908      	bls.n	80037aa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	e007      	b.n	80037ba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b40      	cmp	r3, #64	; 0x40
 80037c6:	d007      	beq.n	80037d8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037e0:	d97c      	bls.n	80038dc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x13e>
 80037ea:	8a7b      	ldrh	r3, [r7, #18]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d169      	bne.n	80038c4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	881a      	ldrh	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	1c9a      	adds	r2, r3, #2
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003814:	e056      	b.n	80038c4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d11b      	bne.n	800385c <HAL_SPI_TransmitReceive+0x1aa>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d016      	beq.n	800385c <HAL_SPI_TransmitReceive+0x1aa>
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	2b01      	cmp	r3, #1
 8003832:	d113      	bne.n	800385c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	881a      	ldrh	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	1c9a      	adds	r2, r3, #2
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d11c      	bne.n	80038a4 <HAL_SPI_TransmitReceive+0x1f2>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d016      	beq.n	80038a4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	b292      	uxth	r2, r2
 8003882:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	1c9a      	adds	r2, r3, #2
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038a0:	2301      	movs	r3, #1
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038a4:	f7fd fdf0 	bl	8001488 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d807      	bhi.n	80038c4 <HAL_SPI_TransmitReceive+0x212>
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ba:	d003      	beq.n	80038c4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80038c2:	e0fb      	b.n	8003abc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1a3      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x164>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d19d      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x164>
 80038da:	e0df      	b.n	8003a9c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_SPI_TransmitReceive+0x23a>
 80038e4:	8a7b      	ldrh	r3, [r7, #18]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	f040 80cb 	bne.w	8003a82 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d912      	bls.n	800391c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	881a      	ldrh	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	1c9a      	adds	r2, r3, #2
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b02      	subs	r3, #2
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	87da      	strh	r2, [r3, #62]	; 0x3e
 800391a:	e0b2      	b.n	8003a82 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	330c      	adds	r3, #12
 8003926:	7812      	ldrb	r2, [r2, #0]
 8003928:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003942:	e09e      	b.n	8003a82 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b02      	cmp	r3, #2
 8003950:	d134      	bne.n	80039bc <HAL_SPI_TransmitReceive+0x30a>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d02f      	beq.n	80039bc <HAL_SPI_TransmitReceive+0x30a>
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	2b01      	cmp	r3, #1
 8003960:	d12c      	bne.n	80039bc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d912      	bls.n	8003992 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	881a      	ldrh	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	1c9a      	adds	r2, r3, #2
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b02      	subs	r3, #2
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003990:	e012      	b.n	80039b8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d148      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x3aa>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d042      	beq.n	8003a5c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d923      	bls.n	8003a2a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	b292      	uxth	r2, r2
 80039ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	1c9a      	adds	r2, r3, #2
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	3b02      	subs	r3, #2
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d81f      	bhi.n	8003a58 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a26:	605a      	str	r2, [r3, #4]
 8003a28:	e016      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f103 020c 	add.w	r2, r3, #12
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	7812      	ldrb	r2, [r2, #0]
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a5c:	f7fd fd14 	bl	8001488 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d803      	bhi.n	8003a74 <HAL_SPI_TransmitReceive+0x3c2>
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d102      	bne.n	8003a7a <HAL_SPI_TransmitReceive+0x3c8>
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a80:	e01c      	b.n	8003abc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f47f af5b 	bne.w	8003944 <HAL_SPI_TransmitReceive+0x292>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f47f af54 	bne.w	8003944 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f98f 	bl	8003dc4 <SPI_EndRxTxTransaction>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d006      	beq.n	8003aba <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	661a      	str	r2, [r3, #96]	; 0x60
 8003ab8:	e000      	b.n	8003abc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003aba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3728      	adds	r7, #40	; 0x28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ae8:	f7fd fcce 	bl	8001488 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003af8:	f7fd fcc6 	bl	8001488 <HAL_GetTick>
 8003afc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003afe:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	015b      	lsls	r3, r3, #5
 8003b04:	0d1b      	lsrs	r3, r3, #20
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	fb02 f303 	mul.w	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b0e:	e054      	b.n	8003bba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d050      	beq.n	8003bba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b18:	f7fd fcb6 	bl	8001488 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d902      	bls.n	8003b2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d13d      	bne.n	8003baa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b46:	d111      	bne.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b50:	d004      	beq.n	8003b5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5a:	d107      	bne.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b74:	d10f      	bne.n	8003b96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e017      	b.n	8003bda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	bf0c      	ite	eq
 8003bca:	2301      	moveq	r3, #1
 8003bcc:	2300      	movne	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d19b      	bne.n	8003b10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000000 	.word	0x20000000

08003be8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bfa:	f7fd fc45 	bl	8001488 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	4413      	add	r3, r2
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c0a:	f7fd fc3d 	bl	8001488 <HAL_GetTick>
 8003c0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c18:	4b3d      	ldr	r3, [pc, #244]	; (8003d10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	00da      	lsls	r2, r3, #3
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	0d1b      	lsrs	r3, r3, #20
 8003c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c30:	e060      	b.n	8003cf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c38:	d107      	bne.n	8003c4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d104      	bne.n	8003c4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d050      	beq.n	8003cf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c52:	f7fd fc19 	bl	8001488 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d902      	bls.n	8003c68 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d13d      	bne.n	8003ce4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c80:	d111      	bne.n	8003ca6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8a:	d004      	beq.n	8003c96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c94:	d107      	bne.n	8003ca6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cae:	d10f      	bne.n	8003cd0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e010      	b.n	8003d06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d196      	bne.n	8003c32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3728      	adds	r7, #40	; 0x28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000000 	.word	0x20000000

08003d14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d28:	d111      	bne.n	8003d4e <SPI_EndRxTransaction+0x3a>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d32:	d004      	beq.n	8003d3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3c:	d107      	bne.n	8003d4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2200      	movs	r2, #0
 8003d56:	2180      	movs	r1, #128	; 0x80
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff febd 	bl	8003ad8 <SPI_WaitFlagStateUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d007      	beq.n	8003d74 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d68:	f043 0220 	orr.w	r2, r3, #32
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e023      	b.n	8003dbc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d7c:	d11d      	bne.n	8003dba <SPI_EndRxTransaction+0xa6>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d86:	d004      	beq.n	8003d92 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d90:	d113      	bne.n	8003dba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7ff ff22 	bl	8003be8 <SPI_WaitFifoStateUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e000      	b.n	8003dbc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7ff ff03 	bl	8003be8 <SPI_WaitFifoStateUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e027      	b.n	8003e48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2180      	movs	r1, #128	; 0x80
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f7ff fe68 	bl	8003ad8 <SPI_WaitFlagStateUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e12:	f043 0220 	orr.w	r2, r3, #32
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e014      	b.n	8003e48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff fedc 	bl	8003be8 <SPI_WaitFifoStateUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3a:	f043 0220 	orr.w	r2, r3, #32
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e000      	b.n	8003e48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e040      	b.n	8003ee4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fc fe08 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2224      	movs	r2, #36	; 0x24
 8003e7c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0201 	bic.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f992 	bl	80041b8 <UART_SetConfig>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e022      	b.n	8003ee4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fc3e 	bl	8004728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fcc5 	bl	800486c <UART_CheckIdleState>
 8003ee2:	4603      	mov	r3, r0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	f040 8082 	bne.w	800400a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_UART_Transmit+0x26>
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e07a      	b.n	800400c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_UART_Transmit+0x38>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e073      	b.n	800400c <HAL_UART_Transmit+0x120>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2221      	movs	r2, #33	; 0x21
 8003f38:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f3a:	f7fd faa5 	bl	8001488 <HAL_GetTick>
 8003f3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	88fa      	ldrh	r2, [r7, #6]
 8003f44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	88fa      	ldrh	r2, [r7, #6]
 8003f4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f58:	d108      	bne.n	8003f6c <HAL_UART_Transmit+0x80>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d104      	bne.n	8003f6c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	e003      	b.n	8003f74 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f7c:	e02d      	b.n	8003fda <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2200      	movs	r2, #0
 8003f86:	2180      	movs	r1, #128	; 0x80
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fcb8 	bl	80048fe <UART_WaitOnFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e039      	b.n	800400c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10b      	bne.n	8003fb6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	881a      	ldrh	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003faa:	b292      	uxth	r2, r2
 8003fac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	e008      	b.n	8003fc8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	b292      	uxth	r2, r2
 8003fc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1cb      	bne.n	8003f7e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2200      	movs	r2, #0
 8003fee:	2140      	movs	r1, #64	; 0x40
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fc84 	bl	80048fe <UART_WaitOnFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e005      	b.n	800400c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e000      	b.n	800400c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800400a:	2302      	movs	r3, #2
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	3720      	adds	r7, #32
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	; 0x28
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	4613      	mov	r3, r2
 8004022:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004028:	2b20      	cmp	r3, #32
 800402a:	f040 80bf 	bne.w	80041ac <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_UART_Receive+0x26>
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e0b7      	b.n	80041ae <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_UART_Receive+0x38>
 8004048:	2302      	movs	r3, #2
 800404a:	e0b0      	b.n	80041ae <HAL_UART_Receive+0x19a>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2222      	movs	r2, #34	; 0x22
 8004060:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004068:	f7fd fa0e 	bl	8001488 <HAL_GetTick>
 800406c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	88fa      	ldrh	r2, [r7, #6]
 8004072:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	88fa      	ldrh	r2, [r7, #6]
 800407a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	d10e      	bne.n	80040a6 <HAL_UART_Receive+0x92>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <HAL_UART_Receive+0x88>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004096:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800409a:	e02d      	b.n	80040f8 <HAL_UART_Receive+0xe4>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	22ff      	movs	r2, #255	; 0xff
 80040a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040a4:	e028      	b.n	80040f8 <HAL_UART_Receive+0xe4>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10d      	bne.n	80040ca <HAL_UART_Receive+0xb6>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d104      	bne.n	80040c0 <HAL_UART_Receive+0xac>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	22ff      	movs	r2, #255	; 0xff
 80040ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040be:	e01b      	b.n	80040f8 <HAL_UART_Receive+0xe4>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	227f      	movs	r2, #127	; 0x7f
 80040c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040c8:	e016      	b.n	80040f8 <HAL_UART_Receive+0xe4>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040d2:	d10d      	bne.n	80040f0 <HAL_UART_Receive+0xdc>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d104      	bne.n	80040e6 <HAL_UART_Receive+0xd2>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	227f      	movs	r2, #127	; 0x7f
 80040e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040e4:	e008      	b.n	80040f8 <HAL_UART_Receive+0xe4>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	223f      	movs	r2, #63	; 0x3f
 80040ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ee:	e003      	b.n	80040f8 <HAL_UART_Receive+0xe4>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040fe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004108:	d108      	bne.n	800411c <HAL_UART_Receive+0x108>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d104      	bne.n	800411c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	e003      	b.n	8004124 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800412c:	e033      	b.n	8004196 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2200      	movs	r2, #0
 8004136:	2120      	movs	r1, #32
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 fbe0 	bl	80048fe <UART_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e032      	b.n	80041ae <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10c      	bne.n	8004168 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004154:	b29a      	uxth	r2, r3
 8004156:	8a7b      	ldrh	r3, [r7, #18]
 8004158:	4013      	ands	r3, r2
 800415a:	b29a      	uxth	r2, r3
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	3302      	adds	r3, #2
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	e00d      	b.n	8004184 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800416e:	b29b      	uxth	r3, r3
 8004170:	b2da      	uxtb	r2, r3
 8004172:	8a7b      	ldrh	r3, [r7, #18]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	4013      	ands	r3, r2
 8004178:	b2da      	uxtb	r2, r3
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3301      	adds	r3, #1
 8004182:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1c5      	bne.n	800412e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e000      	b.n	80041ae <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80041ac:	2302      	movs	r3, #2
  }
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041bc:	b08a      	sub	sp, #40	; 0x28
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	4313      	orrs	r3, r2
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	4ba4      	ldr	r3, [pc, #656]	; (8004478 <UART_SetConfig+0x2c0>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a99      	ldr	r2, [pc, #612]	; (800447c <UART_SetConfig+0x2c4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004220:	4313      	orrs	r3, r2
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004234:	430a      	orrs	r2, r1
 8004236:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a90      	ldr	r2, [pc, #576]	; (8004480 <UART_SetConfig+0x2c8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d126      	bne.n	8004290 <UART_SetConfig+0xd8>
 8004242:	4b90      	ldr	r3, [pc, #576]	; (8004484 <UART_SetConfig+0x2cc>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	2b03      	cmp	r3, #3
 800424e:	d81b      	bhi.n	8004288 <UART_SetConfig+0xd0>
 8004250:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <UART_SetConfig+0xa0>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	08004269 	.word	0x08004269
 800425c:	08004279 	.word	0x08004279
 8004260:	08004271 	.word	0x08004271
 8004264:	08004281 	.word	0x08004281
 8004268:	2301      	movs	r3, #1
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426e:	e116      	b.n	800449e <UART_SetConfig+0x2e6>
 8004270:	2302      	movs	r3, #2
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004276:	e112      	b.n	800449e <UART_SetConfig+0x2e6>
 8004278:	2304      	movs	r3, #4
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427e:	e10e      	b.n	800449e <UART_SetConfig+0x2e6>
 8004280:	2308      	movs	r3, #8
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004286:	e10a      	b.n	800449e <UART_SetConfig+0x2e6>
 8004288:	2310      	movs	r3, #16
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e106      	b.n	800449e <UART_SetConfig+0x2e6>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a7c      	ldr	r2, [pc, #496]	; (8004488 <UART_SetConfig+0x2d0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d138      	bne.n	800430c <UART_SetConfig+0x154>
 800429a:	4b7a      	ldr	r3, [pc, #488]	; (8004484 <UART_SetConfig+0x2cc>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	2b0c      	cmp	r3, #12
 80042a6:	d82d      	bhi.n	8004304 <UART_SetConfig+0x14c>
 80042a8:	a201      	add	r2, pc, #4	; (adr r2, 80042b0 <UART_SetConfig+0xf8>)
 80042aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ae:	bf00      	nop
 80042b0:	080042e5 	.word	0x080042e5
 80042b4:	08004305 	.word	0x08004305
 80042b8:	08004305 	.word	0x08004305
 80042bc:	08004305 	.word	0x08004305
 80042c0:	080042f5 	.word	0x080042f5
 80042c4:	08004305 	.word	0x08004305
 80042c8:	08004305 	.word	0x08004305
 80042cc:	08004305 	.word	0x08004305
 80042d0:	080042ed 	.word	0x080042ed
 80042d4:	08004305 	.word	0x08004305
 80042d8:	08004305 	.word	0x08004305
 80042dc:	08004305 	.word	0x08004305
 80042e0:	080042fd 	.word	0x080042fd
 80042e4:	2300      	movs	r3, #0
 80042e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ea:	e0d8      	b.n	800449e <UART_SetConfig+0x2e6>
 80042ec:	2302      	movs	r3, #2
 80042ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f2:	e0d4      	b.n	800449e <UART_SetConfig+0x2e6>
 80042f4:	2304      	movs	r3, #4
 80042f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fa:	e0d0      	b.n	800449e <UART_SetConfig+0x2e6>
 80042fc:	2308      	movs	r3, #8
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004302:	e0cc      	b.n	800449e <UART_SetConfig+0x2e6>
 8004304:	2310      	movs	r3, #16
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430a:	e0c8      	b.n	800449e <UART_SetConfig+0x2e6>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a5e      	ldr	r2, [pc, #376]	; (800448c <UART_SetConfig+0x2d4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d125      	bne.n	8004362 <UART_SetConfig+0x1aa>
 8004316:	4b5b      	ldr	r3, [pc, #364]	; (8004484 <UART_SetConfig+0x2cc>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004320:	2b30      	cmp	r3, #48	; 0x30
 8004322:	d016      	beq.n	8004352 <UART_SetConfig+0x19a>
 8004324:	2b30      	cmp	r3, #48	; 0x30
 8004326:	d818      	bhi.n	800435a <UART_SetConfig+0x1a2>
 8004328:	2b20      	cmp	r3, #32
 800432a:	d00a      	beq.n	8004342 <UART_SetConfig+0x18a>
 800432c:	2b20      	cmp	r3, #32
 800432e:	d814      	bhi.n	800435a <UART_SetConfig+0x1a2>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <UART_SetConfig+0x182>
 8004334:	2b10      	cmp	r3, #16
 8004336:	d008      	beq.n	800434a <UART_SetConfig+0x192>
 8004338:	e00f      	b.n	800435a <UART_SetConfig+0x1a2>
 800433a:	2300      	movs	r3, #0
 800433c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004340:	e0ad      	b.n	800449e <UART_SetConfig+0x2e6>
 8004342:	2302      	movs	r3, #2
 8004344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004348:	e0a9      	b.n	800449e <UART_SetConfig+0x2e6>
 800434a:	2304      	movs	r3, #4
 800434c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004350:	e0a5      	b.n	800449e <UART_SetConfig+0x2e6>
 8004352:	2308      	movs	r3, #8
 8004354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004358:	e0a1      	b.n	800449e <UART_SetConfig+0x2e6>
 800435a:	2310      	movs	r3, #16
 800435c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004360:	e09d      	b.n	800449e <UART_SetConfig+0x2e6>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a4a      	ldr	r2, [pc, #296]	; (8004490 <UART_SetConfig+0x2d8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d125      	bne.n	80043b8 <UART_SetConfig+0x200>
 800436c:	4b45      	ldr	r3, [pc, #276]	; (8004484 <UART_SetConfig+0x2cc>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004372:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004376:	2bc0      	cmp	r3, #192	; 0xc0
 8004378:	d016      	beq.n	80043a8 <UART_SetConfig+0x1f0>
 800437a:	2bc0      	cmp	r3, #192	; 0xc0
 800437c:	d818      	bhi.n	80043b0 <UART_SetConfig+0x1f8>
 800437e:	2b80      	cmp	r3, #128	; 0x80
 8004380:	d00a      	beq.n	8004398 <UART_SetConfig+0x1e0>
 8004382:	2b80      	cmp	r3, #128	; 0x80
 8004384:	d814      	bhi.n	80043b0 <UART_SetConfig+0x1f8>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <UART_SetConfig+0x1d8>
 800438a:	2b40      	cmp	r3, #64	; 0x40
 800438c:	d008      	beq.n	80043a0 <UART_SetConfig+0x1e8>
 800438e:	e00f      	b.n	80043b0 <UART_SetConfig+0x1f8>
 8004390:	2300      	movs	r3, #0
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004396:	e082      	b.n	800449e <UART_SetConfig+0x2e6>
 8004398:	2302      	movs	r3, #2
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439e:	e07e      	b.n	800449e <UART_SetConfig+0x2e6>
 80043a0:	2304      	movs	r3, #4
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a6:	e07a      	b.n	800449e <UART_SetConfig+0x2e6>
 80043a8:	2308      	movs	r3, #8
 80043aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ae:	e076      	b.n	800449e <UART_SetConfig+0x2e6>
 80043b0:	2310      	movs	r3, #16
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b6:	e072      	b.n	800449e <UART_SetConfig+0x2e6>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a35      	ldr	r2, [pc, #212]	; (8004494 <UART_SetConfig+0x2dc>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d12a      	bne.n	8004418 <UART_SetConfig+0x260>
 80043c2:	4b30      	ldr	r3, [pc, #192]	; (8004484 <UART_SetConfig+0x2cc>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043d0:	d01a      	beq.n	8004408 <UART_SetConfig+0x250>
 80043d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043d6:	d81b      	bhi.n	8004410 <UART_SetConfig+0x258>
 80043d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043dc:	d00c      	beq.n	80043f8 <UART_SetConfig+0x240>
 80043de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e2:	d815      	bhi.n	8004410 <UART_SetConfig+0x258>
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <UART_SetConfig+0x238>
 80043e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ec:	d008      	beq.n	8004400 <UART_SetConfig+0x248>
 80043ee:	e00f      	b.n	8004410 <UART_SetConfig+0x258>
 80043f0:	2300      	movs	r3, #0
 80043f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f6:	e052      	b.n	800449e <UART_SetConfig+0x2e6>
 80043f8:	2302      	movs	r3, #2
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fe:	e04e      	b.n	800449e <UART_SetConfig+0x2e6>
 8004400:	2304      	movs	r3, #4
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004406:	e04a      	b.n	800449e <UART_SetConfig+0x2e6>
 8004408:	2308      	movs	r3, #8
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440e:	e046      	b.n	800449e <UART_SetConfig+0x2e6>
 8004410:	2310      	movs	r3, #16
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004416:	e042      	b.n	800449e <UART_SetConfig+0x2e6>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a17      	ldr	r2, [pc, #92]	; (800447c <UART_SetConfig+0x2c4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d13a      	bne.n	8004498 <UART_SetConfig+0x2e0>
 8004422:	4b18      	ldr	r3, [pc, #96]	; (8004484 <UART_SetConfig+0x2cc>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800442c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004430:	d01a      	beq.n	8004468 <UART_SetConfig+0x2b0>
 8004432:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004436:	d81b      	bhi.n	8004470 <UART_SetConfig+0x2b8>
 8004438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800443c:	d00c      	beq.n	8004458 <UART_SetConfig+0x2a0>
 800443e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004442:	d815      	bhi.n	8004470 <UART_SetConfig+0x2b8>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <UART_SetConfig+0x298>
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444c:	d008      	beq.n	8004460 <UART_SetConfig+0x2a8>
 800444e:	e00f      	b.n	8004470 <UART_SetConfig+0x2b8>
 8004450:	2300      	movs	r3, #0
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004456:	e022      	b.n	800449e <UART_SetConfig+0x2e6>
 8004458:	2302      	movs	r3, #2
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445e:	e01e      	b.n	800449e <UART_SetConfig+0x2e6>
 8004460:	2304      	movs	r3, #4
 8004462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004466:	e01a      	b.n	800449e <UART_SetConfig+0x2e6>
 8004468:	2308      	movs	r3, #8
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446e:	e016      	b.n	800449e <UART_SetConfig+0x2e6>
 8004470:	2310      	movs	r3, #16
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004476:	e012      	b.n	800449e <UART_SetConfig+0x2e6>
 8004478:	efff69f3 	.word	0xefff69f3
 800447c:	40008000 	.word	0x40008000
 8004480:	40013800 	.word	0x40013800
 8004484:	40021000 	.word	0x40021000
 8004488:	40004400 	.word	0x40004400
 800448c:	40004800 	.word	0x40004800
 8004490:	40004c00 	.word	0x40004c00
 8004494:	40005000 	.word	0x40005000
 8004498:	2310      	movs	r3, #16
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a9f      	ldr	r2, [pc, #636]	; (8004720 <UART_SetConfig+0x568>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d17a      	bne.n	800459e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d824      	bhi.n	80044fa <UART_SetConfig+0x342>
 80044b0:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <UART_SetConfig+0x300>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	080044dd 	.word	0x080044dd
 80044bc:	080044fb 	.word	0x080044fb
 80044c0:	080044e5 	.word	0x080044e5
 80044c4:	080044fb 	.word	0x080044fb
 80044c8:	080044eb 	.word	0x080044eb
 80044cc:	080044fb 	.word	0x080044fb
 80044d0:	080044fb 	.word	0x080044fb
 80044d4:	080044fb 	.word	0x080044fb
 80044d8:	080044f3 	.word	0x080044f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044dc:	f7fe f860 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 80044e0:	61f8      	str	r0, [r7, #28]
        break;
 80044e2:	e010      	b.n	8004506 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e4:	4b8f      	ldr	r3, [pc, #572]	; (8004724 <UART_SetConfig+0x56c>)
 80044e6:	61fb      	str	r3, [r7, #28]
        break;
 80044e8:	e00d      	b.n	8004506 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ea:	f7fd ffc1 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 80044ee:	61f8      	str	r0, [r7, #28]
        break;
 80044f0:	e009      	b.n	8004506 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f6:	61fb      	str	r3, [r7, #28]
        break;
 80044f8:	e005      	b.n	8004506 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004504:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80fb 	beq.w	8004704 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	4413      	add	r3, r2
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	429a      	cmp	r2, r3
 800451c:	d305      	bcc.n	800452a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	429a      	cmp	r2, r3
 8004528:	d903      	bls.n	8004532 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004530:	e0e8      	b.n	8004704 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	2200      	movs	r2, #0
 8004536:	461c      	mov	r4, r3
 8004538:	4615      	mov	r5, r2
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	022b      	lsls	r3, r5, #8
 8004544:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004548:	0222      	lsls	r2, r4, #8
 800454a:	68f9      	ldr	r1, [r7, #12]
 800454c:	6849      	ldr	r1, [r1, #4]
 800454e:	0849      	lsrs	r1, r1, #1
 8004550:	2000      	movs	r0, #0
 8004552:	4688      	mov	r8, r1
 8004554:	4681      	mov	r9, r0
 8004556:	eb12 0a08 	adds.w	sl, r2, r8
 800455a:	eb43 0b09 	adc.w	fp, r3, r9
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800456c:	4650      	mov	r0, sl
 800456e:	4659      	mov	r1, fp
 8004570:	f7fb fe8e 	bl	8000290 <__aeabi_uldivmod>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4613      	mov	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004582:	d308      	bcc.n	8004596 <UART_SetConfig+0x3de>
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458a:	d204      	bcs.n	8004596 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	60da      	str	r2, [r3, #12]
 8004594:	e0b6      	b.n	8004704 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800459c:	e0b2      	b.n	8004704 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a6:	d15e      	bne.n	8004666 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80045a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d828      	bhi.n	8004602 <UART_SetConfig+0x44a>
 80045b0:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <UART_SetConfig+0x400>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045dd 	.word	0x080045dd
 80045bc:	080045e5 	.word	0x080045e5
 80045c0:	080045ed 	.word	0x080045ed
 80045c4:	08004603 	.word	0x08004603
 80045c8:	080045f3 	.word	0x080045f3
 80045cc:	08004603 	.word	0x08004603
 80045d0:	08004603 	.word	0x08004603
 80045d4:	08004603 	.word	0x08004603
 80045d8:	080045fb 	.word	0x080045fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045dc:	f7fd ffe0 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 80045e0:	61f8      	str	r0, [r7, #28]
        break;
 80045e2:	e014      	b.n	800460e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e4:	f7fd fff2 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 80045e8:	61f8      	str	r0, [r7, #28]
        break;
 80045ea:	e010      	b.n	800460e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045ec:	4b4d      	ldr	r3, [pc, #308]	; (8004724 <UART_SetConfig+0x56c>)
 80045ee:	61fb      	str	r3, [r7, #28]
        break;
 80045f0:	e00d      	b.n	800460e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045f2:	f7fd ff3d 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 80045f6:	61f8      	str	r0, [r7, #28]
        break;
 80045f8:	e009      	b.n	800460e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045fe:	61fb      	str	r3, [r7, #28]
        break;
 8004600:	e005      	b.n	800460e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800460c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d077      	beq.n	8004704 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	005a      	lsls	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	085b      	lsrs	r3, r3, #1
 800461e:	441a      	add	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b0f      	cmp	r3, #15
 800462e:	d916      	bls.n	800465e <UART_SetConfig+0x4a6>
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004636:	d212      	bcs.n	800465e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f023 030f 	bic.w	r3, r3, #15
 8004640:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	085b      	lsrs	r3, r3, #1
 8004646:	b29b      	uxth	r3, r3
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	b29a      	uxth	r2, r3
 800464e:	8afb      	ldrh	r3, [r7, #22]
 8004650:	4313      	orrs	r3, r2
 8004652:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	8afa      	ldrh	r2, [r7, #22]
 800465a:	60da      	str	r2, [r3, #12]
 800465c:	e052      	b.n	8004704 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004664:	e04e      	b.n	8004704 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004666:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800466a:	2b08      	cmp	r3, #8
 800466c:	d827      	bhi.n	80046be <UART_SetConfig+0x506>
 800466e:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <UART_SetConfig+0x4bc>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	08004699 	.word	0x08004699
 8004678:	080046a1 	.word	0x080046a1
 800467c:	080046a9 	.word	0x080046a9
 8004680:	080046bf 	.word	0x080046bf
 8004684:	080046af 	.word	0x080046af
 8004688:	080046bf 	.word	0x080046bf
 800468c:	080046bf 	.word	0x080046bf
 8004690:	080046bf 	.word	0x080046bf
 8004694:	080046b7 	.word	0x080046b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004698:	f7fd ff82 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 800469c:	61f8      	str	r0, [r7, #28]
        break;
 800469e:	e014      	b.n	80046ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046a0:	f7fd ff94 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 80046a4:	61f8      	str	r0, [r7, #28]
        break;
 80046a6:	e010      	b.n	80046ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a8:	4b1e      	ldr	r3, [pc, #120]	; (8004724 <UART_SetConfig+0x56c>)
 80046aa:	61fb      	str	r3, [r7, #28]
        break;
 80046ac:	e00d      	b.n	80046ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ae:	f7fd fedf 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 80046b2:	61f8      	str	r0, [r7, #28]
        break;
 80046b4:	e009      	b.n	80046ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ba:	61fb      	str	r3, [r7, #28]
        break;
 80046bc:	e005      	b.n	80046ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046c8:	bf00      	nop
    }

    if (pclk != 0U)
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d019      	beq.n	8004704 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	085a      	lsrs	r2, r3, #1
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	441a      	add	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b0f      	cmp	r3, #15
 80046e8:	d909      	bls.n	80046fe <UART_SetConfig+0x546>
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f0:	d205      	bcs.n	80046fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60da      	str	r2, [r3, #12]
 80046fc:	e002      	b.n	8004704 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004710:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004714:	4618      	mov	r0, r3
 8004716:	3728      	adds	r7, #40	; 0x28
 8004718:	46bd      	mov	sp, r7
 800471a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800471e:	bf00      	nop
 8004720:	40008000 	.word	0x40008000
 8004724:	00f42400 	.word	0x00f42400

08004728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01a      	beq.n	800483e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004826:	d10a      	bne.n	800483e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	605a      	str	r2, [r3, #4]
  }
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af02      	add	r7, sp, #8
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800487c:	f7fc fe04 	bl	8001488 <HAL_GetTick>
 8004880:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b08      	cmp	r3, #8
 800488e:	d10e      	bne.n	80048ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f82d 	bl	80048fe <UART_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e023      	b.n	80048f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d10e      	bne.n	80048da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f817 	bl	80048fe <UART_WaitOnFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e00d      	b.n	80048f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b09c      	sub	sp, #112	; 0x70
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	603b      	str	r3, [r7, #0]
 800490a:	4613      	mov	r3, r2
 800490c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800490e:	e0a5      	b.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	f000 80a1 	beq.w	8004a5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491a:	f7fc fdb5 	bl	8001488 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004926:	429a      	cmp	r2, r3
 8004928:	d302      	bcc.n	8004930 <UART_WaitOnFlagUntilTimeout+0x32>
 800492a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800492c:	2b00      	cmp	r3, #0
 800492e:	d13e      	bne.n	80049ae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800493e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004940:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004944:	667b      	str	r3, [r7, #100]	; 0x64
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800494e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004950:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004954:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800495c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e6      	bne.n	8004930 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3308      	adds	r3, #8
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	663b      	str	r3, [r7, #96]	; 0x60
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3308      	adds	r3, #8
 8004980:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004982:	64ba      	str	r2, [r7, #72]	; 0x48
 8004984:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e5      	bne.n	8004962 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e067      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d04f      	beq.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ca:	d147      	bne.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f4:	637b      	str	r3, [r7, #52]	; 0x34
 80049f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e6      	bne.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	613b      	str	r3, [r7, #16]
   return(result);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f023 0301 	bic.w	r3, r3, #1
 8004a1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3308      	adds	r3, #8
 8004a26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a28:	623a      	str	r2, [r7, #32]
 8004a2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	69f9      	ldr	r1, [r7, #28]
 8004a2e:	6a3a      	ldr	r2, [r7, #32]
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e5      	bne.n	8004a08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e010      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69da      	ldr	r2, [r3, #28]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4013      	ands	r3, r2
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2301      	moveq	r3, #1
 8004a6e:	2300      	movne	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	461a      	mov	r2, r3
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	f43f af4a 	beq.w	8004910 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3770      	adds	r7, #112	; 0x70
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <__errno>:
 8004a88:	4b01      	ldr	r3, [pc, #4]	; (8004a90 <__errno+0x8>)
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	20000048 	.word	0x20000048

08004a94 <__libc_init_array>:
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	4d0d      	ldr	r5, [pc, #52]	; (8004acc <__libc_init_array+0x38>)
 8004a98:	4c0d      	ldr	r4, [pc, #52]	; (8004ad0 <__libc_init_array+0x3c>)
 8004a9a:	1b64      	subs	r4, r4, r5
 8004a9c:	10a4      	asrs	r4, r4, #2
 8004a9e:	2600      	movs	r6, #0
 8004aa0:	42a6      	cmp	r6, r4
 8004aa2:	d109      	bne.n	8004ab8 <__libc_init_array+0x24>
 8004aa4:	4d0b      	ldr	r5, [pc, #44]	; (8004ad4 <__libc_init_array+0x40>)
 8004aa6:	4c0c      	ldr	r4, [pc, #48]	; (8004ad8 <__libc_init_array+0x44>)
 8004aa8:	f001 fec4 	bl	8006834 <_init>
 8004aac:	1b64      	subs	r4, r4, r5
 8004aae:	10a4      	asrs	r4, r4, #2
 8004ab0:	2600      	movs	r6, #0
 8004ab2:	42a6      	cmp	r6, r4
 8004ab4:	d105      	bne.n	8004ac2 <__libc_init_array+0x2e>
 8004ab6:	bd70      	pop	{r4, r5, r6, pc}
 8004ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004abc:	4798      	blx	r3
 8004abe:	3601      	adds	r6, #1
 8004ac0:	e7ee      	b.n	8004aa0 <__libc_init_array+0xc>
 8004ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac6:	4798      	blx	r3
 8004ac8:	3601      	adds	r6, #1
 8004aca:	e7f2      	b.n	8004ab2 <__libc_init_array+0x1e>
 8004acc:	080071ac 	.word	0x080071ac
 8004ad0:	080071ac 	.word	0x080071ac
 8004ad4:	080071ac 	.word	0x080071ac
 8004ad8:	080071b0 	.word	0x080071b0

08004adc <memcpy>:
 8004adc:	440a      	add	r2, r1
 8004ade:	4291      	cmp	r1, r2
 8004ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ae4:	d100      	bne.n	8004ae8 <memcpy+0xc>
 8004ae6:	4770      	bx	lr
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004af2:	4291      	cmp	r1, r2
 8004af4:	d1f9      	bne.n	8004aea <memcpy+0xe>
 8004af6:	bd10      	pop	{r4, pc}

08004af8 <memset>:
 8004af8:	4402      	add	r2, r0
 8004afa:	4603      	mov	r3, r0
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d100      	bne.n	8004b02 <memset+0xa>
 8004b00:	4770      	bx	lr
 8004b02:	f803 1b01 	strb.w	r1, [r3], #1
 8004b06:	e7f9      	b.n	8004afc <memset+0x4>

08004b08 <iprintf>:
 8004b08:	b40f      	push	{r0, r1, r2, r3}
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <iprintf+0x2c>)
 8004b0c:	b513      	push	{r0, r1, r4, lr}
 8004b0e:	681c      	ldr	r4, [r3, #0]
 8004b10:	b124      	cbz	r4, 8004b1c <iprintf+0x14>
 8004b12:	69a3      	ldr	r3, [r4, #24]
 8004b14:	b913      	cbnz	r3, 8004b1c <iprintf+0x14>
 8004b16:	4620      	mov	r0, r4
 8004b18:	f000 fa9e 	bl	8005058 <__sinit>
 8004b1c:	ab05      	add	r3, sp, #20
 8004b1e:	9a04      	ldr	r2, [sp, #16]
 8004b20:	68a1      	ldr	r1, [r4, #8]
 8004b22:	9301      	str	r3, [sp, #4]
 8004b24:	4620      	mov	r0, r4
 8004b26:	f000 fcc3 	bl	80054b0 <_vfiprintf_r>
 8004b2a:	b002      	add	sp, #8
 8004b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b30:	b004      	add	sp, #16
 8004b32:	4770      	bx	lr
 8004b34:	20000048 	.word	0x20000048

08004b38 <putchar>:
 8004b38:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <putchar+0x28>)
 8004b3a:	b513      	push	{r0, r1, r4, lr}
 8004b3c:	681c      	ldr	r4, [r3, #0]
 8004b3e:	4601      	mov	r1, r0
 8004b40:	b134      	cbz	r4, 8004b50 <putchar+0x18>
 8004b42:	69a3      	ldr	r3, [r4, #24]
 8004b44:	b923      	cbnz	r3, 8004b50 <putchar+0x18>
 8004b46:	9001      	str	r0, [sp, #4]
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f000 fa85 	bl	8005058 <__sinit>
 8004b4e:	9901      	ldr	r1, [sp, #4]
 8004b50:	68a2      	ldr	r2, [r4, #8]
 8004b52:	4620      	mov	r0, r4
 8004b54:	b002      	add	sp, #8
 8004b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b5a:	f001 ba8d 	b.w	8006078 <_putc_r>
 8004b5e:	bf00      	nop
 8004b60:	20000048 	.word	0x20000048

08004b64 <_puts_r>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	460e      	mov	r6, r1
 8004b68:	4605      	mov	r5, r0
 8004b6a:	b118      	cbz	r0, 8004b74 <_puts_r+0x10>
 8004b6c:	6983      	ldr	r3, [r0, #24]
 8004b6e:	b90b      	cbnz	r3, 8004b74 <_puts_r+0x10>
 8004b70:	f000 fa72 	bl	8005058 <__sinit>
 8004b74:	69ab      	ldr	r3, [r5, #24]
 8004b76:	68ac      	ldr	r4, [r5, #8]
 8004b78:	b913      	cbnz	r3, 8004b80 <_puts_r+0x1c>
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f000 fa6c 	bl	8005058 <__sinit>
 8004b80:	4b2c      	ldr	r3, [pc, #176]	; (8004c34 <_puts_r+0xd0>)
 8004b82:	429c      	cmp	r4, r3
 8004b84:	d120      	bne.n	8004bc8 <_puts_r+0x64>
 8004b86:	686c      	ldr	r4, [r5, #4]
 8004b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b8a:	07db      	lsls	r3, r3, #31
 8004b8c:	d405      	bmi.n	8004b9a <_puts_r+0x36>
 8004b8e:	89a3      	ldrh	r3, [r4, #12]
 8004b90:	0598      	lsls	r0, r3, #22
 8004b92:	d402      	bmi.n	8004b9a <_puts_r+0x36>
 8004b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b96:	f000 fb1a 	bl	80051ce <__retarget_lock_acquire_recursive>
 8004b9a:	89a3      	ldrh	r3, [r4, #12]
 8004b9c:	0719      	lsls	r1, r3, #28
 8004b9e:	d51d      	bpl.n	8004bdc <_puts_r+0x78>
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	b1db      	cbz	r3, 8004bdc <_puts_r+0x78>
 8004ba4:	3e01      	subs	r6, #1
 8004ba6:	68a3      	ldr	r3, [r4, #8]
 8004ba8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004bac:	3b01      	subs	r3, #1
 8004bae:	60a3      	str	r3, [r4, #8]
 8004bb0:	bb39      	cbnz	r1, 8004c02 <_puts_r+0x9e>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	da38      	bge.n	8004c28 <_puts_r+0xc4>
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	210a      	movs	r1, #10
 8004bba:	4628      	mov	r0, r5
 8004bbc:	f000 f860 	bl	8004c80 <__swbuf_r>
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d011      	beq.n	8004be8 <_puts_r+0x84>
 8004bc4:	250a      	movs	r5, #10
 8004bc6:	e011      	b.n	8004bec <_puts_r+0x88>
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <_puts_r+0xd4>)
 8004bca:	429c      	cmp	r4, r3
 8004bcc:	d101      	bne.n	8004bd2 <_puts_r+0x6e>
 8004bce:	68ac      	ldr	r4, [r5, #8]
 8004bd0:	e7da      	b.n	8004b88 <_puts_r+0x24>
 8004bd2:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <_puts_r+0xd8>)
 8004bd4:	429c      	cmp	r4, r3
 8004bd6:	bf08      	it	eq
 8004bd8:	68ec      	ldreq	r4, [r5, #12]
 8004bda:	e7d5      	b.n	8004b88 <_puts_r+0x24>
 8004bdc:	4621      	mov	r1, r4
 8004bde:	4628      	mov	r0, r5
 8004be0:	f000 f8a0 	bl	8004d24 <__swsetup_r>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d0dd      	beq.n	8004ba4 <_puts_r+0x40>
 8004be8:	f04f 35ff 	mov.w	r5, #4294967295
 8004bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bee:	07da      	lsls	r2, r3, #31
 8004bf0:	d405      	bmi.n	8004bfe <_puts_r+0x9a>
 8004bf2:	89a3      	ldrh	r3, [r4, #12]
 8004bf4:	059b      	lsls	r3, r3, #22
 8004bf6:	d402      	bmi.n	8004bfe <_puts_r+0x9a>
 8004bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bfa:	f000 fae9 	bl	80051d0 <__retarget_lock_release_recursive>
 8004bfe:	4628      	mov	r0, r5
 8004c00:	bd70      	pop	{r4, r5, r6, pc}
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da04      	bge.n	8004c10 <_puts_r+0xac>
 8004c06:	69a2      	ldr	r2, [r4, #24]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	dc06      	bgt.n	8004c1a <_puts_r+0xb6>
 8004c0c:	290a      	cmp	r1, #10
 8004c0e:	d004      	beq.n	8004c1a <_puts_r+0xb6>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	6022      	str	r2, [r4, #0]
 8004c16:	7019      	strb	r1, [r3, #0]
 8004c18:	e7c5      	b.n	8004ba6 <_puts_r+0x42>
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f000 f82f 	bl	8004c80 <__swbuf_r>
 8004c22:	3001      	adds	r0, #1
 8004c24:	d1bf      	bne.n	8004ba6 <_puts_r+0x42>
 8004c26:	e7df      	b.n	8004be8 <_puts_r+0x84>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	250a      	movs	r5, #10
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	6022      	str	r2, [r4, #0]
 8004c30:	701d      	strb	r5, [r3, #0]
 8004c32:	e7db      	b.n	8004bec <_puts_r+0x88>
 8004c34:	08007014 	.word	0x08007014
 8004c38:	08007034 	.word	0x08007034
 8004c3c:	08006ff4 	.word	0x08006ff4

08004c40 <puts>:
 8004c40:	4b02      	ldr	r3, [pc, #8]	; (8004c4c <puts+0xc>)
 8004c42:	4601      	mov	r1, r0
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	f7ff bf8d 	b.w	8004b64 <_puts_r>
 8004c4a:	bf00      	nop
 8004c4c:	20000048 	.word	0x20000048

08004c50 <iscanf>:
 8004c50:	b40f      	push	{r0, r1, r2, r3}
 8004c52:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <iscanf+0x2c>)
 8004c54:	b513      	push	{r0, r1, r4, lr}
 8004c56:	681c      	ldr	r4, [r3, #0]
 8004c58:	b124      	cbz	r4, 8004c64 <iscanf+0x14>
 8004c5a:	69a3      	ldr	r3, [r4, #24]
 8004c5c:	b913      	cbnz	r3, 8004c64 <iscanf+0x14>
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f000 f9fa 	bl	8005058 <__sinit>
 8004c64:	ab05      	add	r3, sp, #20
 8004c66:	9a04      	ldr	r2, [sp, #16]
 8004c68:	6861      	ldr	r1, [r4, #4]
 8004c6a:	9301      	str	r3, [sp, #4]
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f001 f889 	bl	8005d84 <_vfiscanf_r>
 8004c72:	b002      	add	sp, #8
 8004c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c78:	b004      	add	sp, #16
 8004c7a:	4770      	bx	lr
 8004c7c:	20000048 	.word	0x20000048

08004c80 <__swbuf_r>:
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	460e      	mov	r6, r1
 8004c84:	4614      	mov	r4, r2
 8004c86:	4605      	mov	r5, r0
 8004c88:	b118      	cbz	r0, 8004c92 <__swbuf_r+0x12>
 8004c8a:	6983      	ldr	r3, [r0, #24]
 8004c8c:	b90b      	cbnz	r3, 8004c92 <__swbuf_r+0x12>
 8004c8e:	f000 f9e3 	bl	8005058 <__sinit>
 8004c92:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <__swbuf_r+0x98>)
 8004c94:	429c      	cmp	r4, r3
 8004c96:	d12b      	bne.n	8004cf0 <__swbuf_r+0x70>
 8004c98:	686c      	ldr	r4, [r5, #4]
 8004c9a:	69a3      	ldr	r3, [r4, #24]
 8004c9c:	60a3      	str	r3, [r4, #8]
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	071a      	lsls	r2, r3, #28
 8004ca2:	d52f      	bpl.n	8004d04 <__swbuf_r+0x84>
 8004ca4:	6923      	ldr	r3, [r4, #16]
 8004ca6:	b36b      	cbz	r3, 8004d04 <__swbuf_r+0x84>
 8004ca8:	6923      	ldr	r3, [r4, #16]
 8004caa:	6820      	ldr	r0, [r4, #0]
 8004cac:	1ac0      	subs	r0, r0, r3
 8004cae:	6963      	ldr	r3, [r4, #20]
 8004cb0:	b2f6      	uxtb	r6, r6
 8004cb2:	4283      	cmp	r3, r0
 8004cb4:	4637      	mov	r7, r6
 8004cb6:	dc04      	bgt.n	8004cc2 <__swbuf_r+0x42>
 8004cb8:	4621      	mov	r1, r4
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f000 f926 	bl	8004f0c <_fflush_r>
 8004cc0:	bb30      	cbnz	r0, 8004d10 <__swbuf_r+0x90>
 8004cc2:	68a3      	ldr	r3, [r4, #8]
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	60a3      	str	r3, [r4, #8]
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	6022      	str	r2, [r4, #0]
 8004cce:	701e      	strb	r6, [r3, #0]
 8004cd0:	6963      	ldr	r3, [r4, #20]
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	4283      	cmp	r3, r0
 8004cd6:	d004      	beq.n	8004ce2 <__swbuf_r+0x62>
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	07db      	lsls	r3, r3, #31
 8004cdc:	d506      	bpl.n	8004cec <__swbuf_r+0x6c>
 8004cde:	2e0a      	cmp	r6, #10
 8004ce0:	d104      	bne.n	8004cec <__swbuf_r+0x6c>
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f000 f911 	bl	8004f0c <_fflush_r>
 8004cea:	b988      	cbnz	r0, 8004d10 <__swbuf_r+0x90>
 8004cec:	4638      	mov	r0, r7
 8004cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <__swbuf_r+0x9c>)
 8004cf2:	429c      	cmp	r4, r3
 8004cf4:	d101      	bne.n	8004cfa <__swbuf_r+0x7a>
 8004cf6:	68ac      	ldr	r4, [r5, #8]
 8004cf8:	e7cf      	b.n	8004c9a <__swbuf_r+0x1a>
 8004cfa:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <__swbuf_r+0xa0>)
 8004cfc:	429c      	cmp	r4, r3
 8004cfe:	bf08      	it	eq
 8004d00:	68ec      	ldreq	r4, [r5, #12]
 8004d02:	e7ca      	b.n	8004c9a <__swbuf_r+0x1a>
 8004d04:	4621      	mov	r1, r4
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 f80c 	bl	8004d24 <__swsetup_r>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	d0cb      	beq.n	8004ca8 <__swbuf_r+0x28>
 8004d10:	f04f 37ff 	mov.w	r7, #4294967295
 8004d14:	e7ea      	b.n	8004cec <__swbuf_r+0x6c>
 8004d16:	bf00      	nop
 8004d18:	08007014 	.word	0x08007014
 8004d1c:	08007034 	.word	0x08007034
 8004d20:	08006ff4 	.word	0x08006ff4

08004d24 <__swsetup_r>:
 8004d24:	4b32      	ldr	r3, [pc, #200]	; (8004df0 <__swsetup_r+0xcc>)
 8004d26:	b570      	push	{r4, r5, r6, lr}
 8004d28:	681d      	ldr	r5, [r3, #0]
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	b125      	cbz	r5, 8004d3a <__swsetup_r+0x16>
 8004d30:	69ab      	ldr	r3, [r5, #24]
 8004d32:	b913      	cbnz	r3, 8004d3a <__swsetup_r+0x16>
 8004d34:	4628      	mov	r0, r5
 8004d36:	f000 f98f 	bl	8005058 <__sinit>
 8004d3a:	4b2e      	ldr	r3, [pc, #184]	; (8004df4 <__swsetup_r+0xd0>)
 8004d3c:	429c      	cmp	r4, r3
 8004d3e:	d10f      	bne.n	8004d60 <__swsetup_r+0x3c>
 8004d40:	686c      	ldr	r4, [r5, #4]
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d48:	0719      	lsls	r1, r3, #28
 8004d4a:	d42c      	bmi.n	8004da6 <__swsetup_r+0x82>
 8004d4c:	06dd      	lsls	r5, r3, #27
 8004d4e:	d411      	bmi.n	8004d74 <__swsetup_r+0x50>
 8004d50:	2309      	movs	r3, #9
 8004d52:	6033      	str	r3, [r6, #0]
 8004d54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d58:	81a3      	strh	r3, [r4, #12]
 8004d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5e:	e03e      	b.n	8004dde <__swsetup_r+0xba>
 8004d60:	4b25      	ldr	r3, [pc, #148]	; (8004df8 <__swsetup_r+0xd4>)
 8004d62:	429c      	cmp	r4, r3
 8004d64:	d101      	bne.n	8004d6a <__swsetup_r+0x46>
 8004d66:	68ac      	ldr	r4, [r5, #8]
 8004d68:	e7eb      	b.n	8004d42 <__swsetup_r+0x1e>
 8004d6a:	4b24      	ldr	r3, [pc, #144]	; (8004dfc <__swsetup_r+0xd8>)
 8004d6c:	429c      	cmp	r4, r3
 8004d6e:	bf08      	it	eq
 8004d70:	68ec      	ldreq	r4, [r5, #12]
 8004d72:	e7e6      	b.n	8004d42 <__swsetup_r+0x1e>
 8004d74:	0758      	lsls	r0, r3, #29
 8004d76:	d512      	bpl.n	8004d9e <__swsetup_r+0x7a>
 8004d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d7a:	b141      	cbz	r1, 8004d8e <__swsetup_r+0x6a>
 8004d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d80:	4299      	cmp	r1, r3
 8004d82:	d002      	beq.n	8004d8a <__swsetup_r+0x66>
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 fa89 	bl	800529c <_free_r>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6363      	str	r3, [r4, #52]	; 0x34
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	2300      	movs	r3, #0
 8004d98:	6063      	str	r3, [r4, #4]
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	f043 0308 	orr.w	r3, r3, #8
 8004da4:	81a3      	strh	r3, [r4, #12]
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	b94b      	cbnz	r3, 8004dbe <__swsetup_r+0x9a>
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db4:	d003      	beq.n	8004dbe <__swsetup_r+0x9a>
 8004db6:	4621      	mov	r1, r4
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 fa2f 	bl	800521c <__smakebuf_r>
 8004dbe:	89a0      	ldrh	r0, [r4, #12]
 8004dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dc4:	f010 0301 	ands.w	r3, r0, #1
 8004dc8:	d00a      	beq.n	8004de0 <__swsetup_r+0xbc>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60a3      	str	r3, [r4, #8]
 8004dce:	6963      	ldr	r3, [r4, #20]
 8004dd0:	425b      	negs	r3, r3
 8004dd2:	61a3      	str	r3, [r4, #24]
 8004dd4:	6923      	ldr	r3, [r4, #16]
 8004dd6:	b943      	cbnz	r3, 8004dea <__swsetup_r+0xc6>
 8004dd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ddc:	d1ba      	bne.n	8004d54 <__swsetup_r+0x30>
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	0781      	lsls	r1, r0, #30
 8004de2:	bf58      	it	pl
 8004de4:	6963      	ldrpl	r3, [r4, #20]
 8004de6:	60a3      	str	r3, [r4, #8]
 8004de8:	e7f4      	b.n	8004dd4 <__swsetup_r+0xb0>
 8004dea:	2000      	movs	r0, #0
 8004dec:	e7f7      	b.n	8004dde <__swsetup_r+0xba>
 8004dee:	bf00      	nop
 8004df0:	20000048 	.word	0x20000048
 8004df4:	08007014 	.word	0x08007014
 8004df8:	08007034 	.word	0x08007034
 8004dfc:	08006ff4 	.word	0x08006ff4

08004e00 <__sflush_r>:
 8004e00:	898a      	ldrh	r2, [r1, #12]
 8004e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e06:	4605      	mov	r5, r0
 8004e08:	0710      	lsls	r0, r2, #28
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	d458      	bmi.n	8004ec0 <__sflush_r+0xc0>
 8004e0e:	684b      	ldr	r3, [r1, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	dc05      	bgt.n	8004e20 <__sflush_r+0x20>
 8004e14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	dc02      	bgt.n	8004e20 <__sflush_r+0x20>
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e22:	2e00      	cmp	r6, #0
 8004e24:	d0f9      	beq.n	8004e1a <__sflush_r+0x1a>
 8004e26:	2300      	movs	r3, #0
 8004e28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e2c:	682f      	ldr	r7, [r5, #0]
 8004e2e:	602b      	str	r3, [r5, #0]
 8004e30:	d032      	beq.n	8004e98 <__sflush_r+0x98>
 8004e32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	075a      	lsls	r2, r3, #29
 8004e38:	d505      	bpl.n	8004e46 <__sflush_r+0x46>
 8004e3a:	6863      	ldr	r3, [r4, #4]
 8004e3c:	1ac0      	subs	r0, r0, r3
 8004e3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e40:	b10b      	cbz	r3, 8004e46 <__sflush_r+0x46>
 8004e42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e44:	1ac0      	subs	r0, r0, r3
 8004e46:	2300      	movs	r3, #0
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e4c:	6a21      	ldr	r1, [r4, #32]
 8004e4e:	4628      	mov	r0, r5
 8004e50:	47b0      	blx	r6
 8004e52:	1c43      	adds	r3, r0, #1
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	d106      	bne.n	8004e66 <__sflush_r+0x66>
 8004e58:	6829      	ldr	r1, [r5, #0]
 8004e5a:	291d      	cmp	r1, #29
 8004e5c:	d82c      	bhi.n	8004eb8 <__sflush_r+0xb8>
 8004e5e:	4a2a      	ldr	r2, [pc, #168]	; (8004f08 <__sflush_r+0x108>)
 8004e60:	40ca      	lsrs	r2, r1
 8004e62:	07d6      	lsls	r6, r2, #31
 8004e64:	d528      	bpl.n	8004eb8 <__sflush_r+0xb8>
 8004e66:	2200      	movs	r2, #0
 8004e68:	6062      	str	r2, [r4, #4]
 8004e6a:	04d9      	lsls	r1, r3, #19
 8004e6c:	6922      	ldr	r2, [r4, #16]
 8004e6e:	6022      	str	r2, [r4, #0]
 8004e70:	d504      	bpl.n	8004e7c <__sflush_r+0x7c>
 8004e72:	1c42      	adds	r2, r0, #1
 8004e74:	d101      	bne.n	8004e7a <__sflush_r+0x7a>
 8004e76:	682b      	ldr	r3, [r5, #0]
 8004e78:	b903      	cbnz	r3, 8004e7c <__sflush_r+0x7c>
 8004e7a:	6560      	str	r0, [r4, #84]	; 0x54
 8004e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e7e:	602f      	str	r7, [r5, #0]
 8004e80:	2900      	cmp	r1, #0
 8004e82:	d0ca      	beq.n	8004e1a <__sflush_r+0x1a>
 8004e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e88:	4299      	cmp	r1, r3
 8004e8a:	d002      	beq.n	8004e92 <__sflush_r+0x92>
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f000 fa05 	bl	800529c <_free_r>
 8004e92:	2000      	movs	r0, #0
 8004e94:	6360      	str	r0, [r4, #52]	; 0x34
 8004e96:	e7c1      	b.n	8004e1c <__sflush_r+0x1c>
 8004e98:	6a21      	ldr	r1, [r4, #32]
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	47b0      	blx	r6
 8004ea0:	1c41      	adds	r1, r0, #1
 8004ea2:	d1c7      	bne.n	8004e34 <__sflush_r+0x34>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0c4      	beq.n	8004e34 <__sflush_r+0x34>
 8004eaa:	2b1d      	cmp	r3, #29
 8004eac:	d001      	beq.n	8004eb2 <__sflush_r+0xb2>
 8004eae:	2b16      	cmp	r3, #22
 8004eb0:	d101      	bne.n	8004eb6 <__sflush_r+0xb6>
 8004eb2:	602f      	str	r7, [r5, #0]
 8004eb4:	e7b1      	b.n	8004e1a <__sflush_r+0x1a>
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ebc:	81a3      	strh	r3, [r4, #12]
 8004ebe:	e7ad      	b.n	8004e1c <__sflush_r+0x1c>
 8004ec0:	690f      	ldr	r7, [r1, #16]
 8004ec2:	2f00      	cmp	r7, #0
 8004ec4:	d0a9      	beq.n	8004e1a <__sflush_r+0x1a>
 8004ec6:	0793      	lsls	r3, r2, #30
 8004ec8:	680e      	ldr	r6, [r1, #0]
 8004eca:	bf08      	it	eq
 8004ecc:	694b      	ldreq	r3, [r1, #20]
 8004ece:	600f      	str	r7, [r1, #0]
 8004ed0:	bf18      	it	ne
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	eba6 0807 	sub.w	r8, r6, r7
 8004ed8:	608b      	str	r3, [r1, #8]
 8004eda:	f1b8 0f00 	cmp.w	r8, #0
 8004ede:	dd9c      	ble.n	8004e1a <__sflush_r+0x1a>
 8004ee0:	6a21      	ldr	r1, [r4, #32]
 8004ee2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ee4:	4643      	mov	r3, r8
 8004ee6:	463a      	mov	r2, r7
 8004ee8:	4628      	mov	r0, r5
 8004eea:	47b0      	blx	r6
 8004eec:	2800      	cmp	r0, #0
 8004eee:	dc06      	bgt.n	8004efe <__sflush_r+0xfe>
 8004ef0:	89a3      	ldrh	r3, [r4, #12]
 8004ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ef6:	81a3      	strh	r3, [r4, #12]
 8004ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8004efc:	e78e      	b.n	8004e1c <__sflush_r+0x1c>
 8004efe:	4407      	add	r7, r0
 8004f00:	eba8 0800 	sub.w	r8, r8, r0
 8004f04:	e7e9      	b.n	8004eda <__sflush_r+0xda>
 8004f06:	bf00      	nop
 8004f08:	20400001 	.word	0x20400001

08004f0c <_fflush_r>:
 8004f0c:	b538      	push	{r3, r4, r5, lr}
 8004f0e:	690b      	ldr	r3, [r1, #16]
 8004f10:	4605      	mov	r5, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	b913      	cbnz	r3, 8004f1c <_fflush_r+0x10>
 8004f16:	2500      	movs	r5, #0
 8004f18:	4628      	mov	r0, r5
 8004f1a:	bd38      	pop	{r3, r4, r5, pc}
 8004f1c:	b118      	cbz	r0, 8004f26 <_fflush_r+0x1a>
 8004f1e:	6983      	ldr	r3, [r0, #24]
 8004f20:	b90b      	cbnz	r3, 8004f26 <_fflush_r+0x1a>
 8004f22:	f000 f899 	bl	8005058 <__sinit>
 8004f26:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <_fflush_r+0x6c>)
 8004f28:	429c      	cmp	r4, r3
 8004f2a:	d11b      	bne.n	8004f64 <_fflush_r+0x58>
 8004f2c:	686c      	ldr	r4, [r5, #4]
 8004f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0ef      	beq.n	8004f16 <_fflush_r+0xa>
 8004f36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f38:	07d0      	lsls	r0, r2, #31
 8004f3a:	d404      	bmi.n	8004f46 <_fflush_r+0x3a>
 8004f3c:	0599      	lsls	r1, r3, #22
 8004f3e:	d402      	bmi.n	8004f46 <_fflush_r+0x3a>
 8004f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f42:	f000 f944 	bl	80051ce <__retarget_lock_acquire_recursive>
 8004f46:	4628      	mov	r0, r5
 8004f48:	4621      	mov	r1, r4
 8004f4a:	f7ff ff59 	bl	8004e00 <__sflush_r>
 8004f4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f50:	07da      	lsls	r2, r3, #31
 8004f52:	4605      	mov	r5, r0
 8004f54:	d4e0      	bmi.n	8004f18 <_fflush_r+0xc>
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	059b      	lsls	r3, r3, #22
 8004f5a:	d4dd      	bmi.n	8004f18 <_fflush_r+0xc>
 8004f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f5e:	f000 f937 	bl	80051d0 <__retarget_lock_release_recursive>
 8004f62:	e7d9      	b.n	8004f18 <_fflush_r+0xc>
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <_fflush_r+0x70>)
 8004f66:	429c      	cmp	r4, r3
 8004f68:	d101      	bne.n	8004f6e <_fflush_r+0x62>
 8004f6a:	68ac      	ldr	r4, [r5, #8]
 8004f6c:	e7df      	b.n	8004f2e <_fflush_r+0x22>
 8004f6e:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <_fflush_r+0x74>)
 8004f70:	429c      	cmp	r4, r3
 8004f72:	bf08      	it	eq
 8004f74:	68ec      	ldreq	r4, [r5, #12]
 8004f76:	e7da      	b.n	8004f2e <_fflush_r+0x22>
 8004f78:	08007014 	.word	0x08007014
 8004f7c:	08007034 	.word	0x08007034
 8004f80:	08006ff4 	.word	0x08006ff4

08004f84 <fflush>:
 8004f84:	4601      	mov	r1, r0
 8004f86:	b920      	cbnz	r0, 8004f92 <fflush+0xe>
 8004f88:	4b04      	ldr	r3, [pc, #16]	; (8004f9c <fflush+0x18>)
 8004f8a:	4905      	ldr	r1, [pc, #20]	; (8004fa0 <fflush+0x1c>)
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	f000 b8fe 	b.w	800518e <_fwalk_reent>
 8004f92:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <fflush+0x20>)
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	f7ff bfb9 	b.w	8004f0c <_fflush_r>
 8004f9a:	bf00      	nop
 8004f9c:	08006ff0 	.word	0x08006ff0
 8004fa0:	08004f0d 	.word	0x08004f0d
 8004fa4:	20000048 	.word	0x20000048

08004fa8 <std>:
 8004fa8:	2300      	movs	r3, #0
 8004faa:	b510      	push	{r4, lr}
 8004fac:	4604      	mov	r4, r0
 8004fae:	e9c0 3300 	strd	r3, r3, [r0]
 8004fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fb6:	6083      	str	r3, [r0, #8]
 8004fb8:	8181      	strh	r1, [r0, #12]
 8004fba:	6643      	str	r3, [r0, #100]	; 0x64
 8004fbc:	81c2      	strh	r2, [r0, #14]
 8004fbe:	6183      	str	r3, [r0, #24]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	2208      	movs	r2, #8
 8004fc4:	305c      	adds	r0, #92	; 0x5c
 8004fc6:	f7ff fd97 	bl	8004af8 <memset>
 8004fca:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <std+0x38>)
 8004fcc:	6263      	str	r3, [r4, #36]	; 0x24
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <std+0x3c>)
 8004fd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fd2:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <std+0x40>)
 8004fd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fd6:	4b05      	ldr	r3, [pc, #20]	; (8004fec <std+0x44>)
 8004fd8:	6224      	str	r4, [r4, #32]
 8004fda:	6323      	str	r3, [r4, #48]	; 0x30
 8004fdc:	bd10      	pop	{r4, pc}
 8004fde:	bf00      	nop
 8004fe0:	080062c1 	.word	0x080062c1
 8004fe4:	080062e3 	.word	0x080062e3
 8004fe8:	0800631b 	.word	0x0800631b
 8004fec:	0800633f 	.word	0x0800633f

08004ff0 <_cleanup_r>:
 8004ff0:	4901      	ldr	r1, [pc, #4]	; (8004ff8 <_cleanup_r+0x8>)
 8004ff2:	f000 b8cc 	b.w	800518e <_fwalk_reent>
 8004ff6:	bf00      	nop
 8004ff8:	08004f0d 	.word	0x08004f0d

08004ffc <__sfmoreglue>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	2268      	movs	r2, #104	; 0x68
 8005000:	1e4d      	subs	r5, r1, #1
 8005002:	4355      	muls	r5, r2
 8005004:	460e      	mov	r6, r1
 8005006:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800500a:	f000 f9b3 	bl	8005374 <_malloc_r>
 800500e:	4604      	mov	r4, r0
 8005010:	b140      	cbz	r0, 8005024 <__sfmoreglue+0x28>
 8005012:	2100      	movs	r1, #0
 8005014:	e9c0 1600 	strd	r1, r6, [r0]
 8005018:	300c      	adds	r0, #12
 800501a:	60a0      	str	r0, [r4, #8]
 800501c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005020:	f7ff fd6a 	bl	8004af8 <memset>
 8005024:	4620      	mov	r0, r4
 8005026:	bd70      	pop	{r4, r5, r6, pc}

08005028 <__sfp_lock_acquire>:
 8005028:	4801      	ldr	r0, [pc, #4]	; (8005030 <__sfp_lock_acquire+0x8>)
 800502a:	f000 b8d0 	b.w	80051ce <__retarget_lock_acquire_recursive>
 800502e:	bf00      	nop
 8005030:	200005bd 	.word	0x200005bd

08005034 <__sfp_lock_release>:
 8005034:	4801      	ldr	r0, [pc, #4]	; (800503c <__sfp_lock_release+0x8>)
 8005036:	f000 b8cb 	b.w	80051d0 <__retarget_lock_release_recursive>
 800503a:	bf00      	nop
 800503c:	200005bd 	.word	0x200005bd

08005040 <__sinit_lock_acquire>:
 8005040:	4801      	ldr	r0, [pc, #4]	; (8005048 <__sinit_lock_acquire+0x8>)
 8005042:	f000 b8c4 	b.w	80051ce <__retarget_lock_acquire_recursive>
 8005046:	bf00      	nop
 8005048:	200005be 	.word	0x200005be

0800504c <__sinit_lock_release>:
 800504c:	4801      	ldr	r0, [pc, #4]	; (8005054 <__sinit_lock_release+0x8>)
 800504e:	f000 b8bf 	b.w	80051d0 <__retarget_lock_release_recursive>
 8005052:	bf00      	nop
 8005054:	200005be 	.word	0x200005be

08005058 <__sinit>:
 8005058:	b510      	push	{r4, lr}
 800505a:	4604      	mov	r4, r0
 800505c:	f7ff fff0 	bl	8005040 <__sinit_lock_acquire>
 8005060:	69a3      	ldr	r3, [r4, #24]
 8005062:	b11b      	cbz	r3, 800506c <__sinit+0x14>
 8005064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005068:	f7ff bff0 	b.w	800504c <__sinit_lock_release>
 800506c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005070:	6523      	str	r3, [r4, #80]	; 0x50
 8005072:	4b13      	ldr	r3, [pc, #76]	; (80050c0 <__sinit+0x68>)
 8005074:	4a13      	ldr	r2, [pc, #76]	; (80050c4 <__sinit+0x6c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	62a2      	str	r2, [r4, #40]	; 0x28
 800507a:	42a3      	cmp	r3, r4
 800507c:	bf04      	itt	eq
 800507e:	2301      	moveq	r3, #1
 8005080:	61a3      	streq	r3, [r4, #24]
 8005082:	4620      	mov	r0, r4
 8005084:	f000 f820 	bl	80050c8 <__sfp>
 8005088:	6060      	str	r0, [r4, #4]
 800508a:	4620      	mov	r0, r4
 800508c:	f000 f81c 	bl	80050c8 <__sfp>
 8005090:	60a0      	str	r0, [r4, #8]
 8005092:	4620      	mov	r0, r4
 8005094:	f000 f818 	bl	80050c8 <__sfp>
 8005098:	2200      	movs	r2, #0
 800509a:	60e0      	str	r0, [r4, #12]
 800509c:	2104      	movs	r1, #4
 800509e:	6860      	ldr	r0, [r4, #4]
 80050a0:	f7ff ff82 	bl	8004fa8 <std>
 80050a4:	68a0      	ldr	r0, [r4, #8]
 80050a6:	2201      	movs	r2, #1
 80050a8:	2109      	movs	r1, #9
 80050aa:	f7ff ff7d 	bl	8004fa8 <std>
 80050ae:	68e0      	ldr	r0, [r4, #12]
 80050b0:	2202      	movs	r2, #2
 80050b2:	2112      	movs	r1, #18
 80050b4:	f7ff ff78 	bl	8004fa8 <std>
 80050b8:	2301      	movs	r3, #1
 80050ba:	61a3      	str	r3, [r4, #24]
 80050bc:	e7d2      	b.n	8005064 <__sinit+0xc>
 80050be:	bf00      	nop
 80050c0:	08006ff0 	.word	0x08006ff0
 80050c4:	08004ff1 	.word	0x08004ff1

080050c8 <__sfp>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	4607      	mov	r7, r0
 80050cc:	f7ff ffac 	bl	8005028 <__sfp_lock_acquire>
 80050d0:	4b1e      	ldr	r3, [pc, #120]	; (800514c <__sfp+0x84>)
 80050d2:	681e      	ldr	r6, [r3, #0]
 80050d4:	69b3      	ldr	r3, [r6, #24]
 80050d6:	b913      	cbnz	r3, 80050de <__sfp+0x16>
 80050d8:	4630      	mov	r0, r6
 80050da:	f7ff ffbd 	bl	8005058 <__sinit>
 80050de:	3648      	adds	r6, #72	; 0x48
 80050e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	d503      	bpl.n	80050f0 <__sfp+0x28>
 80050e8:	6833      	ldr	r3, [r6, #0]
 80050ea:	b30b      	cbz	r3, 8005130 <__sfp+0x68>
 80050ec:	6836      	ldr	r6, [r6, #0]
 80050ee:	e7f7      	b.n	80050e0 <__sfp+0x18>
 80050f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050f4:	b9d5      	cbnz	r5, 800512c <__sfp+0x64>
 80050f6:	4b16      	ldr	r3, [pc, #88]	; (8005150 <__sfp+0x88>)
 80050f8:	60e3      	str	r3, [r4, #12]
 80050fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050fe:	6665      	str	r5, [r4, #100]	; 0x64
 8005100:	f000 f864 	bl	80051cc <__retarget_lock_init_recursive>
 8005104:	f7ff ff96 	bl	8005034 <__sfp_lock_release>
 8005108:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800510c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005110:	6025      	str	r5, [r4, #0]
 8005112:	61a5      	str	r5, [r4, #24]
 8005114:	2208      	movs	r2, #8
 8005116:	4629      	mov	r1, r5
 8005118:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800511c:	f7ff fcec 	bl	8004af8 <memset>
 8005120:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005124:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005128:	4620      	mov	r0, r4
 800512a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800512c:	3468      	adds	r4, #104	; 0x68
 800512e:	e7d9      	b.n	80050e4 <__sfp+0x1c>
 8005130:	2104      	movs	r1, #4
 8005132:	4638      	mov	r0, r7
 8005134:	f7ff ff62 	bl	8004ffc <__sfmoreglue>
 8005138:	4604      	mov	r4, r0
 800513a:	6030      	str	r0, [r6, #0]
 800513c:	2800      	cmp	r0, #0
 800513e:	d1d5      	bne.n	80050ec <__sfp+0x24>
 8005140:	f7ff ff78 	bl	8005034 <__sfp_lock_release>
 8005144:	230c      	movs	r3, #12
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	e7ee      	b.n	8005128 <__sfp+0x60>
 800514a:	bf00      	nop
 800514c:	08006ff0 	.word	0x08006ff0
 8005150:	ffff0001 	.word	0xffff0001

08005154 <_fwalk>:
 8005154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005158:	460f      	mov	r7, r1
 800515a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800515e:	2600      	movs	r6, #0
 8005160:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8005164:	f1b8 0801 	subs.w	r8, r8, #1
 8005168:	d505      	bpl.n	8005176 <_fwalk+0x22>
 800516a:	6824      	ldr	r4, [r4, #0]
 800516c:	2c00      	cmp	r4, #0
 800516e:	d1f7      	bne.n	8005160 <_fwalk+0xc>
 8005170:	4630      	mov	r0, r6
 8005172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005176:	89ab      	ldrh	r3, [r5, #12]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d906      	bls.n	800518a <_fwalk+0x36>
 800517c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005180:	3301      	adds	r3, #1
 8005182:	d002      	beq.n	800518a <_fwalk+0x36>
 8005184:	4628      	mov	r0, r5
 8005186:	47b8      	blx	r7
 8005188:	4306      	orrs	r6, r0
 800518a:	3568      	adds	r5, #104	; 0x68
 800518c:	e7ea      	b.n	8005164 <_fwalk+0x10>

0800518e <_fwalk_reent>:
 800518e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005192:	4606      	mov	r6, r0
 8005194:	4688      	mov	r8, r1
 8005196:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800519a:	2700      	movs	r7, #0
 800519c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051a0:	f1b9 0901 	subs.w	r9, r9, #1
 80051a4:	d505      	bpl.n	80051b2 <_fwalk_reent+0x24>
 80051a6:	6824      	ldr	r4, [r4, #0]
 80051a8:	2c00      	cmp	r4, #0
 80051aa:	d1f7      	bne.n	800519c <_fwalk_reent+0xe>
 80051ac:	4638      	mov	r0, r7
 80051ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b2:	89ab      	ldrh	r3, [r5, #12]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d907      	bls.n	80051c8 <_fwalk_reent+0x3a>
 80051b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051bc:	3301      	adds	r3, #1
 80051be:	d003      	beq.n	80051c8 <_fwalk_reent+0x3a>
 80051c0:	4629      	mov	r1, r5
 80051c2:	4630      	mov	r0, r6
 80051c4:	47c0      	blx	r8
 80051c6:	4307      	orrs	r7, r0
 80051c8:	3568      	adds	r5, #104	; 0x68
 80051ca:	e7e9      	b.n	80051a0 <_fwalk_reent+0x12>

080051cc <__retarget_lock_init_recursive>:
 80051cc:	4770      	bx	lr

080051ce <__retarget_lock_acquire_recursive>:
 80051ce:	4770      	bx	lr

080051d0 <__retarget_lock_release_recursive>:
 80051d0:	4770      	bx	lr

080051d2 <__swhatbuf_r>:
 80051d2:	b570      	push	{r4, r5, r6, lr}
 80051d4:	460e      	mov	r6, r1
 80051d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051da:	2900      	cmp	r1, #0
 80051dc:	b096      	sub	sp, #88	; 0x58
 80051de:	4614      	mov	r4, r2
 80051e0:	461d      	mov	r5, r3
 80051e2:	da08      	bge.n	80051f6 <__swhatbuf_r+0x24>
 80051e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	602a      	str	r2, [r5, #0]
 80051ec:	061a      	lsls	r2, r3, #24
 80051ee:	d410      	bmi.n	8005212 <__swhatbuf_r+0x40>
 80051f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051f4:	e00e      	b.n	8005214 <__swhatbuf_r+0x42>
 80051f6:	466a      	mov	r2, sp
 80051f8:	f001 fa92 	bl	8006720 <_fstat_r>
 80051fc:	2800      	cmp	r0, #0
 80051fe:	dbf1      	blt.n	80051e4 <__swhatbuf_r+0x12>
 8005200:	9a01      	ldr	r2, [sp, #4]
 8005202:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005206:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800520a:	425a      	negs	r2, r3
 800520c:	415a      	adcs	r2, r3
 800520e:	602a      	str	r2, [r5, #0]
 8005210:	e7ee      	b.n	80051f0 <__swhatbuf_r+0x1e>
 8005212:	2340      	movs	r3, #64	; 0x40
 8005214:	2000      	movs	r0, #0
 8005216:	6023      	str	r3, [r4, #0]
 8005218:	b016      	add	sp, #88	; 0x58
 800521a:	bd70      	pop	{r4, r5, r6, pc}

0800521c <__smakebuf_r>:
 800521c:	898b      	ldrh	r3, [r1, #12]
 800521e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005220:	079d      	lsls	r5, r3, #30
 8005222:	4606      	mov	r6, r0
 8005224:	460c      	mov	r4, r1
 8005226:	d507      	bpl.n	8005238 <__smakebuf_r+0x1c>
 8005228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	6123      	str	r3, [r4, #16]
 8005230:	2301      	movs	r3, #1
 8005232:	6163      	str	r3, [r4, #20]
 8005234:	b002      	add	sp, #8
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	ab01      	add	r3, sp, #4
 800523a:	466a      	mov	r2, sp
 800523c:	f7ff ffc9 	bl	80051d2 <__swhatbuf_r>
 8005240:	9900      	ldr	r1, [sp, #0]
 8005242:	4605      	mov	r5, r0
 8005244:	4630      	mov	r0, r6
 8005246:	f000 f895 	bl	8005374 <_malloc_r>
 800524a:	b948      	cbnz	r0, 8005260 <__smakebuf_r+0x44>
 800524c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005250:	059a      	lsls	r2, r3, #22
 8005252:	d4ef      	bmi.n	8005234 <__smakebuf_r+0x18>
 8005254:	f023 0303 	bic.w	r3, r3, #3
 8005258:	f043 0302 	orr.w	r3, r3, #2
 800525c:	81a3      	strh	r3, [r4, #12]
 800525e:	e7e3      	b.n	8005228 <__smakebuf_r+0xc>
 8005260:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <__smakebuf_r+0x7c>)
 8005262:	62b3      	str	r3, [r6, #40]	; 0x28
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	6020      	str	r0, [r4, #0]
 8005268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526c:	81a3      	strh	r3, [r4, #12]
 800526e:	9b00      	ldr	r3, [sp, #0]
 8005270:	6163      	str	r3, [r4, #20]
 8005272:	9b01      	ldr	r3, [sp, #4]
 8005274:	6120      	str	r0, [r4, #16]
 8005276:	b15b      	cbz	r3, 8005290 <__smakebuf_r+0x74>
 8005278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800527c:	4630      	mov	r0, r6
 800527e:	f001 fa61 	bl	8006744 <_isatty_r>
 8005282:	b128      	cbz	r0, 8005290 <__smakebuf_r+0x74>
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	f023 0303 	bic.w	r3, r3, #3
 800528a:	f043 0301 	orr.w	r3, r3, #1
 800528e:	81a3      	strh	r3, [r4, #12]
 8005290:	89a0      	ldrh	r0, [r4, #12]
 8005292:	4305      	orrs	r5, r0
 8005294:	81a5      	strh	r5, [r4, #12]
 8005296:	e7cd      	b.n	8005234 <__smakebuf_r+0x18>
 8005298:	08004ff1 	.word	0x08004ff1

0800529c <_free_r>:
 800529c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800529e:	2900      	cmp	r1, #0
 80052a0:	d044      	beq.n	800532c <_free_r+0x90>
 80052a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052a6:	9001      	str	r0, [sp, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f1a1 0404 	sub.w	r4, r1, #4
 80052ae:	bfb8      	it	lt
 80052b0:	18e4      	addlt	r4, r4, r3
 80052b2:	f001 fa69 	bl	8006788 <__malloc_lock>
 80052b6:	4a1e      	ldr	r2, [pc, #120]	; (8005330 <_free_r+0x94>)
 80052b8:	9801      	ldr	r0, [sp, #4]
 80052ba:	6813      	ldr	r3, [r2, #0]
 80052bc:	b933      	cbnz	r3, 80052cc <_free_r+0x30>
 80052be:	6063      	str	r3, [r4, #4]
 80052c0:	6014      	str	r4, [r2, #0]
 80052c2:	b003      	add	sp, #12
 80052c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052c8:	f001 ba64 	b.w	8006794 <__malloc_unlock>
 80052cc:	42a3      	cmp	r3, r4
 80052ce:	d908      	bls.n	80052e2 <_free_r+0x46>
 80052d0:	6825      	ldr	r5, [r4, #0]
 80052d2:	1961      	adds	r1, r4, r5
 80052d4:	428b      	cmp	r3, r1
 80052d6:	bf01      	itttt	eq
 80052d8:	6819      	ldreq	r1, [r3, #0]
 80052da:	685b      	ldreq	r3, [r3, #4]
 80052dc:	1949      	addeq	r1, r1, r5
 80052de:	6021      	streq	r1, [r4, #0]
 80052e0:	e7ed      	b.n	80052be <_free_r+0x22>
 80052e2:	461a      	mov	r2, r3
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	b10b      	cbz	r3, 80052ec <_free_r+0x50>
 80052e8:	42a3      	cmp	r3, r4
 80052ea:	d9fa      	bls.n	80052e2 <_free_r+0x46>
 80052ec:	6811      	ldr	r1, [r2, #0]
 80052ee:	1855      	adds	r5, r2, r1
 80052f0:	42a5      	cmp	r5, r4
 80052f2:	d10b      	bne.n	800530c <_free_r+0x70>
 80052f4:	6824      	ldr	r4, [r4, #0]
 80052f6:	4421      	add	r1, r4
 80052f8:	1854      	adds	r4, r2, r1
 80052fa:	42a3      	cmp	r3, r4
 80052fc:	6011      	str	r1, [r2, #0]
 80052fe:	d1e0      	bne.n	80052c2 <_free_r+0x26>
 8005300:	681c      	ldr	r4, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	6053      	str	r3, [r2, #4]
 8005306:	4421      	add	r1, r4
 8005308:	6011      	str	r1, [r2, #0]
 800530a:	e7da      	b.n	80052c2 <_free_r+0x26>
 800530c:	d902      	bls.n	8005314 <_free_r+0x78>
 800530e:	230c      	movs	r3, #12
 8005310:	6003      	str	r3, [r0, #0]
 8005312:	e7d6      	b.n	80052c2 <_free_r+0x26>
 8005314:	6825      	ldr	r5, [r4, #0]
 8005316:	1961      	adds	r1, r4, r5
 8005318:	428b      	cmp	r3, r1
 800531a:	bf04      	itt	eq
 800531c:	6819      	ldreq	r1, [r3, #0]
 800531e:	685b      	ldreq	r3, [r3, #4]
 8005320:	6063      	str	r3, [r4, #4]
 8005322:	bf04      	itt	eq
 8005324:	1949      	addeq	r1, r1, r5
 8005326:	6021      	streq	r1, [r4, #0]
 8005328:	6054      	str	r4, [r2, #4]
 800532a:	e7ca      	b.n	80052c2 <_free_r+0x26>
 800532c:	b003      	add	sp, #12
 800532e:	bd30      	pop	{r4, r5, pc}
 8005330:	200005c0 	.word	0x200005c0

08005334 <sbrk_aligned>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	4e0e      	ldr	r6, [pc, #56]	; (8005370 <sbrk_aligned+0x3c>)
 8005338:	460c      	mov	r4, r1
 800533a:	6831      	ldr	r1, [r6, #0]
 800533c:	4605      	mov	r5, r0
 800533e:	b911      	cbnz	r1, 8005346 <sbrk_aligned+0x12>
 8005340:	f000 ff76 	bl	8006230 <_sbrk_r>
 8005344:	6030      	str	r0, [r6, #0]
 8005346:	4621      	mov	r1, r4
 8005348:	4628      	mov	r0, r5
 800534a:	f000 ff71 	bl	8006230 <_sbrk_r>
 800534e:	1c43      	adds	r3, r0, #1
 8005350:	d00a      	beq.n	8005368 <sbrk_aligned+0x34>
 8005352:	1cc4      	adds	r4, r0, #3
 8005354:	f024 0403 	bic.w	r4, r4, #3
 8005358:	42a0      	cmp	r0, r4
 800535a:	d007      	beq.n	800536c <sbrk_aligned+0x38>
 800535c:	1a21      	subs	r1, r4, r0
 800535e:	4628      	mov	r0, r5
 8005360:	f000 ff66 	bl	8006230 <_sbrk_r>
 8005364:	3001      	adds	r0, #1
 8005366:	d101      	bne.n	800536c <sbrk_aligned+0x38>
 8005368:	f04f 34ff 	mov.w	r4, #4294967295
 800536c:	4620      	mov	r0, r4
 800536e:	bd70      	pop	{r4, r5, r6, pc}
 8005370:	200005c4 	.word	0x200005c4

08005374 <_malloc_r>:
 8005374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005378:	1ccd      	adds	r5, r1, #3
 800537a:	f025 0503 	bic.w	r5, r5, #3
 800537e:	3508      	adds	r5, #8
 8005380:	2d0c      	cmp	r5, #12
 8005382:	bf38      	it	cc
 8005384:	250c      	movcc	r5, #12
 8005386:	2d00      	cmp	r5, #0
 8005388:	4607      	mov	r7, r0
 800538a:	db01      	blt.n	8005390 <_malloc_r+0x1c>
 800538c:	42a9      	cmp	r1, r5
 800538e:	d905      	bls.n	800539c <_malloc_r+0x28>
 8005390:	230c      	movs	r3, #12
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	2600      	movs	r6, #0
 8005396:	4630      	mov	r0, r6
 8005398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800539c:	4e2e      	ldr	r6, [pc, #184]	; (8005458 <_malloc_r+0xe4>)
 800539e:	f001 f9f3 	bl	8006788 <__malloc_lock>
 80053a2:	6833      	ldr	r3, [r6, #0]
 80053a4:	461c      	mov	r4, r3
 80053a6:	bb34      	cbnz	r4, 80053f6 <_malloc_r+0x82>
 80053a8:	4629      	mov	r1, r5
 80053aa:	4638      	mov	r0, r7
 80053ac:	f7ff ffc2 	bl	8005334 <sbrk_aligned>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	4604      	mov	r4, r0
 80053b4:	d14d      	bne.n	8005452 <_malloc_r+0xde>
 80053b6:	6834      	ldr	r4, [r6, #0]
 80053b8:	4626      	mov	r6, r4
 80053ba:	2e00      	cmp	r6, #0
 80053bc:	d140      	bne.n	8005440 <_malloc_r+0xcc>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	4631      	mov	r1, r6
 80053c2:	4638      	mov	r0, r7
 80053c4:	eb04 0803 	add.w	r8, r4, r3
 80053c8:	f000 ff32 	bl	8006230 <_sbrk_r>
 80053cc:	4580      	cmp	r8, r0
 80053ce:	d13a      	bne.n	8005446 <_malloc_r+0xd2>
 80053d0:	6821      	ldr	r1, [r4, #0]
 80053d2:	3503      	adds	r5, #3
 80053d4:	1a6d      	subs	r5, r5, r1
 80053d6:	f025 0503 	bic.w	r5, r5, #3
 80053da:	3508      	adds	r5, #8
 80053dc:	2d0c      	cmp	r5, #12
 80053de:	bf38      	it	cc
 80053e0:	250c      	movcc	r5, #12
 80053e2:	4629      	mov	r1, r5
 80053e4:	4638      	mov	r0, r7
 80053e6:	f7ff ffa5 	bl	8005334 <sbrk_aligned>
 80053ea:	3001      	adds	r0, #1
 80053ec:	d02b      	beq.n	8005446 <_malloc_r+0xd2>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	442b      	add	r3, r5
 80053f2:	6023      	str	r3, [r4, #0]
 80053f4:	e00e      	b.n	8005414 <_malloc_r+0xa0>
 80053f6:	6822      	ldr	r2, [r4, #0]
 80053f8:	1b52      	subs	r2, r2, r5
 80053fa:	d41e      	bmi.n	800543a <_malloc_r+0xc6>
 80053fc:	2a0b      	cmp	r2, #11
 80053fe:	d916      	bls.n	800542e <_malloc_r+0xba>
 8005400:	1961      	adds	r1, r4, r5
 8005402:	42a3      	cmp	r3, r4
 8005404:	6025      	str	r5, [r4, #0]
 8005406:	bf18      	it	ne
 8005408:	6059      	strne	r1, [r3, #4]
 800540a:	6863      	ldr	r3, [r4, #4]
 800540c:	bf08      	it	eq
 800540e:	6031      	streq	r1, [r6, #0]
 8005410:	5162      	str	r2, [r4, r5]
 8005412:	604b      	str	r3, [r1, #4]
 8005414:	4638      	mov	r0, r7
 8005416:	f104 060b 	add.w	r6, r4, #11
 800541a:	f001 f9bb 	bl	8006794 <__malloc_unlock>
 800541e:	f026 0607 	bic.w	r6, r6, #7
 8005422:	1d23      	adds	r3, r4, #4
 8005424:	1af2      	subs	r2, r6, r3
 8005426:	d0b6      	beq.n	8005396 <_malloc_r+0x22>
 8005428:	1b9b      	subs	r3, r3, r6
 800542a:	50a3      	str	r3, [r4, r2]
 800542c:	e7b3      	b.n	8005396 <_malloc_r+0x22>
 800542e:	6862      	ldr	r2, [r4, #4]
 8005430:	42a3      	cmp	r3, r4
 8005432:	bf0c      	ite	eq
 8005434:	6032      	streq	r2, [r6, #0]
 8005436:	605a      	strne	r2, [r3, #4]
 8005438:	e7ec      	b.n	8005414 <_malloc_r+0xa0>
 800543a:	4623      	mov	r3, r4
 800543c:	6864      	ldr	r4, [r4, #4]
 800543e:	e7b2      	b.n	80053a6 <_malloc_r+0x32>
 8005440:	4634      	mov	r4, r6
 8005442:	6876      	ldr	r6, [r6, #4]
 8005444:	e7b9      	b.n	80053ba <_malloc_r+0x46>
 8005446:	230c      	movs	r3, #12
 8005448:	603b      	str	r3, [r7, #0]
 800544a:	4638      	mov	r0, r7
 800544c:	f001 f9a2 	bl	8006794 <__malloc_unlock>
 8005450:	e7a1      	b.n	8005396 <_malloc_r+0x22>
 8005452:	6025      	str	r5, [r4, #0]
 8005454:	e7de      	b.n	8005414 <_malloc_r+0xa0>
 8005456:	bf00      	nop
 8005458:	200005c0 	.word	0x200005c0

0800545c <__sfputc_r>:
 800545c:	6893      	ldr	r3, [r2, #8]
 800545e:	3b01      	subs	r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	b410      	push	{r4}
 8005464:	6093      	str	r3, [r2, #8]
 8005466:	da08      	bge.n	800547a <__sfputc_r+0x1e>
 8005468:	6994      	ldr	r4, [r2, #24]
 800546a:	42a3      	cmp	r3, r4
 800546c:	db01      	blt.n	8005472 <__sfputc_r+0x16>
 800546e:	290a      	cmp	r1, #10
 8005470:	d103      	bne.n	800547a <__sfputc_r+0x1e>
 8005472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005476:	f7ff bc03 	b.w	8004c80 <__swbuf_r>
 800547a:	6813      	ldr	r3, [r2, #0]
 800547c:	1c58      	adds	r0, r3, #1
 800547e:	6010      	str	r0, [r2, #0]
 8005480:	7019      	strb	r1, [r3, #0]
 8005482:	4608      	mov	r0, r1
 8005484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005488:	4770      	bx	lr

0800548a <__sfputs_r>:
 800548a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548c:	4606      	mov	r6, r0
 800548e:	460f      	mov	r7, r1
 8005490:	4614      	mov	r4, r2
 8005492:	18d5      	adds	r5, r2, r3
 8005494:	42ac      	cmp	r4, r5
 8005496:	d101      	bne.n	800549c <__sfputs_r+0x12>
 8005498:	2000      	movs	r0, #0
 800549a:	e007      	b.n	80054ac <__sfputs_r+0x22>
 800549c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a0:	463a      	mov	r2, r7
 80054a2:	4630      	mov	r0, r6
 80054a4:	f7ff ffda 	bl	800545c <__sfputc_r>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d1f3      	bne.n	8005494 <__sfputs_r+0xa>
 80054ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054b0 <_vfiprintf_r>:
 80054b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b4:	460d      	mov	r5, r1
 80054b6:	b09d      	sub	sp, #116	; 0x74
 80054b8:	4614      	mov	r4, r2
 80054ba:	4698      	mov	r8, r3
 80054bc:	4606      	mov	r6, r0
 80054be:	b118      	cbz	r0, 80054c8 <_vfiprintf_r+0x18>
 80054c0:	6983      	ldr	r3, [r0, #24]
 80054c2:	b90b      	cbnz	r3, 80054c8 <_vfiprintf_r+0x18>
 80054c4:	f7ff fdc8 	bl	8005058 <__sinit>
 80054c8:	4b89      	ldr	r3, [pc, #548]	; (80056f0 <_vfiprintf_r+0x240>)
 80054ca:	429d      	cmp	r5, r3
 80054cc:	d11b      	bne.n	8005506 <_vfiprintf_r+0x56>
 80054ce:	6875      	ldr	r5, [r6, #4]
 80054d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054d2:	07d9      	lsls	r1, r3, #31
 80054d4:	d405      	bmi.n	80054e2 <_vfiprintf_r+0x32>
 80054d6:	89ab      	ldrh	r3, [r5, #12]
 80054d8:	059a      	lsls	r2, r3, #22
 80054da:	d402      	bmi.n	80054e2 <_vfiprintf_r+0x32>
 80054dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054de:	f7ff fe76 	bl	80051ce <__retarget_lock_acquire_recursive>
 80054e2:	89ab      	ldrh	r3, [r5, #12]
 80054e4:	071b      	lsls	r3, r3, #28
 80054e6:	d501      	bpl.n	80054ec <_vfiprintf_r+0x3c>
 80054e8:	692b      	ldr	r3, [r5, #16]
 80054ea:	b9eb      	cbnz	r3, 8005528 <_vfiprintf_r+0x78>
 80054ec:	4629      	mov	r1, r5
 80054ee:	4630      	mov	r0, r6
 80054f0:	f7ff fc18 	bl	8004d24 <__swsetup_r>
 80054f4:	b1c0      	cbz	r0, 8005528 <_vfiprintf_r+0x78>
 80054f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054f8:	07dc      	lsls	r4, r3, #31
 80054fa:	d50e      	bpl.n	800551a <_vfiprintf_r+0x6a>
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005500:	b01d      	add	sp, #116	; 0x74
 8005502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005506:	4b7b      	ldr	r3, [pc, #492]	; (80056f4 <_vfiprintf_r+0x244>)
 8005508:	429d      	cmp	r5, r3
 800550a:	d101      	bne.n	8005510 <_vfiprintf_r+0x60>
 800550c:	68b5      	ldr	r5, [r6, #8]
 800550e:	e7df      	b.n	80054d0 <_vfiprintf_r+0x20>
 8005510:	4b79      	ldr	r3, [pc, #484]	; (80056f8 <_vfiprintf_r+0x248>)
 8005512:	429d      	cmp	r5, r3
 8005514:	bf08      	it	eq
 8005516:	68f5      	ldreq	r5, [r6, #12]
 8005518:	e7da      	b.n	80054d0 <_vfiprintf_r+0x20>
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	0598      	lsls	r0, r3, #22
 800551e:	d4ed      	bmi.n	80054fc <_vfiprintf_r+0x4c>
 8005520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005522:	f7ff fe55 	bl	80051d0 <__retarget_lock_release_recursive>
 8005526:	e7e9      	b.n	80054fc <_vfiprintf_r+0x4c>
 8005528:	2300      	movs	r3, #0
 800552a:	9309      	str	r3, [sp, #36]	; 0x24
 800552c:	2320      	movs	r3, #32
 800552e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005532:	f8cd 800c 	str.w	r8, [sp, #12]
 8005536:	2330      	movs	r3, #48	; 0x30
 8005538:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80056fc <_vfiprintf_r+0x24c>
 800553c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005540:	f04f 0901 	mov.w	r9, #1
 8005544:	4623      	mov	r3, r4
 8005546:	469a      	mov	sl, r3
 8005548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800554c:	b10a      	cbz	r2, 8005552 <_vfiprintf_r+0xa2>
 800554e:	2a25      	cmp	r2, #37	; 0x25
 8005550:	d1f9      	bne.n	8005546 <_vfiprintf_r+0x96>
 8005552:	ebba 0b04 	subs.w	fp, sl, r4
 8005556:	d00b      	beq.n	8005570 <_vfiprintf_r+0xc0>
 8005558:	465b      	mov	r3, fp
 800555a:	4622      	mov	r2, r4
 800555c:	4629      	mov	r1, r5
 800555e:	4630      	mov	r0, r6
 8005560:	f7ff ff93 	bl	800548a <__sfputs_r>
 8005564:	3001      	adds	r0, #1
 8005566:	f000 80aa 	beq.w	80056be <_vfiprintf_r+0x20e>
 800556a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800556c:	445a      	add	r2, fp
 800556e:	9209      	str	r2, [sp, #36]	; 0x24
 8005570:	f89a 3000 	ldrb.w	r3, [sl]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80a2 	beq.w	80056be <_vfiprintf_r+0x20e>
 800557a:	2300      	movs	r3, #0
 800557c:	f04f 32ff 	mov.w	r2, #4294967295
 8005580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005584:	f10a 0a01 	add.w	sl, sl, #1
 8005588:	9304      	str	r3, [sp, #16]
 800558a:	9307      	str	r3, [sp, #28]
 800558c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005590:	931a      	str	r3, [sp, #104]	; 0x68
 8005592:	4654      	mov	r4, sl
 8005594:	2205      	movs	r2, #5
 8005596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800559a:	4858      	ldr	r0, [pc, #352]	; (80056fc <_vfiprintf_r+0x24c>)
 800559c:	f7fa fe28 	bl	80001f0 <memchr>
 80055a0:	9a04      	ldr	r2, [sp, #16]
 80055a2:	b9d8      	cbnz	r0, 80055dc <_vfiprintf_r+0x12c>
 80055a4:	06d1      	lsls	r1, r2, #27
 80055a6:	bf44      	itt	mi
 80055a8:	2320      	movmi	r3, #32
 80055aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ae:	0713      	lsls	r3, r2, #28
 80055b0:	bf44      	itt	mi
 80055b2:	232b      	movmi	r3, #43	; 0x2b
 80055b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055b8:	f89a 3000 	ldrb.w	r3, [sl]
 80055bc:	2b2a      	cmp	r3, #42	; 0x2a
 80055be:	d015      	beq.n	80055ec <_vfiprintf_r+0x13c>
 80055c0:	9a07      	ldr	r2, [sp, #28]
 80055c2:	4654      	mov	r4, sl
 80055c4:	2000      	movs	r0, #0
 80055c6:	f04f 0c0a 	mov.w	ip, #10
 80055ca:	4621      	mov	r1, r4
 80055cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055d0:	3b30      	subs	r3, #48	; 0x30
 80055d2:	2b09      	cmp	r3, #9
 80055d4:	d94e      	bls.n	8005674 <_vfiprintf_r+0x1c4>
 80055d6:	b1b0      	cbz	r0, 8005606 <_vfiprintf_r+0x156>
 80055d8:	9207      	str	r2, [sp, #28]
 80055da:	e014      	b.n	8005606 <_vfiprintf_r+0x156>
 80055dc:	eba0 0308 	sub.w	r3, r0, r8
 80055e0:	fa09 f303 	lsl.w	r3, r9, r3
 80055e4:	4313      	orrs	r3, r2
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	46a2      	mov	sl, r4
 80055ea:	e7d2      	b.n	8005592 <_vfiprintf_r+0xe2>
 80055ec:	9b03      	ldr	r3, [sp, #12]
 80055ee:	1d19      	adds	r1, r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	9103      	str	r1, [sp, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bfbb      	ittet	lt
 80055f8:	425b      	neglt	r3, r3
 80055fa:	f042 0202 	orrlt.w	r2, r2, #2
 80055fe:	9307      	strge	r3, [sp, #28]
 8005600:	9307      	strlt	r3, [sp, #28]
 8005602:	bfb8      	it	lt
 8005604:	9204      	strlt	r2, [sp, #16]
 8005606:	7823      	ldrb	r3, [r4, #0]
 8005608:	2b2e      	cmp	r3, #46	; 0x2e
 800560a:	d10c      	bne.n	8005626 <_vfiprintf_r+0x176>
 800560c:	7863      	ldrb	r3, [r4, #1]
 800560e:	2b2a      	cmp	r3, #42	; 0x2a
 8005610:	d135      	bne.n	800567e <_vfiprintf_r+0x1ce>
 8005612:	9b03      	ldr	r3, [sp, #12]
 8005614:	1d1a      	adds	r2, r3, #4
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	9203      	str	r2, [sp, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	bfb8      	it	lt
 800561e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005622:	3402      	adds	r4, #2
 8005624:	9305      	str	r3, [sp, #20]
 8005626:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800570c <_vfiprintf_r+0x25c>
 800562a:	7821      	ldrb	r1, [r4, #0]
 800562c:	2203      	movs	r2, #3
 800562e:	4650      	mov	r0, sl
 8005630:	f7fa fdde 	bl	80001f0 <memchr>
 8005634:	b140      	cbz	r0, 8005648 <_vfiprintf_r+0x198>
 8005636:	2340      	movs	r3, #64	; 0x40
 8005638:	eba0 000a 	sub.w	r0, r0, sl
 800563c:	fa03 f000 	lsl.w	r0, r3, r0
 8005640:	9b04      	ldr	r3, [sp, #16]
 8005642:	4303      	orrs	r3, r0
 8005644:	3401      	adds	r4, #1
 8005646:	9304      	str	r3, [sp, #16]
 8005648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800564c:	482c      	ldr	r0, [pc, #176]	; (8005700 <_vfiprintf_r+0x250>)
 800564e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005652:	2206      	movs	r2, #6
 8005654:	f7fa fdcc 	bl	80001f0 <memchr>
 8005658:	2800      	cmp	r0, #0
 800565a:	d03f      	beq.n	80056dc <_vfiprintf_r+0x22c>
 800565c:	4b29      	ldr	r3, [pc, #164]	; (8005704 <_vfiprintf_r+0x254>)
 800565e:	bb1b      	cbnz	r3, 80056a8 <_vfiprintf_r+0x1f8>
 8005660:	9b03      	ldr	r3, [sp, #12]
 8005662:	3307      	adds	r3, #7
 8005664:	f023 0307 	bic.w	r3, r3, #7
 8005668:	3308      	adds	r3, #8
 800566a:	9303      	str	r3, [sp, #12]
 800566c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566e:	443b      	add	r3, r7
 8005670:	9309      	str	r3, [sp, #36]	; 0x24
 8005672:	e767      	b.n	8005544 <_vfiprintf_r+0x94>
 8005674:	fb0c 3202 	mla	r2, ip, r2, r3
 8005678:	460c      	mov	r4, r1
 800567a:	2001      	movs	r0, #1
 800567c:	e7a5      	b.n	80055ca <_vfiprintf_r+0x11a>
 800567e:	2300      	movs	r3, #0
 8005680:	3401      	adds	r4, #1
 8005682:	9305      	str	r3, [sp, #20]
 8005684:	4619      	mov	r1, r3
 8005686:	f04f 0c0a 	mov.w	ip, #10
 800568a:	4620      	mov	r0, r4
 800568c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005690:	3a30      	subs	r2, #48	; 0x30
 8005692:	2a09      	cmp	r2, #9
 8005694:	d903      	bls.n	800569e <_vfiprintf_r+0x1ee>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0c5      	beq.n	8005626 <_vfiprintf_r+0x176>
 800569a:	9105      	str	r1, [sp, #20]
 800569c:	e7c3      	b.n	8005626 <_vfiprintf_r+0x176>
 800569e:	fb0c 2101 	mla	r1, ip, r1, r2
 80056a2:	4604      	mov	r4, r0
 80056a4:	2301      	movs	r3, #1
 80056a6:	e7f0      	b.n	800568a <_vfiprintf_r+0x1da>
 80056a8:	ab03      	add	r3, sp, #12
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	462a      	mov	r2, r5
 80056ae:	4b16      	ldr	r3, [pc, #88]	; (8005708 <_vfiprintf_r+0x258>)
 80056b0:	a904      	add	r1, sp, #16
 80056b2:	4630      	mov	r0, r6
 80056b4:	f3af 8000 	nop.w
 80056b8:	4607      	mov	r7, r0
 80056ba:	1c78      	adds	r0, r7, #1
 80056bc:	d1d6      	bne.n	800566c <_vfiprintf_r+0x1bc>
 80056be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056c0:	07d9      	lsls	r1, r3, #31
 80056c2:	d405      	bmi.n	80056d0 <_vfiprintf_r+0x220>
 80056c4:	89ab      	ldrh	r3, [r5, #12]
 80056c6:	059a      	lsls	r2, r3, #22
 80056c8:	d402      	bmi.n	80056d0 <_vfiprintf_r+0x220>
 80056ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056cc:	f7ff fd80 	bl	80051d0 <__retarget_lock_release_recursive>
 80056d0:	89ab      	ldrh	r3, [r5, #12]
 80056d2:	065b      	lsls	r3, r3, #25
 80056d4:	f53f af12 	bmi.w	80054fc <_vfiprintf_r+0x4c>
 80056d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056da:	e711      	b.n	8005500 <_vfiprintf_r+0x50>
 80056dc:	ab03      	add	r3, sp, #12
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	462a      	mov	r2, r5
 80056e2:	4b09      	ldr	r3, [pc, #36]	; (8005708 <_vfiprintf_r+0x258>)
 80056e4:	a904      	add	r1, sp, #16
 80056e6:	4630      	mov	r0, r6
 80056e8:	f000 f880 	bl	80057ec <_printf_i>
 80056ec:	e7e4      	b.n	80056b8 <_vfiprintf_r+0x208>
 80056ee:	bf00      	nop
 80056f0:	08007014 	.word	0x08007014
 80056f4:	08007034 	.word	0x08007034
 80056f8:	08006ff4 	.word	0x08006ff4
 80056fc:	08007054 	.word	0x08007054
 8005700:	0800705e 	.word	0x0800705e
 8005704:	00000000 	.word	0x00000000
 8005708:	0800548b 	.word	0x0800548b
 800570c:	0800705a 	.word	0x0800705a

08005710 <_printf_common>:
 8005710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005714:	4616      	mov	r6, r2
 8005716:	4699      	mov	r9, r3
 8005718:	688a      	ldr	r2, [r1, #8]
 800571a:	690b      	ldr	r3, [r1, #16]
 800571c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005720:	4293      	cmp	r3, r2
 8005722:	bfb8      	it	lt
 8005724:	4613      	movlt	r3, r2
 8005726:	6033      	str	r3, [r6, #0]
 8005728:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800572c:	4607      	mov	r7, r0
 800572e:	460c      	mov	r4, r1
 8005730:	b10a      	cbz	r2, 8005736 <_printf_common+0x26>
 8005732:	3301      	adds	r3, #1
 8005734:	6033      	str	r3, [r6, #0]
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	0699      	lsls	r1, r3, #26
 800573a:	bf42      	ittt	mi
 800573c:	6833      	ldrmi	r3, [r6, #0]
 800573e:	3302      	addmi	r3, #2
 8005740:	6033      	strmi	r3, [r6, #0]
 8005742:	6825      	ldr	r5, [r4, #0]
 8005744:	f015 0506 	ands.w	r5, r5, #6
 8005748:	d106      	bne.n	8005758 <_printf_common+0x48>
 800574a:	f104 0a19 	add.w	sl, r4, #25
 800574e:	68e3      	ldr	r3, [r4, #12]
 8005750:	6832      	ldr	r2, [r6, #0]
 8005752:	1a9b      	subs	r3, r3, r2
 8005754:	42ab      	cmp	r3, r5
 8005756:	dc26      	bgt.n	80057a6 <_printf_common+0x96>
 8005758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800575c:	1e13      	subs	r3, r2, #0
 800575e:	6822      	ldr	r2, [r4, #0]
 8005760:	bf18      	it	ne
 8005762:	2301      	movne	r3, #1
 8005764:	0692      	lsls	r2, r2, #26
 8005766:	d42b      	bmi.n	80057c0 <_printf_common+0xb0>
 8005768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800576c:	4649      	mov	r1, r9
 800576e:	4638      	mov	r0, r7
 8005770:	47c0      	blx	r8
 8005772:	3001      	adds	r0, #1
 8005774:	d01e      	beq.n	80057b4 <_printf_common+0xa4>
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	68e5      	ldr	r5, [r4, #12]
 800577a:	6832      	ldr	r2, [r6, #0]
 800577c:	f003 0306 	and.w	r3, r3, #6
 8005780:	2b04      	cmp	r3, #4
 8005782:	bf08      	it	eq
 8005784:	1aad      	subeq	r5, r5, r2
 8005786:	68a3      	ldr	r3, [r4, #8]
 8005788:	6922      	ldr	r2, [r4, #16]
 800578a:	bf0c      	ite	eq
 800578c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005790:	2500      	movne	r5, #0
 8005792:	4293      	cmp	r3, r2
 8005794:	bfc4      	itt	gt
 8005796:	1a9b      	subgt	r3, r3, r2
 8005798:	18ed      	addgt	r5, r5, r3
 800579a:	2600      	movs	r6, #0
 800579c:	341a      	adds	r4, #26
 800579e:	42b5      	cmp	r5, r6
 80057a0:	d11a      	bne.n	80057d8 <_printf_common+0xc8>
 80057a2:	2000      	movs	r0, #0
 80057a4:	e008      	b.n	80057b8 <_printf_common+0xa8>
 80057a6:	2301      	movs	r3, #1
 80057a8:	4652      	mov	r2, sl
 80057aa:	4649      	mov	r1, r9
 80057ac:	4638      	mov	r0, r7
 80057ae:	47c0      	blx	r8
 80057b0:	3001      	adds	r0, #1
 80057b2:	d103      	bne.n	80057bc <_printf_common+0xac>
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057bc:	3501      	adds	r5, #1
 80057be:	e7c6      	b.n	800574e <_printf_common+0x3e>
 80057c0:	18e1      	adds	r1, r4, r3
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	2030      	movs	r0, #48	; 0x30
 80057c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057ca:	4422      	add	r2, r4
 80057cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057d4:	3302      	adds	r3, #2
 80057d6:	e7c7      	b.n	8005768 <_printf_common+0x58>
 80057d8:	2301      	movs	r3, #1
 80057da:	4622      	mov	r2, r4
 80057dc:	4649      	mov	r1, r9
 80057de:	4638      	mov	r0, r7
 80057e0:	47c0      	blx	r8
 80057e2:	3001      	adds	r0, #1
 80057e4:	d0e6      	beq.n	80057b4 <_printf_common+0xa4>
 80057e6:	3601      	adds	r6, #1
 80057e8:	e7d9      	b.n	800579e <_printf_common+0x8e>
	...

080057ec <_printf_i>:
 80057ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057f0:	7e0f      	ldrb	r7, [r1, #24]
 80057f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057f4:	2f78      	cmp	r7, #120	; 0x78
 80057f6:	4691      	mov	r9, r2
 80057f8:	4680      	mov	r8, r0
 80057fa:	460c      	mov	r4, r1
 80057fc:	469a      	mov	sl, r3
 80057fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005802:	d807      	bhi.n	8005814 <_printf_i+0x28>
 8005804:	2f62      	cmp	r7, #98	; 0x62
 8005806:	d80a      	bhi.n	800581e <_printf_i+0x32>
 8005808:	2f00      	cmp	r7, #0
 800580a:	f000 80d8 	beq.w	80059be <_printf_i+0x1d2>
 800580e:	2f58      	cmp	r7, #88	; 0x58
 8005810:	f000 80a3 	beq.w	800595a <_printf_i+0x16e>
 8005814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800581c:	e03a      	b.n	8005894 <_printf_i+0xa8>
 800581e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005822:	2b15      	cmp	r3, #21
 8005824:	d8f6      	bhi.n	8005814 <_printf_i+0x28>
 8005826:	a101      	add	r1, pc, #4	; (adr r1, 800582c <_printf_i+0x40>)
 8005828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800582c:	08005885 	.word	0x08005885
 8005830:	08005899 	.word	0x08005899
 8005834:	08005815 	.word	0x08005815
 8005838:	08005815 	.word	0x08005815
 800583c:	08005815 	.word	0x08005815
 8005840:	08005815 	.word	0x08005815
 8005844:	08005899 	.word	0x08005899
 8005848:	08005815 	.word	0x08005815
 800584c:	08005815 	.word	0x08005815
 8005850:	08005815 	.word	0x08005815
 8005854:	08005815 	.word	0x08005815
 8005858:	080059a5 	.word	0x080059a5
 800585c:	080058c9 	.word	0x080058c9
 8005860:	08005987 	.word	0x08005987
 8005864:	08005815 	.word	0x08005815
 8005868:	08005815 	.word	0x08005815
 800586c:	080059c7 	.word	0x080059c7
 8005870:	08005815 	.word	0x08005815
 8005874:	080058c9 	.word	0x080058c9
 8005878:	08005815 	.word	0x08005815
 800587c:	08005815 	.word	0x08005815
 8005880:	0800598f 	.word	0x0800598f
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	1d1a      	adds	r2, r3, #4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	602a      	str	r2, [r5, #0]
 800588c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005894:	2301      	movs	r3, #1
 8005896:	e0a3      	b.n	80059e0 <_printf_i+0x1f4>
 8005898:	6820      	ldr	r0, [r4, #0]
 800589a:	6829      	ldr	r1, [r5, #0]
 800589c:	0606      	lsls	r6, r0, #24
 800589e:	f101 0304 	add.w	r3, r1, #4
 80058a2:	d50a      	bpl.n	80058ba <_printf_i+0xce>
 80058a4:	680e      	ldr	r6, [r1, #0]
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	2e00      	cmp	r6, #0
 80058aa:	da03      	bge.n	80058b4 <_printf_i+0xc8>
 80058ac:	232d      	movs	r3, #45	; 0x2d
 80058ae:	4276      	negs	r6, r6
 80058b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058b4:	485e      	ldr	r0, [pc, #376]	; (8005a30 <_printf_i+0x244>)
 80058b6:	230a      	movs	r3, #10
 80058b8:	e019      	b.n	80058ee <_printf_i+0x102>
 80058ba:	680e      	ldr	r6, [r1, #0]
 80058bc:	602b      	str	r3, [r5, #0]
 80058be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058c2:	bf18      	it	ne
 80058c4:	b236      	sxthne	r6, r6
 80058c6:	e7ef      	b.n	80058a8 <_printf_i+0xbc>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	6820      	ldr	r0, [r4, #0]
 80058cc:	1d19      	adds	r1, r3, #4
 80058ce:	6029      	str	r1, [r5, #0]
 80058d0:	0601      	lsls	r1, r0, #24
 80058d2:	d501      	bpl.n	80058d8 <_printf_i+0xec>
 80058d4:	681e      	ldr	r6, [r3, #0]
 80058d6:	e002      	b.n	80058de <_printf_i+0xf2>
 80058d8:	0646      	lsls	r6, r0, #25
 80058da:	d5fb      	bpl.n	80058d4 <_printf_i+0xe8>
 80058dc:	881e      	ldrh	r6, [r3, #0]
 80058de:	4854      	ldr	r0, [pc, #336]	; (8005a30 <_printf_i+0x244>)
 80058e0:	2f6f      	cmp	r7, #111	; 0x6f
 80058e2:	bf0c      	ite	eq
 80058e4:	2308      	moveq	r3, #8
 80058e6:	230a      	movne	r3, #10
 80058e8:	2100      	movs	r1, #0
 80058ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058ee:	6865      	ldr	r5, [r4, #4]
 80058f0:	60a5      	str	r5, [r4, #8]
 80058f2:	2d00      	cmp	r5, #0
 80058f4:	bfa2      	ittt	ge
 80058f6:	6821      	ldrge	r1, [r4, #0]
 80058f8:	f021 0104 	bicge.w	r1, r1, #4
 80058fc:	6021      	strge	r1, [r4, #0]
 80058fe:	b90e      	cbnz	r6, 8005904 <_printf_i+0x118>
 8005900:	2d00      	cmp	r5, #0
 8005902:	d04d      	beq.n	80059a0 <_printf_i+0x1b4>
 8005904:	4615      	mov	r5, r2
 8005906:	fbb6 f1f3 	udiv	r1, r6, r3
 800590a:	fb03 6711 	mls	r7, r3, r1, r6
 800590e:	5dc7      	ldrb	r7, [r0, r7]
 8005910:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005914:	4637      	mov	r7, r6
 8005916:	42bb      	cmp	r3, r7
 8005918:	460e      	mov	r6, r1
 800591a:	d9f4      	bls.n	8005906 <_printf_i+0x11a>
 800591c:	2b08      	cmp	r3, #8
 800591e:	d10b      	bne.n	8005938 <_printf_i+0x14c>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	07de      	lsls	r6, r3, #31
 8005924:	d508      	bpl.n	8005938 <_printf_i+0x14c>
 8005926:	6923      	ldr	r3, [r4, #16]
 8005928:	6861      	ldr	r1, [r4, #4]
 800592a:	4299      	cmp	r1, r3
 800592c:	bfde      	ittt	le
 800592e:	2330      	movle	r3, #48	; 0x30
 8005930:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005934:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005938:	1b52      	subs	r2, r2, r5
 800593a:	6122      	str	r2, [r4, #16]
 800593c:	f8cd a000 	str.w	sl, [sp]
 8005940:	464b      	mov	r3, r9
 8005942:	aa03      	add	r2, sp, #12
 8005944:	4621      	mov	r1, r4
 8005946:	4640      	mov	r0, r8
 8005948:	f7ff fee2 	bl	8005710 <_printf_common>
 800594c:	3001      	adds	r0, #1
 800594e:	d14c      	bne.n	80059ea <_printf_i+0x1fe>
 8005950:	f04f 30ff 	mov.w	r0, #4294967295
 8005954:	b004      	add	sp, #16
 8005956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800595a:	4835      	ldr	r0, [pc, #212]	; (8005a30 <_printf_i+0x244>)
 800595c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005960:	6829      	ldr	r1, [r5, #0]
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	f851 6b04 	ldr.w	r6, [r1], #4
 8005968:	6029      	str	r1, [r5, #0]
 800596a:	061d      	lsls	r5, r3, #24
 800596c:	d514      	bpl.n	8005998 <_printf_i+0x1ac>
 800596e:	07df      	lsls	r7, r3, #31
 8005970:	bf44      	itt	mi
 8005972:	f043 0320 	orrmi.w	r3, r3, #32
 8005976:	6023      	strmi	r3, [r4, #0]
 8005978:	b91e      	cbnz	r6, 8005982 <_printf_i+0x196>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	f023 0320 	bic.w	r3, r3, #32
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	2310      	movs	r3, #16
 8005984:	e7b0      	b.n	80058e8 <_printf_i+0xfc>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	f043 0320 	orr.w	r3, r3, #32
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	2378      	movs	r3, #120	; 0x78
 8005990:	4828      	ldr	r0, [pc, #160]	; (8005a34 <_printf_i+0x248>)
 8005992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005996:	e7e3      	b.n	8005960 <_printf_i+0x174>
 8005998:	0659      	lsls	r1, r3, #25
 800599a:	bf48      	it	mi
 800599c:	b2b6      	uxthmi	r6, r6
 800599e:	e7e6      	b.n	800596e <_printf_i+0x182>
 80059a0:	4615      	mov	r5, r2
 80059a2:	e7bb      	b.n	800591c <_printf_i+0x130>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	6826      	ldr	r6, [r4, #0]
 80059a8:	6961      	ldr	r1, [r4, #20]
 80059aa:	1d18      	adds	r0, r3, #4
 80059ac:	6028      	str	r0, [r5, #0]
 80059ae:	0635      	lsls	r5, r6, #24
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	d501      	bpl.n	80059b8 <_printf_i+0x1cc>
 80059b4:	6019      	str	r1, [r3, #0]
 80059b6:	e002      	b.n	80059be <_printf_i+0x1d2>
 80059b8:	0670      	lsls	r0, r6, #25
 80059ba:	d5fb      	bpl.n	80059b4 <_printf_i+0x1c8>
 80059bc:	8019      	strh	r1, [r3, #0]
 80059be:	2300      	movs	r3, #0
 80059c0:	6123      	str	r3, [r4, #16]
 80059c2:	4615      	mov	r5, r2
 80059c4:	e7ba      	b.n	800593c <_printf_i+0x150>
 80059c6:	682b      	ldr	r3, [r5, #0]
 80059c8:	1d1a      	adds	r2, r3, #4
 80059ca:	602a      	str	r2, [r5, #0]
 80059cc:	681d      	ldr	r5, [r3, #0]
 80059ce:	6862      	ldr	r2, [r4, #4]
 80059d0:	2100      	movs	r1, #0
 80059d2:	4628      	mov	r0, r5
 80059d4:	f7fa fc0c 	bl	80001f0 <memchr>
 80059d8:	b108      	cbz	r0, 80059de <_printf_i+0x1f2>
 80059da:	1b40      	subs	r0, r0, r5
 80059dc:	6060      	str	r0, [r4, #4]
 80059de:	6863      	ldr	r3, [r4, #4]
 80059e0:	6123      	str	r3, [r4, #16]
 80059e2:	2300      	movs	r3, #0
 80059e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059e8:	e7a8      	b.n	800593c <_printf_i+0x150>
 80059ea:	6923      	ldr	r3, [r4, #16]
 80059ec:	462a      	mov	r2, r5
 80059ee:	4649      	mov	r1, r9
 80059f0:	4640      	mov	r0, r8
 80059f2:	47d0      	blx	sl
 80059f4:	3001      	adds	r0, #1
 80059f6:	d0ab      	beq.n	8005950 <_printf_i+0x164>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	079b      	lsls	r3, r3, #30
 80059fc:	d413      	bmi.n	8005a26 <_printf_i+0x23a>
 80059fe:	68e0      	ldr	r0, [r4, #12]
 8005a00:	9b03      	ldr	r3, [sp, #12]
 8005a02:	4298      	cmp	r0, r3
 8005a04:	bfb8      	it	lt
 8005a06:	4618      	movlt	r0, r3
 8005a08:	e7a4      	b.n	8005954 <_printf_i+0x168>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	4649      	mov	r1, r9
 8005a10:	4640      	mov	r0, r8
 8005a12:	47d0      	blx	sl
 8005a14:	3001      	adds	r0, #1
 8005a16:	d09b      	beq.n	8005950 <_printf_i+0x164>
 8005a18:	3501      	adds	r5, #1
 8005a1a:	68e3      	ldr	r3, [r4, #12]
 8005a1c:	9903      	ldr	r1, [sp, #12]
 8005a1e:	1a5b      	subs	r3, r3, r1
 8005a20:	42ab      	cmp	r3, r5
 8005a22:	dcf2      	bgt.n	8005a0a <_printf_i+0x21e>
 8005a24:	e7eb      	b.n	80059fe <_printf_i+0x212>
 8005a26:	2500      	movs	r5, #0
 8005a28:	f104 0619 	add.w	r6, r4, #25
 8005a2c:	e7f5      	b.n	8005a1a <_printf_i+0x22e>
 8005a2e:	bf00      	nop
 8005a30:	08007065 	.word	0x08007065
 8005a34:	08007076 	.word	0x08007076

08005a38 <__svfiscanf_r>:
 8005a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a3c:	461d      	mov	r5, r3
 8005a3e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8005a40:	07df      	lsls	r7, r3, #31
 8005a42:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005a46:	4606      	mov	r6, r0
 8005a48:	460c      	mov	r4, r1
 8005a4a:	4692      	mov	sl, r2
 8005a4c:	d405      	bmi.n	8005a5a <__svfiscanf_r+0x22>
 8005a4e:	898b      	ldrh	r3, [r1, #12]
 8005a50:	0598      	lsls	r0, r3, #22
 8005a52:	d402      	bmi.n	8005a5a <__svfiscanf_r+0x22>
 8005a54:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8005a56:	f7ff fbba 	bl	80051ce <__retarget_lock_acquire_recursive>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8005a60:	4ba6      	ldr	r3, [pc, #664]	; (8005cfc <__svfiscanf_r+0x2c4>)
 8005a62:	93a0      	str	r3, [sp, #640]	; 0x280
 8005a64:	f10d 0804 	add.w	r8, sp, #4
 8005a68:	4ba5      	ldr	r3, [pc, #660]	; (8005d00 <__svfiscanf_r+0x2c8>)
 8005a6a:	4fa6      	ldr	r7, [pc, #664]	; (8005d04 <__svfiscanf_r+0x2cc>)
 8005a6c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005d08 <__svfiscanf_r+0x2d0>
 8005a70:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005a74:	93a1      	str	r3, [sp, #644]	; 0x284
 8005a76:	9500      	str	r5, [sp, #0]
 8005a78:	f89a 3000 	ldrb.w	r3, [sl]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 8173 	beq.w	8005d68 <__svfiscanf_r+0x330>
 8005a82:	5dd9      	ldrb	r1, [r3, r7]
 8005a84:	f011 0108 	ands.w	r1, r1, #8
 8005a88:	f10a 0501 	add.w	r5, sl, #1
 8005a8c:	d019      	beq.n	8005ac2 <__svfiscanf_r+0x8a>
 8005a8e:	6863      	ldr	r3, [r4, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	dd0f      	ble.n	8005ab4 <__svfiscanf_r+0x7c>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	781a      	ldrb	r2, [r3, #0]
 8005a98:	5cba      	ldrb	r2, [r7, r2]
 8005a9a:	0711      	lsls	r1, r2, #28
 8005a9c:	d401      	bmi.n	8005aa2 <__svfiscanf_r+0x6a>
 8005a9e:	46aa      	mov	sl, r5
 8005aa0:	e7ea      	b.n	8005a78 <__svfiscanf_r+0x40>
 8005aa2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005aa4:	3201      	adds	r2, #1
 8005aa6:	9245      	str	r2, [sp, #276]	; 0x114
 8005aa8:	6862      	ldr	r2, [r4, #4]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	3a01      	subs	r2, #1
 8005aae:	6062      	str	r2, [r4, #4]
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	e7ec      	b.n	8005a8e <__svfiscanf_r+0x56>
 8005ab4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4630      	mov	r0, r6
 8005aba:	4798      	blx	r3
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d0e9      	beq.n	8005a94 <__svfiscanf_r+0x5c>
 8005ac0:	e7ed      	b.n	8005a9e <__svfiscanf_r+0x66>
 8005ac2:	2b25      	cmp	r3, #37	; 0x25
 8005ac4:	d012      	beq.n	8005aec <__svfiscanf_r+0xb4>
 8005ac6:	469a      	mov	sl, r3
 8005ac8:	6863      	ldr	r3, [r4, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f340 8095 	ble.w	8005bfa <__svfiscanf_r+0x1c2>
 8005ad0:	6822      	ldr	r2, [r4, #0]
 8005ad2:	7813      	ldrb	r3, [r2, #0]
 8005ad4:	4553      	cmp	r3, sl
 8005ad6:	f040 8147 	bne.w	8005d68 <__svfiscanf_r+0x330>
 8005ada:	6863      	ldr	r3, [r4, #4]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	6063      	str	r3, [r4, #4]
 8005ae0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005ae2:	3201      	adds	r2, #1
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	6022      	str	r2, [r4, #0]
 8005ae8:	9345      	str	r3, [sp, #276]	; 0x114
 8005aea:	e7d8      	b.n	8005a9e <__svfiscanf_r+0x66>
 8005aec:	9141      	str	r1, [sp, #260]	; 0x104
 8005aee:	9143      	str	r1, [sp, #268]	; 0x10c
 8005af0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005af4:	2b2a      	cmp	r3, #42	; 0x2a
 8005af6:	bf02      	ittt	eq
 8005af8:	2310      	moveq	r3, #16
 8005afa:	9341      	streq	r3, [sp, #260]	; 0x104
 8005afc:	f10a 0502 	addeq.w	r5, sl, #2
 8005b00:	220a      	movs	r2, #10
 8005b02:	46aa      	mov	sl, r5
 8005b04:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005b08:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005b0c:	2b09      	cmp	r3, #9
 8005b0e:	d91e      	bls.n	8005b4e <__svfiscanf_r+0x116>
 8005b10:	487d      	ldr	r0, [pc, #500]	; (8005d08 <__svfiscanf_r+0x2d0>)
 8005b12:	2203      	movs	r2, #3
 8005b14:	f7fa fb6c 	bl	80001f0 <memchr>
 8005b18:	b140      	cbz	r0, 8005b2c <__svfiscanf_r+0xf4>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	eba0 0009 	sub.w	r0, r0, r9
 8005b20:	fa03 f000 	lsl.w	r0, r3, r0
 8005b24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005b26:	4318      	orrs	r0, r3
 8005b28:	9041      	str	r0, [sp, #260]	; 0x104
 8005b2a:	4655      	mov	r5, sl
 8005b2c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005b30:	2b78      	cmp	r3, #120	; 0x78
 8005b32:	d807      	bhi.n	8005b44 <__svfiscanf_r+0x10c>
 8005b34:	2b57      	cmp	r3, #87	; 0x57
 8005b36:	d811      	bhi.n	8005b5c <__svfiscanf_r+0x124>
 8005b38:	2b25      	cmp	r3, #37	; 0x25
 8005b3a:	d0c4      	beq.n	8005ac6 <__svfiscanf_r+0x8e>
 8005b3c:	d858      	bhi.n	8005bf0 <__svfiscanf_r+0x1b8>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80c8 	beq.w	8005cd4 <__svfiscanf_r+0x29c>
 8005b44:	2303      	movs	r3, #3
 8005b46:	9347      	str	r3, [sp, #284]	; 0x11c
 8005b48:	230a      	movs	r3, #10
 8005b4a:	9342      	str	r3, [sp, #264]	; 0x108
 8005b4c:	e07c      	b.n	8005c48 <__svfiscanf_r+0x210>
 8005b4e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005b50:	fb02 1103 	mla	r1, r2, r3, r1
 8005b54:	3930      	subs	r1, #48	; 0x30
 8005b56:	9143      	str	r1, [sp, #268]	; 0x10c
 8005b58:	4655      	mov	r5, sl
 8005b5a:	e7d2      	b.n	8005b02 <__svfiscanf_r+0xca>
 8005b5c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005b60:	2a20      	cmp	r2, #32
 8005b62:	d8ef      	bhi.n	8005b44 <__svfiscanf_r+0x10c>
 8005b64:	a101      	add	r1, pc, #4	; (adr r1, 8005b6c <__svfiscanf_r+0x134>)
 8005b66:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b6a:	bf00      	nop
 8005b6c:	08005c33 	.word	0x08005c33
 8005b70:	08005b45 	.word	0x08005b45
 8005b74:	08005b45 	.word	0x08005b45
 8005b78:	08005c91 	.word	0x08005c91
 8005b7c:	08005b45 	.word	0x08005b45
 8005b80:	08005b45 	.word	0x08005b45
 8005b84:	08005b45 	.word	0x08005b45
 8005b88:	08005b45 	.word	0x08005b45
 8005b8c:	08005b45 	.word	0x08005b45
 8005b90:	08005b45 	.word	0x08005b45
 8005b94:	08005b45 	.word	0x08005b45
 8005b98:	08005ca7 	.word	0x08005ca7
 8005b9c:	08005c7d 	.word	0x08005c7d
 8005ba0:	08005bf7 	.word	0x08005bf7
 8005ba4:	08005bf7 	.word	0x08005bf7
 8005ba8:	08005bf7 	.word	0x08005bf7
 8005bac:	08005b45 	.word	0x08005b45
 8005bb0:	08005c81 	.word	0x08005c81
 8005bb4:	08005b45 	.word	0x08005b45
 8005bb8:	08005b45 	.word	0x08005b45
 8005bbc:	08005b45 	.word	0x08005b45
 8005bc0:	08005b45 	.word	0x08005b45
 8005bc4:	08005cb7 	.word	0x08005cb7
 8005bc8:	08005c89 	.word	0x08005c89
 8005bcc:	08005c2b 	.word	0x08005c2b
 8005bd0:	08005b45 	.word	0x08005b45
 8005bd4:	08005b45 	.word	0x08005b45
 8005bd8:	08005cb3 	.word	0x08005cb3
 8005bdc:	08005b45 	.word	0x08005b45
 8005be0:	08005c7d 	.word	0x08005c7d
 8005be4:	08005b45 	.word	0x08005b45
 8005be8:	08005b45 	.word	0x08005b45
 8005bec:	08005c33 	.word	0x08005c33
 8005bf0:	3b45      	subs	r3, #69	; 0x45
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d8a6      	bhi.n	8005b44 <__svfiscanf_r+0x10c>
 8005bf6:	2305      	movs	r3, #5
 8005bf8:	e025      	b.n	8005c46 <__svfiscanf_r+0x20e>
 8005bfa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	4630      	mov	r0, r6
 8005c00:	4798      	blx	r3
 8005c02:	2800      	cmp	r0, #0
 8005c04:	f43f af64 	beq.w	8005ad0 <__svfiscanf_r+0x98>
 8005c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c0a:	07da      	lsls	r2, r3, #31
 8005c0c:	f140 80a4 	bpl.w	8005d58 <__svfiscanf_r+0x320>
 8005c10:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d067      	beq.n	8005ce6 <__svfiscanf_r+0x2ae>
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c1c:	bf18      	it	ne
 8005c1e:	f04f 30ff 	movne.w	r0, #4294967295
 8005c22:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005c2c:	f042 0220 	orr.w	r2, r2, #32
 8005c30:	9241      	str	r2, [sp, #260]	; 0x104
 8005c32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c38:	9241      	str	r2, [sp, #260]	; 0x104
 8005c3a:	2210      	movs	r2, #16
 8005c3c:	2b6f      	cmp	r3, #111	; 0x6f
 8005c3e:	9242      	str	r2, [sp, #264]	; 0x108
 8005c40:	bf34      	ite	cc
 8005c42:	2303      	movcc	r3, #3
 8005c44:	2304      	movcs	r3, #4
 8005c46:	9347      	str	r3, [sp, #284]	; 0x11c
 8005c48:	6863      	ldr	r3, [r4, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	dd4e      	ble.n	8005cec <__svfiscanf_r+0x2b4>
 8005c4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005c50:	065b      	lsls	r3, r3, #25
 8005c52:	d404      	bmi.n	8005c5e <__svfiscanf_r+0x226>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	781a      	ldrb	r2, [r3, #0]
 8005c58:	5cba      	ldrb	r2, [r7, r2]
 8005c5a:	0710      	lsls	r0, r2, #28
 8005c5c:	d456      	bmi.n	8005d0c <__svfiscanf_r+0x2d4>
 8005c5e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	dc65      	bgt.n	8005d30 <__svfiscanf_r+0x2f8>
 8005c64:	466b      	mov	r3, sp
 8005c66:	4622      	mov	r2, r4
 8005c68:	a941      	add	r1, sp, #260	; 0x104
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f000 f8b2 	bl	8005dd4 <_scanf_chars>
 8005c70:	2801      	cmp	r0, #1
 8005c72:	d079      	beq.n	8005d68 <__svfiscanf_r+0x330>
 8005c74:	2802      	cmp	r0, #2
 8005c76:	f47f af12 	bne.w	8005a9e <__svfiscanf_r+0x66>
 8005c7a:	e7c5      	b.n	8005c08 <__svfiscanf_r+0x1d0>
 8005c7c:	220a      	movs	r2, #10
 8005c7e:	e7dd      	b.n	8005c3c <__svfiscanf_r+0x204>
 8005c80:	2300      	movs	r3, #0
 8005c82:	9342      	str	r3, [sp, #264]	; 0x108
 8005c84:	2303      	movs	r3, #3
 8005c86:	e7de      	b.n	8005c46 <__svfiscanf_r+0x20e>
 8005c88:	2308      	movs	r3, #8
 8005c8a:	9342      	str	r3, [sp, #264]	; 0x108
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	e7da      	b.n	8005c46 <__svfiscanf_r+0x20e>
 8005c90:	4629      	mov	r1, r5
 8005c92:	4640      	mov	r0, r8
 8005c94:	f000 fadc 	bl	8006250 <__sccl>
 8005c98:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c9e:	9341      	str	r3, [sp, #260]	; 0x104
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e7cf      	b.n	8005c46 <__svfiscanf_r+0x20e>
 8005ca6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cac:	9341      	str	r3, [sp, #260]	; 0x104
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e7c9      	b.n	8005c46 <__svfiscanf_r+0x20e>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e7c7      	b.n	8005c46 <__svfiscanf_r+0x20e>
 8005cb6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005cb8:	06c3      	lsls	r3, r0, #27
 8005cba:	f53f aef0 	bmi.w	8005a9e <__svfiscanf_r+0x66>
 8005cbe:	9b00      	ldr	r3, [sp, #0]
 8005cc0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005cc2:	1d19      	adds	r1, r3, #4
 8005cc4:	9100      	str	r1, [sp, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f010 0f01 	tst.w	r0, #1
 8005ccc:	bf14      	ite	ne
 8005cce:	801a      	strhne	r2, [r3, #0]
 8005cd0:	601a      	streq	r2, [r3, #0]
 8005cd2:	e6e4      	b.n	8005a9e <__svfiscanf_r+0x66>
 8005cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cd6:	07d8      	lsls	r0, r3, #31
 8005cd8:	d405      	bmi.n	8005ce6 <__svfiscanf_r+0x2ae>
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	0599      	lsls	r1, r3, #22
 8005cde:	d402      	bmi.n	8005ce6 <__svfiscanf_r+0x2ae>
 8005ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ce2:	f7ff fa75 	bl	80051d0 <__retarget_lock_release_recursive>
 8005ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cea:	e79a      	b.n	8005c22 <__svfiscanf_r+0x1ea>
 8005cec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005cee:	4621      	mov	r1, r4
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	4798      	blx	r3
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d0aa      	beq.n	8005c4e <__svfiscanf_r+0x216>
 8005cf8:	e786      	b.n	8005c08 <__svfiscanf_r+0x1d0>
 8005cfa:	bf00      	nop
 8005cfc:	080065ad 	.word	0x080065ad
 8005d00:	0800611d 	.word	0x0800611d
 8005d04:	080070a3 	.word	0x080070a3
 8005d08:	0800705a 	.word	0x0800705a
 8005d0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005d0e:	3201      	adds	r2, #1
 8005d10:	9245      	str	r2, [sp, #276]	; 0x114
 8005d12:	6862      	ldr	r2, [r4, #4]
 8005d14:	3a01      	subs	r2, #1
 8005d16:	2a00      	cmp	r2, #0
 8005d18:	6062      	str	r2, [r4, #4]
 8005d1a:	dd02      	ble.n	8005d22 <__svfiscanf_r+0x2ea>
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	6023      	str	r3, [r4, #0]
 8005d20:	e798      	b.n	8005c54 <__svfiscanf_r+0x21c>
 8005d22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005d24:	4621      	mov	r1, r4
 8005d26:	4630      	mov	r0, r6
 8005d28:	4798      	blx	r3
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d092      	beq.n	8005c54 <__svfiscanf_r+0x21c>
 8005d2e:	e76b      	b.n	8005c08 <__svfiscanf_r+0x1d0>
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	dc06      	bgt.n	8005d42 <__svfiscanf_r+0x30a>
 8005d34:	466b      	mov	r3, sp
 8005d36:	4622      	mov	r2, r4
 8005d38:	a941      	add	r1, sp, #260	; 0x104
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f000 f8a4 	bl	8005e88 <_scanf_i>
 8005d40:	e796      	b.n	8005c70 <__svfiscanf_r+0x238>
 8005d42:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <__svfiscanf_r+0x348>)
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f43f aeaa 	beq.w	8005a9e <__svfiscanf_r+0x66>
 8005d4a:	466b      	mov	r3, sp
 8005d4c:	4622      	mov	r2, r4
 8005d4e:	a941      	add	r1, sp, #260	; 0x104
 8005d50:	4630      	mov	r0, r6
 8005d52:	f3af 8000 	nop.w
 8005d56:	e78b      	b.n	8005c70 <__svfiscanf_r+0x238>
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	0599      	lsls	r1, r3, #22
 8005d5c:	f53f af58 	bmi.w	8005c10 <__svfiscanf_r+0x1d8>
 8005d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d62:	f7ff fa35 	bl	80051d0 <__retarget_lock_release_recursive>
 8005d66:	e753      	b.n	8005c10 <__svfiscanf_r+0x1d8>
 8005d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d6a:	07da      	lsls	r2, r3, #31
 8005d6c:	d405      	bmi.n	8005d7a <__svfiscanf_r+0x342>
 8005d6e:	89a3      	ldrh	r3, [r4, #12]
 8005d70:	059b      	lsls	r3, r3, #22
 8005d72:	d402      	bmi.n	8005d7a <__svfiscanf_r+0x342>
 8005d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d76:	f7ff fa2b 	bl	80051d0 <__retarget_lock_release_recursive>
 8005d7a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005d7c:	e751      	b.n	8005c22 <__svfiscanf_r+0x1ea>
 8005d7e:	bf00      	nop
 8005d80:	00000000 	.word	0x00000000

08005d84 <_vfiscanf_r>:
 8005d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d86:	460c      	mov	r4, r1
 8005d88:	4605      	mov	r5, r0
 8005d8a:	b138      	cbz	r0, 8005d9c <_vfiscanf_r+0x18>
 8005d8c:	6981      	ldr	r1, [r0, #24]
 8005d8e:	b929      	cbnz	r1, 8005d9c <_vfiscanf_r+0x18>
 8005d90:	e9cd 2300 	strd	r2, r3, [sp]
 8005d94:	f7ff f960 	bl	8005058 <__sinit>
 8005d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d9c:	490a      	ldr	r1, [pc, #40]	; (8005dc8 <_vfiscanf_r+0x44>)
 8005d9e:	428c      	cmp	r4, r1
 8005da0:	d107      	bne.n	8005db2 <_vfiscanf_r+0x2e>
 8005da2:	686c      	ldr	r4, [r5, #4]
 8005da4:	4621      	mov	r1, r4
 8005da6:	4628      	mov	r0, r5
 8005da8:	b003      	add	sp, #12
 8005daa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dae:	f7ff be43 	b.w	8005a38 <__svfiscanf_r>
 8005db2:	4906      	ldr	r1, [pc, #24]	; (8005dcc <_vfiscanf_r+0x48>)
 8005db4:	428c      	cmp	r4, r1
 8005db6:	d101      	bne.n	8005dbc <_vfiscanf_r+0x38>
 8005db8:	68ac      	ldr	r4, [r5, #8]
 8005dba:	e7f3      	b.n	8005da4 <_vfiscanf_r+0x20>
 8005dbc:	4904      	ldr	r1, [pc, #16]	; (8005dd0 <_vfiscanf_r+0x4c>)
 8005dbe:	428c      	cmp	r4, r1
 8005dc0:	bf08      	it	eq
 8005dc2:	68ec      	ldreq	r4, [r5, #12]
 8005dc4:	e7ee      	b.n	8005da4 <_vfiscanf_r+0x20>
 8005dc6:	bf00      	nop
 8005dc8:	08007014 	.word	0x08007014
 8005dcc:	08007034 	.word	0x08007034
 8005dd0:	08006ff4 	.word	0x08006ff4

08005dd4 <_scanf_chars>:
 8005dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dd8:	4615      	mov	r5, r2
 8005dda:	688a      	ldr	r2, [r1, #8]
 8005ddc:	4680      	mov	r8, r0
 8005dde:	460c      	mov	r4, r1
 8005de0:	b932      	cbnz	r2, 8005df0 <_scanf_chars+0x1c>
 8005de2:	698a      	ldr	r2, [r1, #24]
 8005de4:	2a00      	cmp	r2, #0
 8005de6:	bf0c      	ite	eq
 8005de8:	2201      	moveq	r2, #1
 8005dea:	f04f 32ff 	movne.w	r2, #4294967295
 8005dee:	608a      	str	r2, [r1, #8]
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005e84 <_scanf_chars+0xb0>
 8005df6:	06d1      	lsls	r1, r2, #27
 8005df8:	bf5f      	itttt	pl
 8005dfa:	681a      	ldrpl	r2, [r3, #0]
 8005dfc:	1d11      	addpl	r1, r2, #4
 8005dfe:	6019      	strpl	r1, [r3, #0]
 8005e00:	6816      	ldrpl	r6, [r2, #0]
 8005e02:	2700      	movs	r7, #0
 8005e04:	69a0      	ldr	r0, [r4, #24]
 8005e06:	b188      	cbz	r0, 8005e2c <_scanf_chars+0x58>
 8005e08:	2801      	cmp	r0, #1
 8005e0a:	d107      	bne.n	8005e1c <_scanf_chars+0x48>
 8005e0c:	682a      	ldr	r2, [r5, #0]
 8005e0e:	7811      	ldrb	r1, [r2, #0]
 8005e10:	6962      	ldr	r2, [r4, #20]
 8005e12:	5c52      	ldrb	r2, [r2, r1]
 8005e14:	b952      	cbnz	r2, 8005e2c <_scanf_chars+0x58>
 8005e16:	2f00      	cmp	r7, #0
 8005e18:	d031      	beq.n	8005e7e <_scanf_chars+0xaa>
 8005e1a:	e022      	b.n	8005e62 <_scanf_chars+0x8e>
 8005e1c:	2802      	cmp	r0, #2
 8005e1e:	d120      	bne.n	8005e62 <_scanf_chars+0x8e>
 8005e20:	682b      	ldr	r3, [r5, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005e28:	071b      	lsls	r3, r3, #28
 8005e2a:	d41a      	bmi.n	8005e62 <_scanf_chars+0x8e>
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	06da      	lsls	r2, r3, #27
 8005e30:	bf5e      	ittt	pl
 8005e32:	682b      	ldrpl	r3, [r5, #0]
 8005e34:	781b      	ldrbpl	r3, [r3, #0]
 8005e36:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005e3a:	682a      	ldr	r2, [r5, #0]
 8005e3c:	686b      	ldr	r3, [r5, #4]
 8005e3e:	3201      	adds	r2, #1
 8005e40:	602a      	str	r2, [r5, #0]
 8005e42:	68a2      	ldr	r2, [r4, #8]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	3a01      	subs	r2, #1
 8005e48:	606b      	str	r3, [r5, #4]
 8005e4a:	3701      	adds	r7, #1
 8005e4c:	60a2      	str	r2, [r4, #8]
 8005e4e:	b142      	cbz	r2, 8005e62 <_scanf_chars+0x8e>
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	dcd7      	bgt.n	8005e04 <_scanf_chars+0x30>
 8005e54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005e58:	4629      	mov	r1, r5
 8005e5a:	4640      	mov	r0, r8
 8005e5c:	4798      	blx	r3
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	d0d0      	beq.n	8005e04 <_scanf_chars+0x30>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	f013 0310 	ands.w	r3, r3, #16
 8005e68:	d105      	bne.n	8005e76 <_scanf_chars+0xa2>
 8005e6a:	68e2      	ldr	r2, [r4, #12]
 8005e6c:	3201      	adds	r2, #1
 8005e6e:	60e2      	str	r2, [r4, #12]
 8005e70:	69a2      	ldr	r2, [r4, #24]
 8005e72:	b102      	cbz	r2, 8005e76 <_scanf_chars+0xa2>
 8005e74:	7033      	strb	r3, [r6, #0]
 8005e76:	6923      	ldr	r3, [r4, #16]
 8005e78:	443b      	add	r3, r7
 8005e7a:	6123      	str	r3, [r4, #16]
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e82:	bf00      	nop
 8005e84:	080070a3 	.word	0x080070a3

08005e88 <_scanf_i>:
 8005e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	4698      	mov	r8, r3
 8005e8e:	4b76      	ldr	r3, [pc, #472]	; (8006068 <_scanf_i+0x1e0>)
 8005e90:	460c      	mov	r4, r1
 8005e92:	4682      	mov	sl, r0
 8005e94:	4616      	mov	r6, r2
 8005e96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	ab03      	add	r3, sp, #12
 8005e9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005ea2:	4b72      	ldr	r3, [pc, #456]	; (800606c <_scanf_i+0x1e4>)
 8005ea4:	69a1      	ldr	r1, [r4, #24]
 8005ea6:	4a72      	ldr	r2, [pc, #456]	; (8006070 <_scanf_i+0x1e8>)
 8005ea8:	2903      	cmp	r1, #3
 8005eaa:	bf18      	it	ne
 8005eac:	461a      	movne	r2, r3
 8005eae:	68a3      	ldr	r3, [r4, #8]
 8005eb0:	9201      	str	r2, [sp, #4]
 8005eb2:	1e5a      	subs	r2, r3, #1
 8005eb4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005eb8:	bf88      	it	hi
 8005eba:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005ebe:	4627      	mov	r7, r4
 8005ec0:	bf82      	ittt	hi
 8005ec2:	eb03 0905 	addhi.w	r9, r3, r5
 8005ec6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005eca:	60a3      	strhi	r3, [r4, #8]
 8005ecc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005ed0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005ed4:	bf98      	it	ls
 8005ed6:	f04f 0900 	movls.w	r9, #0
 8005eda:	6023      	str	r3, [r4, #0]
 8005edc:	463d      	mov	r5, r7
 8005ede:	f04f 0b00 	mov.w	fp, #0
 8005ee2:	6831      	ldr	r1, [r6, #0]
 8005ee4:	ab03      	add	r3, sp, #12
 8005ee6:	7809      	ldrb	r1, [r1, #0]
 8005ee8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005eec:	2202      	movs	r2, #2
 8005eee:	f7fa f97f 	bl	80001f0 <memchr>
 8005ef2:	b328      	cbz	r0, 8005f40 <_scanf_i+0xb8>
 8005ef4:	f1bb 0f01 	cmp.w	fp, #1
 8005ef8:	d159      	bne.n	8005fae <_scanf_i+0x126>
 8005efa:	6862      	ldr	r2, [r4, #4]
 8005efc:	b92a      	cbnz	r2, 8005f0a <_scanf_i+0x82>
 8005efe:	6822      	ldr	r2, [r4, #0]
 8005f00:	2308      	movs	r3, #8
 8005f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f06:	6063      	str	r3, [r4, #4]
 8005f08:	6022      	str	r2, [r4, #0]
 8005f0a:	6822      	ldr	r2, [r4, #0]
 8005f0c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005f10:	6022      	str	r2, [r4, #0]
 8005f12:	68a2      	ldr	r2, [r4, #8]
 8005f14:	1e51      	subs	r1, r2, #1
 8005f16:	60a1      	str	r1, [r4, #8]
 8005f18:	b192      	cbz	r2, 8005f40 <_scanf_i+0xb8>
 8005f1a:	6832      	ldr	r2, [r6, #0]
 8005f1c:	1c51      	adds	r1, r2, #1
 8005f1e:	6031      	str	r1, [r6, #0]
 8005f20:	7812      	ldrb	r2, [r2, #0]
 8005f22:	f805 2b01 	strb.w	r2, [r5], #1
 8005f26:	6872      	ldr	r2, [r6, #4]
 8005f28:	3a01      	subs	r2, #1
 8005f2a:	2a00      	cmp	r2, #0
 8005f2c:	6072      	str	r2, [r6, #4]
 8005f2e:	dc07      	bgt.n	8005f40 <_scanf_i+0xb8>
 8005f30:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005f34:	4631      	mov	r1, r6
 8005f36:	4650      	mov	r0, sl
 8005f38:	4790      	blx	r2
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	f040 8085 	bne.w	800604a <_scanf_i+0x1c2>
 8005f40:	f10b 0b01 	add.w	fp, fp, #1
 8005f44:	f1bb 0f03 	cmp.w	fp, #3
 8005f48:	d1cb      	bne.n	8005ee2 <_scanf_i+0x5a>
 8005f4a:	6863      	ldr	r3, [r4, #4]
 8005f4c:	b90b      	cbnz	r3, 8005f52 <_scanf_i+0xca>
 8005f4e:	230a      	movs	r3, #10
 8005f50:	6063      	str	r3, [r4, #4]
 8005f52:	6863      	ldr	r3, [r4, #4]
 8005f54:	4947      	ldr	r1, [pc, #284]	; (8006074 <_scanf_i+0x1ec>)
 8005f56:	6960      	ldr	r0, [r4, #20]
 8005f58:	1ac9      	subs	r1, r1, r3
 8005f5a:	f000 f979 	bl	8006250 <__sccl>
 8005f5e:	f04f 0b00 	mov.w	fp, #0
 8005f62:	68a3      	ldr	r3, [r4, #8]
 8005f64:	6822      	ldr	r2, [r4, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d03d      	beq.n	8005fe6 <_scanf_i+0x15e>
 8005f6a:	6831      	ldr	r1, [r6, #0]
 8005f6c:	6960      	ldr	r0, [r4, #20]
 8005f6e:	f891 c000 	ldrb.w	ip, [r1]
 8005f72:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005f76:	2800      	cmp	r0, #0
 8005f78:	d035      	beq.n	8005fe6 <_scanf_i+0x15e>
 8005f7a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005f7e:	d124      	bne.n	8005fca <_scanf_i+0x142>
 8005f80:	0510      	lsls	r0, r2, #20
 8005f82:	d522      	bpl.n	8005fca <_scanf_i+0x142>
 8005f84:	f10b 0b01 	add.w	fp, fp, #1
 8005f88:	f1b9 0f00 	cmp.w	r9, #0
 8005f8c:	d003      	beq.n	8005f96 <_scanf_i+0x10e>
 8005f8e:	3301      	adds	r3, #1
 8005f90:	f109 39ff 	add.w	r9, r9, #4294967295
 8005f94:	60a3      	str	r3, [r4, #8]
 8005f96:	6873      	ldr	r3, [r6, #4]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	6073      	str	r3, [r6, #4]
 8005f9e:	dd1b      	ble.n	8005fd8 <_scanf_i+0x150>
 8005fa0:	6833      	ldr	r3, [r6, #0]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	6033      	str	r3, [r6, #0]
 8005fa6:	68a3      	ldr	r3, [r4, #8]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	60a3      	str	r3, [r4, #8]
 8005fac:	e7d9      	b.n	8005f62 <_scanf_i+0xda>
 8005fae:	f1bb 0f02 	cmp.w	fp, #2
 8005fb2:	d1ae      	bne.n	8005f12 <_scanf_i+0x8a>
 8005fb4:	6822      	ldr	r2, [r4, #0]
 8005fb6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005fba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005fbe:	d1bf      	bne.n	8005f40 <_scanf_i+0xb8>
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	6063      	str	r3, [r4, #4]
 8005fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fc8:	e7a2      	b.n	8005f10 <_scanf_i+0x88>
 8005fca:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005fce:	6022      	str	r2, [r4, #0]
 8005fd0:	780b      	ldrb	r3, [r1, #0]
 8005fd2:	f805 3b01 	strb.w	r3, [r5], #1
 8005fd6:	e7de      	b.n	8005f96 <_scanf_i+0x10e>
 8005fd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4650      	mov	r0, sl
 8005fe0:	4798      	blx	r3
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d0df      	beq.n	8005fa6 <_scanf_i+0x11e>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	05db      	lsls	r3, r3, #23
 8005fea:	d50d      	bpl.n	8006008 <_scanf_i+0x180>
 8005fec:	42bd      	cmp	r5, r7
 8005fee:	d909      	bls.n	8006004 <_scanf_i+0x17c>
 8005ff0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005ff4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	4650      	mov	r0, sl
 8005ffc:	4798      	blx	r3
 8005ffe:	f105 39ff 	add.w	r9, r5, #4294967295
 8006002:	464d      	mov	r5, r9
 8006004:	42bd      	cmp	r5, r7
 8006006:	d02d      	beq.n	8006064 <_scanf_i+0x1dc>
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	f012 0210 	ands.w	r2, r2, #16
 800600e:	d113      	bne.n	8006038 <_scanf_i+0x1b0>
 8006010:	702a      	strb	r2, [r5, #0]
 8006012:	6863      	ldr	r3, [r4, #4]
 8006014:	9e01      	ldr	r6, [sp, #4]
 8006016:	4639      	mov	r1, r7
 8006018:	4650      	mov	r0, sl
 800601a:	47b0      	blx	r6
 800601c:	6821      	ldr	r1, [r4, #0]
 800601e:	f8d8 3000 	ldr.w	r3, [r8]
 8006022:	f011 0f20 	tst.w	r1, #32
 8006026:	d013      	beq.n	8006050 <_scanf_i+0x1c8>
 8006028:	1d1a      	adds	r2, r3, #4
 800602a:	f8c8 2000 	str.w	r2, [r8]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6018      	str	r0, [r3, #0]
 8006032:	68e3      	ldr	r3, [r4, #12]
 8006034:	3301      	adds	r3, #1
 8006036:	60e3      	str	r3, [r4, #12]
 8006038:	1bed      	subs	r5, r5, r7
 800603a:	44ab      	add	fp, r5
 800603c:	6925      	ldr	r5, [r4, #16]
 800603e:	445d      	add	r5, fp
 8006040:	6125      	str	r5, [r4, #16]
 8006042:	2000      	movs	r0, #0
 8006044:	b007      	add	sp, #28
 8006046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604a:	f04f 0b00 	mov.w	fp, #0
 800604e:	e7ca      	b.n	8005fe6 <_scanf_i+0x15e>
 8006050:	1d1a      	adds	r2, r3, #4
 8006052:	f8c8 2000 	str.w	r2, [r8]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f011 0f01 	tst.w	r1, #1
 800605c:	bf14      	ite	ne
 800605e:	8018      	strhne	r0, [r3, #0]
 8006060:	6018      	streq	r0, [r3, #0]
 8006062:	e7e6      	b.n	8006032 <_scanf_i+0x1aa>
 8006064:	2001      	movs	r0, #1
 8006066:	e7ed      	b.n	8006044 <_scanf_i+0x1bc>
 8006068:	08006f9c 	.word	0x08006f9c
 800606c:	08006535 	.word	0x08006535
 8006070:	0800644d 	.word	0x0800644d
 8006074:	080070a0 	.word	0x080070a0

08006078 <_putc_r>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	460d      	mov	r5, r1
 800607c:	4614      	mov	r4, r2
 800607e:	4606      	mov	r6, r0
 8006080:	b118      	cbz	r0, 800608a <_putc_r+0x12>
 8006082:	6983      	ldr	r3, [r0, #24]
 8006084:	b90b      	cbnz	r3, 800608a <_putc_r+0x12>
 8006086:	f7fe ffe7 	bl	8005058 <__sinit>
 800608a:	4b1c      	ldr	r3, [pc, #112]	; (80060fc <_putc_r+0x84>)
 800608c:	429c      	cmp	r4, r3
 800608e:	d124      	bne.n	80060da <_putc_r+0x62>
 8006090:	6874      	ldr	r4, [r6, #4]
 8006092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006094:	07d8      	lsls	r0, r3, #31
 8006096:	d405      	bmi.n	80060a4 <_putc_r+0x2c>
 8006098:	89a3      	ldrh	r3, [r4, #12]
 800609a:	0599      	lsls	r1, r3, #22
 800609c:	d402      	bmi.n	80060a4 <_putc_r+0x2c>
 800609e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060a0:	f7ff f895 	bl	80051ce <__retarget_lock_acquire_recursive>
 80060a4:	68a3      	ldr	r3, [r4, #8]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	60a3      	str	r3, [r4, #8]
 80060ac:	da05      	bge.n	80060ba <_putc_r+0x42>
 80060ae:	69a2      	ldr	r2, [r4, #24]
 80060b0:	4293      	cmp	r3, r2
 80060b2:	db1c      	blt.n	80060ee <_putc_r+0x76>
 80060b4:	b2eb      	uxtb	r3, r5
 80060b6:	2b0a      	cmp	r3, #10
 80060b8:	d019      	beq.n	80060ee <_putc_r+0x76>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	6022      	str	r2, [r4, #0]
 80060c0:	701d      	strb	r5, [r3, #0]
 80060c2:	b2ed      	uxtb	r5, r5
 80060c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060c6:	07da      	lsls	r2, r3, #31
 80060c8:	d405      	bmi.n	80060d6 <_putc_r+0x5e>
 80060ca:	89a3      	ldrh	r3, [r4, #12]
 80060cc:	059b      	lsls	r3, r3, #22
 80060ce:	d402      	bmi.n	80060d6 <_putc_r+0x5e>
 80060d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060d2:	f7ff f87d 	bl	80051d0 <__retarget_lock_release_recursive>
 80060d6:	4628      	mov	r0, r5
 80060d8:	bd70      	pop	{r4, r5, r6, pc}
 80060da:	4b09      	ldr	r3, [pc, #36]	; (8006100 <_putc_r+0x88>)
 80060dc:	429c      	cmp	r4, r3
 80060de:	d101      	bne.n	80060e4 <_putc_r+0x6c>
 80060e0:	68b4      	ldr	r4, [r6, #8]
 80060e2:	e7d6      	b.n	8006092 <_putc_r+0x1a>
 80060e4:	4b07      	ldr	r3, [pc, #28]	; (8006104 <_putc_r+0x8c>)
 80060e6:	429c      	cmp	r4, r3
 80060e8:	bf08      	it	eq
 80060ea:	68f4      	ldreq	r4, [r6, #12]
 80060ec:	e7d1      	b.n	8006092 <_putc_r+0x1a>
 80060ee:	4629      	mov	r1, r5
 80060f0:	4622      	mov	r2, r4
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7fe fdc4 	bl	8004c80 <__swbuf_r>
 80060f8:	4605      	mov	r5, r0
 80060fa:	e7e3      	b.n	80060c4 <_putc_r+0x4c>
 80060fc:	08007014 	.word	0x08007014
 8006100:	08007034 	.word	0x08007034
 8006104:	08006ff4 	.word	0x08006ff4

08006108 <lflush>:
 8006108:	8983      	ldrh	r3, [r0, #12]
 800610a:	f003 0309 	and.w	r3, r3, #9
 800610e:	2b09      	cmp	r3, #9
 8006110:	d101      	bne.n	8006116 <lflush+0xe>
 8006112:	f7fe bf37 	b.w	8004f84 <fflush>
 8006116:	2000      	movs	r0, #0
 8006118:	4770      	bx	lr
	...

0800611c <__srefill_r>:
 800611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611e:	460c      	mov	r4, r1
 8006120:	4605      	mov	r5, r0
 8006122:	b118      	cbz	r0, 800612c <__srefill_r+0x10>
 8006124:	6983      	ldr	r3, [r0, #24]
 8006126:	b90b      	cbnz	r3, 800612c <__srefill_r+0x10>
 8006128:	f7fe ff96 	bl	8005058 <__sinit>
 800612c:	4b3b      	ldr	r3, [pc, #236]	; (800621c <__srefill_r+0x100>)
 800612e:	429c      	cmp	r4, r3
 8006130:	d10a      	bne.n	8006148 <__srefill_r+0x2c>
 8006132:	686c      	ldr	r4, [r5, #4]
 8006134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006138:	2300      	movs	r3, #0
 800613a:	6063      	str	r3, [r4, #4]
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	069e      	lsls	r6, r3, #26
 8006140:	d50c      	bpl.n	800615c <__srefill_r+0x40>
 8006142:	f04f 30ff 	mov.w	r0, #4294967295
 8006146:	e066      	b.n	8006216 <__srefill_r+0xfa>
 8006148:	4b35      	ldr	r3, [pc, #212]	; (8006220 <__srefill_r+0x104>)
 800614a:	429c      	cmp	r4, r3
 800614c:	d101      	bne.n	8006152 <__srefill_r+0x36>
 800614e:	68ac      	ldr	r4, [r5, #8]
 8006150:	e7f0      	b.n	8006134 <__srefill_r+0x18>
 8006152:	4b34      	ldr	r3, [pc, #208]	; (8006224 <__srefill_r+0x108>)
 8006154:	429c      	cmp	r4, r3
 8006156:	bf08      	it	eq
 8006158:	68ec      	ldreq	r4, [r5, #12]
 800615a:	e7eb      	b.n	8006134 <__srefill_r+0x18>
 800615c:	0758      	lsls	r0, r3, #29
 800615e:	d448      	bmi.n	80061f2 <__srefill_r+0xd6>
 8006160:	06d9      	lsls	r1, r3, #27
 8006162:	d405      	bmi.n	8006170 <__srefill_r+0x54>
 8006164:	2309      	movs	r3, #9
 8006166:	602b      	str	r3, [r5, #0]
 8006168:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800616c:	81a3      	strh	r3, [r4, #12]
 800616e:	e7e8      	b.n	8006142 <__srefill_r+0x26>
 8006170:	071a      	lsls	r2, r3, #28
 8006172:	d50b      	bpl.n	800618c <__srefill_r+0x70>
 8006174:	4621      	mov	r1, r4
 8006176:	4628      	mov	r0, r5
 8006178:	f7fe fec8 	bl	8004f0c <_fflush_r>
 800617c:	2800      	cmp	r0, #0
 800617e:	d1e0      	bne.n	8006142 <__srefill_r+0x26>
 8006180:	89a3      	ldrh	r3, [r4, #12]
 8006182:	60a0      	str	r0, [r4, #8]
 8006184:	f023 0308 	bic.w	r3, r3, #8
 8006188:	81a3      	strh	r3, [r4, #12]
 800618a:	61a0      	str	r0, [r4, #24]
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	f043 0304 	orr.w	r3, r3, #4
 8006192:	81a3      	strh	r3, [r4, #12]
 8006194:	6923      	ldr	r3, [r4, #16]
 8006196:	b91b      	cbnz	r3, 80061a0 <__srefill_r+0x84>
 8006198:	4621      	mov	r1, r4
 800619a:	4628      	mov	r0, r5
 800619c:	f7ff f83e 	bl	800521c <__smakebuf_r>
 80061a0:	89a6      	ldrh	r6, [r4, #12]
 80061a2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80061a6:	07b3      	lsls	r3, r6, #30
 80061a8:	d00f      	beq.n	80061ca <__srefill_r+0xae>
 80061aa:	2301      	movs	r3, #1
 80061ac:	81a3      	strh	r3, [r4, #12]
 80061ae:	4b1e      	ldr	r3, [pc, #120]	; (8006228 <__srefill_r+0x10c>)
 80061b0:	491e      	ldr	r1, [pc, #120]	; (800622c <__srefill_r+0x110>)
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	f006 0609 	and.w	r6, r6, #9
 80061b8:	f7fe ffcc 	bl	8005154 <_fwalk>
 80061bc:	2e09      	cmp	r6, #9
 80061be:	81a7      	strh	r7, [r4, #12]
 80061c0:	d103      	bne.n	80061ca <__srefill_r+0xae>
 80061c2:	4621      	mov	r1, r4
 80061c4:	4628      	mov	r0, r5
 80061c6:	f7fe fe1b 	bl	8004e00 <__sflush_r>
 80061ca:	6922      	ldr	r2, [r4, #16]
 80061cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80061ce:	6963      	ldr	r3, [r4, #20]
 80061d0:	6a21      	ldr	r1, [r4, #32]
 80061d2:	6022      	str	r2, [r4, #0]
 80061d4:	4628      	mov	r0, r5
 80061d6:	47b0      	blx	r6
 80061d8:	2800      	cmp	r0, #0
 80061da:	6060      	str	r0, [r4, #4]
 80061dc:	dc1c      	bgt.n	8006218 <__srefill_r+0xfc>
 80061de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061e2:	bf17      	itett	ne
 80061e4:	2200      	movne	r2, #0
 80061e6:	f043 0320 	orreq.w	r3, r3, #32
 80061ea:	6062      	strne	r2, [r4, #4]
 80061ec:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80061f0:	e7bc      	b.n	800616c <__srefill_r+0x50>
 80061f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061f4:	2900      	cmp	r1, #0
 80061f6:	d0cd      	beq.n	8006194 <__srefill_r+0x78>
 80061f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061fc:	4299      	cmp	r1, r3
 80061fe:	d002      	beq.n	8006206 <__srefill_r+0xea>
 8006200:	4628      	mov	r0, r5
 8006202:	f7ff f84b 	bl	800529c <_free_r>
 8006206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006208:	6063      	str	r3, [r4, #4]
 800620a:	2000      	movs	r0, #0
 800620c:	6360      	str	r0, [r4, #52]	; 0x34
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0c0      	beq.n	8006194 <__srefill_r+0x78>
 8006212:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006218:	2000      	movs	r0, #0
 800621a:	e7fc      	b.n	8006216 <__srefill_r+0xfa>
 800621c:	08007014 	.word	0x08007014
 8006220:	08007034 	.word	0x08007034
 8006224:	08006ff4 	.word	0x08006ff4
 8006228:	08006ff0 	.word	0x08006ff0
 800622c:	08006109 	.word	0x08006109

08006230 <_sbrk_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4d06      	ldr	r5, [pc, #24]	; (800624c <_sbrk_r+0x1c>)
 8006234:	2300      	movs	r3, #0
 8006236:	4604      	mov	r4, r0
 8006238:	4608      	mov	r0, r1
 800623a:	602b      	str	r3, [r5, #0]
 800623c:	f7fa fbac 	bl	8000998 <_sbrk>
 8006240:	1c43      	adds	r3, r0, #1
 8006242:	d102      	bne.n	800624a <_sbrk_r+0x1a>
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	b103      	cbz	r3, 800624a <_sbrk_r+0x1a>
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	200005c8 	.word	0x200005c8

08006250 <__sccl>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	780b      	ldrb	r3, [r1, #0]
 8006254:	4604      	mov	r4, r0
 8006256:	2b5e      	cmp	r3, #94	; 0x5e
 8006258:	bf0b      	itete	eq
 800625a:	784b      	ldrbeq	r3, [r1, #1]
 800625c:	1c48      	addne	r0, r1, #1
 800625e:	1c88      	addeq	r0, r1, #2
 8006260:	2200      	movne	r2, #0
 8006262:	bf08      	it	eq
 8006264:	2201      	moveq	r2, #1
 8006266:	1e61      	subs	r1, r4, #1
 8006268:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800626c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006270:	42a9      	cmp	r1, r5
 8006272:	d1fb      	bne.n	800626c <__sccl+0x1c>
 8006274:	b90b      	cbnz	r3, 800627a <__sccl+0x2a>
 8006276:	3801      	subs	r0, #1
 8006278:	bd70      	pop	{r4, r5, r6, pc}
 800627a:	f082 0201 	eor.w	r2, r2, #1
 800627e:	54e2      	strb	r2, [r4, r3]
 8006280:	4605      	mov	r5, r0
 8006282:	4628      	mov	r0, r5
 8006284:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006288:	292d      	cmp	r1, #45	; 0x2d
 800628a:	d006      	beq.n	800629a <__sccl+0x4a>
 800628c:	295d      	cmp	r1, #93	; 0x5d
 800628e:	d0f3      	beq.n	8006278 <__sccl+0x28>
 8006290:	b909      	cbnz	r1, 8006296 <__sccl+0x46>
 8006292:	4628      	mov	r0, r5
 8006294:	e7f0      	b.n	8006278 <__sccl+0x28>
 8006296:	460b      	mov	r3, r1
 8006298:	e7f1      	b.n	800627e <__sccl+0x2e>
 800629a:	786e      	ldrb	r6, [r5, #1]
 800629c:	2e5d      	cmp	r6, #93	; 0x5d
 800629e:	d0fa      	beq.n	8006296 <__sccl+0x46>
 80062a0:	42b3      	cmp	r3, r6
 80062a2:	dcf8      	bgt.n	8006296 <__sccl+0x46>
 80062a4:	3502      	adds	r5, #2
 80062a6:	4619      	mov	r1, r3
 80062a8:	3101      	adds	r1, #1
 80062aa:	428e      	cmp	r6, r1
 80062ac:	5462      	strb	r2, [r4, r1]
 80062ae:	dcfb      	bgt.n	80062a8 <__sccl+0x58>
 80062b0:	1af1      	subs	r1, r6, r3
 80062b2:	3901      	subs	r1, #1
 80062b4:	1c58      	adds	r0, r3, #1
 80062b6:	42b3      	cmp	r3, r6
 80062b8:	bfa8      	it	ge
 80062ba:	2100      	movge	r1, #0
 80062bc:	1843      	adds	r3, r0, r1
 80062be:	e7e0      	b.n	8006282 <__sccl+0x32>

080062c0 <__sread>:
 80062c0:	b510      	push	{r4, lr}
 80062c2:	460c      	mov	r4, r1
 80062c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c8:	f000 fa9a 	bl	8006800 <_read_r>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	bfab      	itete	ge
 80062d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062d2:	89a3      	ldrhlt	r3, [r4, #12]
 80062d4:	181b      	addge	r3, r3, r0
 80062d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062da:	bfac      	ite	ge
 80062dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80062de:	81a3      	strhlt	r3, [r4, #12]
 80062e0:	bd10      	pop	{r4, pc}

080062e2 <__swrite>:
 80062e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e6:	461f      	mov	r7, r3
 80062e8:	898b      	ldrh	r3, [r1, #12]
 80062ea:	05db      	lsls	r3, r3, #23
 80062ec:	4605      	mov	r5, r0
 80062ee:	460c      	mov	r4, r1
 80062f0:	4616      	mov	r6, r2
 80062f2:	d505      	bpl.n	8006300 <__swrite+0x1e>
 80062f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f8:	2302      	movs	r3, #2
 80062fa:	2200      	movs	r2, #0
 80062fc:	f000 fa32 	bl	8006764 <_lseek_r>
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800630a:	81a3      	strh	r3, [r4, #12]
 800630c:	4632      	mov	r2, r6
 800630e:	463b      	mov	r3, r7
 8006310:	4628      	mov	r0, r5
 8006312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006316:	f000 b9e1 	b.w	80066dc <_write_r>

0800631a <__sseek>:
 800631a:	b510      	push	{r4, lr}
 800631c:	460c      	mov	r4, r1
 800631e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006322:	f000 fa1f 	bl	8006764 <_lseek_r>
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	bf15      	itete	ne
 800632c:	6560      	strne	r0, [r4, #84]	; 0x54
 800632e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006336:	81a3      	strheq	r3, [r4, #12]
 8006338:	bf18      	it	ne
 800633a:	81a3      	strhne	r3, [r4, #12]
 800633c:	bd10      	pop	{r4, pc}

0800633e <__sclose>:
 800633e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006342:	f000 b9dd 	b.w	8006700 <_close_r>
	...

08006348 <_strtol_l.constprop.0>:
 8006348:	2b01      	cmp	r3, #1
 800634a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800634e:	d001      	beq.n	8006354 <_strtol_l.constprop.0+0xc>
 8006350:	2b24      	cmp	r3, #36	; 0x24
 8006352:	d906      	bls.n	8006362 <_strtol_l.constprop.0+0x1a>
 8006354:	f7fe fb98 	bl	8004a88 <__errno>
 8006358:	2316      	movs	r3, #22
 800635a:	6003      	str	r3, [r0, #0]
 800635c:	2000      	movs	r0, #0
 800635e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006362:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006448 <_strtol_l.constprop.0+0x100>
 8006366:	460d      	mov	r5, r1
 8006368:	462e      	mov	r6, r5
 800636a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800636e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006372:	f017 0708 	ands.w	r7, r7, #8
 8006376:	d1f7      	bne.n	8006368 <_strtol_l.constprop.0+0x20>
 8006378:	2c2d      	cmp	r4, #45	; 0x2d
 800637a:	d132      	bne.n	80063e2 <_strtol_l.constprop.0+0x9a>
 800637c:	782c      	ldrb	r4, [r5, #0]
 800637e:	2701      	movs	r7, #1
 8006380:	1cb5      	adds	r5, r6, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d05b      	beq.n	800643e <_strtol_l.constprop.0+0xf6>
 8006386:	2b10      	cmp	r3, #16
 8006388:	d109      	bne.n	800639e <_strtol_l.constprop.0+0x56>
 800638a:	2c30      	cmp	r4, #48	; 0x30
 800638c:	d107      	bne.n	800639e <_strtol_l.constprop.0+0x56>
 800638e:	782c      	ldrb	r4, [r5, #0]
 8006390:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006394:	2c58      	cmp	r4, #88	; 0x58
 8006396:	d14d      	bne.n	8006434 <_strtol_l.constprop.0+0xec>
 8006398:	786c      	ldrb	r4, [r5, #1]
 800639a:	2310      	movs	r3, #16
 800639c:	3502      	adds	r5, #2
 800639e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80063a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80063a6:	f04f 0c00 	mov.w	ip, #0
 80063aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80063ae:	4666      	mov	r6, ip
 80063b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80063b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80063b8:	f1be 0f09 	cmp.w	lr, #9
 80063bc:	d816      	bhi.n	80063ec <_strtol_l.constprop.0+0xa4>
 80063be:	4674      	mov	r4, lr
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	dd24      	ble.n	800640e <_strtol_l.constprop.0+0xc6>
 80063c4:	f1bc 0f00 	cmp.w	ip, #0
 80063c8:	db1e      	blt.n	8006408 <_strtol_l.constprop.0+0xc0>
 80063ca:	45b1      	cmp	r9, r6
 80063cc:	d31c      	bcc.n	8006408 <_strtol_l.constprop.0+0xc0>
 80063ce:	d101      	bne.n	80063d4 <_strtol_l.constprop.0+0x8c>
 80063d0:	45a2      	cmp	sl, r4
 80063d2:	db19      	blt.n	8006408 <_strtol_l.constprop.0+0xc0>
 80063d4:	fb06 4603 	mla	r6, r6, r3, r4
 80063d8:	f04f 0c01 	mov.w	ip, #1
 80063dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063e0:	e7e8      	b.n	80063b4 <_strtol_l.constprop.0+0x6c>
 80063e2:	2c2b      	cmp	r4, #43	; 0x2b
 80063e4:	bf04      	itt	eq
 80063e6:	782c      	ldrbeq	r4, [r5, #0]
 80063e8:	1cb5      	addeq	r5, r6, #2
 80063ea:	e7ca      	b.n	8006382 <_strtol_l.constprop.0+0x3a>
 80063ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80063f0:	f1be 0f19 	cmp.w	lr, #25
 80063f4:	d801      	bhi.n	80063fa <_strtol_l.constprop.0+0xb2>
 80063f6:	3c37      	subs	r4, #55	; 0x37
 80063f8:	e7e2      	b.n	80063c0 <_strtol_l.constprop.0+0x78>
 80063fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80063fe:	f1be 0f19 	cmp.w	lr, #25
 8006402:	d804      	bhi.n	800640e <_strtol_l.constprop.0+0xc6>
 8006404:	3c57      	subs	r4, #87	; 0x57
 8006406:	e7db      	b.n	80063c0 <_strtol_l.constprop.0+0x78>
 8006408:	f04f 3cff 	mov.w	ip, #4294967295
 800640c:	e7e6      	b.n	80063dc <_strtol_l.constprop.0+0x94>
 800640e:	f1bc 0f00 	cmp.w	ip, #0
 8006412:	da05      	bge.n	8006420 <_strtol_l.constprop.0+0xd8>
 8006414:	2322      	movs	r3, #34	; 0x22
 8006416:	6003      	str	r3, [r0, #0]
 8006418:	4646      	mov	r6, r8
 800641a:	b942      	cbnz	r2, 800642e <_strtol_l.constprop.0+0xe6>
 800641c:	4630      	mov	r0, r6
 800641e:	e79e      	b.n	800635e <_strtol_l.constprop.0+0x16>
 8006420:	b107      	cbz	r7, 8006424 <_strtol_l.constprop.0+0xdc>
 8006422:	4276      	negs	r6, r6
 8006424:	2a00      	cmp	r2, #0
 8006426:	d0f9      	beq.n	800641c <_strtol_l.constprop.0+0xd4>
 8006428:	f1bc 0f00 	cmp.w	ip, #0
 800642c:	d000      	beq.n	8006430 <_strtol_l.constprop.0+0xe8>
 800642e:	1e69      	subs	r1, r5, #1
 8006430:	6011      	str	r1, [r2, #0]
 8006432:	e7f3      	b.n	800641c <_strtol_l.constprop.0+0xd4>
 8006434:	2430      	movs	r4, #48	; 0x30
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1b1      	bne.n	800639e <_strtol_l.constprop.0+0x56>
 800643a:	2308      	movs	r3, #8
 800643c:	e7af      	b.n	800639e <_strtol_l.constprop.0+0x56>
 800643e:	2c30      	cmp	r4, #48	; 0x30
 8006440:	d0a5      	beq.n	800638e <_strtol_l.constprop.0+0x46>
 8006442:	230a      	movs	r3, #10
 8006444:	e7ab      	b.n	800639e <_strtol_l.constprop.0+0x56>
 8006446:	bf00      	nop
 8006448:	080070a3 	.word	0x080070a3

0800644c <_strtol_r>:
 800644c:	f7ff bf7c 	b.w	8006348 <_strtol_l.constprop.0>

08006450 <_strtoul_l.constprop.0>:
 8006450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006454:	4f36      	ldr	r7, [pc, #216]	; (8006530 <_strtoul_l.constprop.0+0xe0>)
 8006456:	4686      	mov	lr, r0
 8006458:	460d      	mov	r5, r1
 800645a:	4628      	mov	r0, r5
 800645c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006460:	5de6      	ldrb	r6, [r4, r7]
 8006462:	f016 0608 	ands.w	r6, r6, #8
 8006466:	d1f8      	bne.n	800645a <_strtoul_l.constprop.0+0xa>
 8006468:	2c2d      	cmp	r4, #45	; 0x2d
 800646a:	d12f      	bne.n	80064cc <_strtoul_l.constprop.0+0x7c>
 800646c:	782c      	ldrb	r4, [r5, #0]
 800646e:	2601      	movs	r6, #1
 8006470:	1c85      	adds	r5, r0, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d057      	beq.n	8006526 <_strtoul_l.constprop.0+0xd6>
 8006476:	2b10      	cmp	r3, #16
 8006478:	d109      	bne.n	800648e <_strtoul_l.constprop.0+0x3e>
 800647a:	2c30      	cmp	r4, #48	; 0x30
 800647c:	d107      	bne.n	800648e <_strtoul_l.constprop.0+0x3e>
 800647e:	7828      	ldrb	r0, [r5, #0]
 8006480:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006484:	2858      	cmp	r0, #88	; 0x58
 8006486:	d149      	bne.n	800651c <_strtoul_l.constprop.0+0xcc>
 8006488:	786c      	ldrb	r4, [r5, #1]
 800648a:	2310      	movs	r3, #16
 800648c:	3502      	adds	r5, #2
 800648e:	f04f 38ff 	mov.w	r8, #4294967295
 8006492:	2700      	movs	r7, #0
 8006494:	fbb8 f8f3 	udiv	r8, r8, r3
 8006498:	fb03 f908 	mul.w	r9, r3, r8
 800649c:	ea6f 0909 	mvn.w	r9, r9
 80064a0:	4638      	mov	r0, r7
 80064a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80064a6:	f1bc 0f09 	cmp.w	ip, #9
 80064aa:	d814      	bhi.n	80064d6 <_strtoul_l.constprop.0+0x86>
 80064ac:	4664      	mov	r4, ip
 80064ae:	42a3      	cmp	r3, r4
 80064b0:	dd22      	ble.n	80064f8 <_strtoul_l.constprop.0+0xa8>
 80064b2:	2f00      	cmp	r7, #0
 80064b4:	db1d      	blt.n	80064f2 <_strtoul_l.constprop.0+0xa2>
 80064b6:	4580      	cmp	r8, r0
 80064b8:	d31b      	bcc.n	80064f2 <_strtoul_l.constprop.0+0xa2>
 80064ba:	d101      	bne.n	80064c0 <_strtoul_l.constprop.0+0x70>
 80064bc:	45a1      	cmp	r9, r4
 80064be:	db18      	blt.n	80064f2 <_strtoul_l.constprop.0+0xa2>
 80064c0:	fb00 4003 	mla	r0, r0, r3, r4
 80064c4:	2701      	movs	r7, #1
 80064c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064ca:	e7ea      	b.n	80064a2 <_strtoul_l.constprop.0+0x52>
 80064cc:	2c2b      	cmp	r4, #43	; 0x2b
 80064ce:	bf04      	itt	eq
 80064d0:	782c      	ldrbeq	r4, [r5, #0]
 80064d2:	1c85      	addeq	r5, r0, #2
 80064d4:	e7cd      	b.n	8006472 <_strtoul_l.constprop.0+0x22>
 80064d6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80064da:	f1bc 0f19 	cmp.w	ip, #25
 80064de:	d801      	bhi.n	80064e4 <_strtoul_l.constprop.0+0x94>
 80064e0:	3c37      	subs	r4, #55	; 0x37
 80064e2:	e7e4      	b.n	80064ae <_strtoul_l.constprop.0+0x5e>
 80064e4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80064e8:	f1bc 0f19 	cmp.w	ip, #25
 80064ec:	d804      	bhi.n	80064f8 <_strtoul_l.constprop.0+0xa8>
 80064ee:	3c57      	subs	r4, #87	; 0x57
 80064f0:	e7dd      	b.n	80064ae <_strtoul_l.constprop.0+0x5e>
 80064f2:	f04f 37ff 	mov.w	r7, #4294967295
 80064f6:	e7e6      	b.n	80064c6 <_strtoul_l.constprop.0+0x76>
 80064f8:	2f00      	cmp	r7, #0
 80064fa:	da07      	bge.n	800650c <_strtoul_l.constprop.0+0xbc>
 80064fc:	2322      	movs	r3, #34	; 0x22
 80064fe:	f8ce 3000 	str.w	r3, [lr]
 8006502:	f04f 30ff 	mov.w	r0, #4294967295
 8006506:	b932      	cbnz	r2, 8006516 <_strtoul_l.constprop.0+0xc6>
 8006508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800650c:	b106      	cbz	r6, 8006510 <_strtoul_l.constprop.0+0xc0>
 800650e:	4240      	negs	r0, r0
 8006510:	2a00      	cmp	r2, #0
 8006512:	d0f9      	beq.n	8006508 <_strtoul_l.constprop.0+0xb8>
 8006514:	b107      	cbz	r7, 8006518 <_strtoul_l.constprop.0+0xc8>
 8006516:	1e69      	subs	r1, r5, #1
 8006518:	6011      	str	r1, [r2, #0]
 800651a:	e7f5      	b.n	8006508 <_strtoul_l.constprop.0+0xb8>
 800651c:	2430      	movs	r4, #48	; 0x30
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1b5      	bne.n	800648e <_strtoul_l.constprop.0+0x3e>
 8006522:	2308      	movs	r3, #8
 8006524:	e7b3      	b.n	800648e <_strtoul_l.constprop.0+0x3e>
 8006526:	2c30      	cmp	r4, #48	; 0x30
 8006528:	d0a9      	beq.n	800647e <_strtoul_l.constprop.0+0x2e>
 800652a:	230a      	movs	r3, #10
 800652c:	e7af      	b.n	800648e <_strtoul_l.constprop.0+0x3e>
 800652e:	bf00      	nop
 8006530:	080070a3 	.word	0x080070a3

08006534 <_strtoul_r>:
 8006534:	f7ff bf8c 	b.w	8006450 <_strtoul_l.constprop.0>

08006538 <__submore>:
 8006538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653c:	460c      	mov	r4, r1
 800653e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006544:	4299      	cmp	r1, r3
 8006546:	d11d      	bne.n	8006584 <__submore+0x4c>
 8006548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800654c:	f7fe ff12 	bl	8005374 <_malloc_r>
 8006550:	b918      	cbnz	r0, 800655a <__submore+0x22>
 8006552:	f04f 30ff 	mov.w	r0, #4294967295
 8006556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800655a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800655e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006560:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006564:	6360      	str	r0, [r4, #52]	; 0x34
 8006566:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800656a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800656e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006572:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006576:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800657a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800657e:	6020      	str	r0, [r4, #0]
 8006580:	2000      	movs	r0, #0
 8006582:	e7e8      	b.n	8006556 <__submore+0x1e>
 8006584:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006586:	0077      	lsls	r7, r6, #1
 8006588:	463a      	mov	r2, r7
 800658a:	f000 f909 	bl	80067a0 <_realloc_r>
 800658e:	4605      	mov	r5, r0
 8006590:	2800      	cmp	r0, #0
 8006592:	d0de      	beq.n	8006552 <__submore+0x1a>
 8006594:	eb00 0806 	add.w	r8, r0, r6
 8006598:	4601      	mov	r1, r0
 800659a:	4632      	mov	r2, r6
 800659c:	4640      	mov	r0, r8
 800659e:	f7fe fa9d 	bl	8004adc <memcpy>
 80065a2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80065a6:	f8c4 8000 	str.w	r8, [r4]
 80065aa:	e7e9      	b.n	8006580 <__submore+0x48>

080065ac <_ungetc_r>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	4614      	mov	r4, r2
 80065b0:	1c4a      	adds	r2, r1, #1
 80065b2:	4606      	mov	r6, r0
 80065b4:	460d      	mov	r5, r1
 80065b6:	d103      	bne.n	80065c0 <_ungetc_r+0x14>
 80065b8:	f04f 35ff 	mov.w	r5, #4294967295
 80065bc:	4628      	mov	r0, r5
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	b118      	cbz	r0, 80065ca <_ungetc_r+0x1e>
 80065c2:	6983      	ldr	r3, [r0, #24]
 80065c4:	b90b      	cbnz	r3, 80065ca <_ungetc_r+0x1e>
 80065c6:	f7fe fd47 	bl	8005058 <__sinit>
 80065ca:	4b41      	ldr	r3, [pc, #260]	; (80066d0 <_ungetc_r+0x124>)
 80065cc:	429c      	cmp	r4, r3
 80065ce:	d11d      	bne.n	800660c <_ungetc_r+0x60>
 80065d0:	6874      	ldr	r4, [r6, #4]
 80065d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065d4:	07db      	lsls	r3, r3, #31
 80065d6:	d405      	bmi.n	80065e4 <_ungetc_r+0x38>
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	0598      	lsls	r0, r3, #22
 80065dc:	d402      	bmi.n	80065e4 <_ungetc_r+0x38>
 80065de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065e0:	f7fe fdf5 	bl	80051ce <__retarget_lock_acquire_recursive>
 80065e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e8:	f023 0320 	bic.w	r3, r3, #32
 80065ec:	0759      	lsls	r1, r3, #29
 80065ee:	81a3      	strh	r3, [r4, #12]
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	d42d      	bmi.n	8006650 <_ungetc_r+0xa4>
 80065f4:	06d3      	lsls	r3, r2, #27
 80065f6:	d413      	bmi.n	8006620 <_ungetc_r+0x74>
 80065f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065fa:	07dd      	lsls	r5, r3, #31
 80065fc:	d4dc      	bmi.n	80065b8 <_ungetc_r+0xc>
 80065fe:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006602:	d1d9      	bne.n	80065b8 <_ungetc_r+0xc>
 8006604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006606:	f7fe fde3 	bl	80051d0 <__retarget_lock_release_recursive>
 800660a:	e7d5      	b.n	80065b8 <_ungetc_r+0xc>
 800660c:	4b31      	ldr	r3, [pc, #196]	; (80066d4 <_ungetc_r+0x128>)
 800660e:	429c      	cmp	r4, r3
 8006610:	d101      	bne.n	8006616 <_ungetc_r+0x6a>
 8006612:	68b4      	ldr	r4, [r6, #8]
 8006614:	e7dd      	b.n	80065d2 <_ungetc_r+0x26>
 8006616:	4b30      	ldr	r3, [pc, #192]	; (80066d8 <_ungetc_r+0x12c>)
 8006618:	429c      	cmp	r4, r3
 800661a:	bf08      	it	eq
 800661c:	68f4      	ldreq	r4, [r6, #12]
 800661e:	e7d8      	b.n	80065d2 <_ungetc_r+0x26>
 8006620:	0710      	lsls	r0, r2, #28
 8006622:	d511      	bpl.n	8006648 <_ungetc_r+0x9c>
 8006624:	4621      	mov	r1, r4
 8006626:	4630      	mov	r0, r6
 8006628:	f7fe fc70 	bl	8004f0c <_fflush_r>
 800662c:	b130      	cbz	r0, 800663c <_ungetc_r+0x90>
 800662e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006630:	07d9      	lsls	r1, r3, #31
 8006632:	d4c1      	bmi.n	80065b8 <_ungetc_r+0xc>
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	f413 7f00 	tst.w	r3, #512	; 0x200
 800663a:	e7e2      	b.n	8006602 <_ungetc_r+0x56>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	60a0      	str	r0, [r4, #8]
 8006640:	f023 0308 	bic.w	r3, r3, #8
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	61a0      	str	r0, [r4, #24]
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	f043 0304 	orr.w	r3, r3, #4
 800664e:	81a3      	strh	r3, [r4, #12]
 8006650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006652:	6862      	ldr	r2, [r4, #4]
 8006654:	b2ed      	uxtb	r5, r5
 8006656:	b1d3      	cbz	r3, 800668e <_ungetc_r+0xe2>
 8006658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800665a:	4293      	cmp	r3, r2
 800665c:	dc05      	bgt.n	800666a <_ungetc_r+0xbe>
 800665e:	4621      	mov	r1, r4
 8006660:	4630      	mov	r0, r6
 8006662:	f7ff ff69 	bl	8006538 <__submore>
 8006666:	2800      	cmp	r0, #0
 8006668:	d1e1      	bne.n	800662e <_ungetc_r+0x82>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	1e5a      	subs	r2, r3, #1
 800666e:	6022      	str	r2, [r4, #0]
 8006670:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006674:	6863      	ldr	r3, [r4, #4]
 8006676:	3301      	adds	r3, #1
 8006678:	6063      	str	r3, [r4, #4]
 800667a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800667c:	07da      	lsls	r2, r3, #31
 800667e:	d49d      	bmi.n	80065bc <_ungetc_r+0x10>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	059b      	lsls	r3, r3, #22
 8006684:	d49a      	bmi.n	80065bc <_ungetc_r+0x10>
 8006686:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006688:	f7fe fda2 	bl	80051d0 <__retarget_lock_release_recursive>
 800668c:	e796      	b.n	80065bc <_ungetc_r+0x10>
 800668e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006690:	6920      	ldr	r0, [r4, #16]
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	f001 0101 	and.w	r1, r1, #1
 8006698:	b160      	cbz	r0, 80066b4 <_ungetc_r+0x108>
 800669a:	4298      	cmp	r0, r3
 800669c:	d20a      	bcs.n	80066b4 <_ungetc_r+0x108>
 800669e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80066a2:	42a8      	cmp	r0, r5
 80066a4:	d106      	bne.n	80066b4 <_ungetc_r+0x108>
 80066a6:	3b01      	subs	r3, #1
 80066a8:	3201      	adds	r2, #1
 80066aa:	6023      	str	r3, [r4, #0]
 80066ac:	6062      	str	r2, [r4, #4]
 80066ae:	2900      	cmp	r1, #0
 80066b0:	d184      	bne.n	80065bc <_ungetc_r+0x10>
 80066b2:	e7e5      	b.n	8006680 <_ungetc_r+0xd4>
 80066b4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80066b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066bc:	6363      	str	r3, [r4, #52]	; 0x34
 80066be:	2303      	movs	r3, #3
 80066c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80066c2:	4623      	mov	r3, r4
 80066c4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	2301      	movs	r3, #1
 80066cc:	6063      	str	r3, [r4, #4]
 80066ce:	e7ee      	b.n	80066ae <_ungetc_r+0x102>
 80066d0:	08007014 	.word	0x08007014
 80066d4:	08007034 	.word	0x08007034
 80066d8:	08006ff4 	.word	0x08006ff4

080066dc <_write_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4d07      	ldr	r5, [pc, #28]	; (80066fc <_write_r+0x20>)
 80066e0:	4604      	mov	r4, r0
 80066e2:	4608      	mov	r0, r1
 80066e4:	4611      	mov	r1, r2
 80066e6:	2200      	movs	r2, #0
 80066e8:	602a      	str	r2, [r5, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	f7fa f903 	bl	80008f6 <_write>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d102      	bne.n	80066fa <_write_r+0x1e>
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	b103      	cbz	r3, 80066fa <_write_r+0x1e>
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	200005c8 	.word	0x200005c8

08006700 <_close_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d06      	ldr	r5, [pc, #24]	; (800671c <_close_r+0x1c>)
 8006704:	2300      	movs	r3, #0
 8006706:	4604      	mov	r4, r0
 8006708:	4608      	mov	r0, r1
 800670a:	602b      	str	r3, [r5, #0]
 800670c:	f7fa f90f 	bl	800092e <_close>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_close_r+0x1a>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_close_r+0x1a>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	200005c8 	.word	0x200005c8

08006720 <_fstat_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	4d07      	ldr	r5, [pc, #28]	; (8006740 <_fstat_r+0x20>)
 8006724:	2300      	movs	r3, #0
 8006726:	4604      	mov	r4, r0
 8006728:	4608      	mov	r0, r1
 800672a:	4611      	mov	r1, r2
 800672c:	602b      	str	r3, [r5, #0]
 800672e:	f7fa f90a 	bl	8000946 <_fstat>
 8006732:	1c43      	adds	r3, r0, #1
 8006734:	d102      	bne.n	800673c <_fstat_r+0x1c>
 8006736:	682b      	ldr	r3, [r5, #0]
 8006738:	b103      	cbz	r3, 800673c <_fstat_r+0x1c>
 800673a:	6023      	str	r3, [r4, #0]
 800673c:	bd38      	pop	{r3, r4, r5, pc}
 800673e:	bf00      	nop
 8006740:	200005c8 	.word	0x200005c8

08006744 <_isatty_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	4d06      	ldr	r5, [pc, #24]	; (8006760 <_isatty_r+0x1c>)
 8006748:	2300      	movs	r3, #0
 800674a:	4604      	mov	r4, r0
 800674c:	4608      	mov	r0, r1
 800674e:	602b      	str	r3, [r5, #0]
 8006750:	f7fa f909 	bl	8000966 <_isatty>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d102      	bne.n	800675e <_isatty_r+0x1a>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	b103      	cbz	r3, 800675e <_isatty_r+0x1a>
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	200005c8 	.word	0x200005c8

08006764 <_lseek_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4d07      	ldr	r5, [pc, #28]	; (8006784 <_lseek_r+0x20>)
 8006768:	4604      	mov	r4, r0
 800676a:	4608      	mov	r0, r1
 800676c:	4611      	mov	r1, r2
 800676e:	2200      	movs	r2, #0
 8006770:	602a      	str	r2, [r5, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	f7fa f902 	bl	800097c <_lseek>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_lseek_r+0x1e>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_lseek_r+0x1e>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	200005c8 	.word	0x200005c8

08006788 <__malloc_lock>:
 8006788:	4801      	ldr	r0, [pc, #4]	; (8006790 <__malloc_lock+0x8>)
 800678a:	f7fe bd20 	b.w	80051ce <__retarget_lock_acquire_recursive>
 800678e:	bf00      	nop
 8006790:	200005bc 	.word	0x200005bc

08006794 <__malloc_unlock>:
 8006794:	4801      	ldr	r0, [pc, #4]	; (800679c <__malloc_unlock+0x8>)
 8006796:	f7fe bd1b 	b.w	80051d0 <__retarget_lock_release_recursive>
 800679a:	bf00      	nop
 800679c:	200005bc 	.word	0x200005bc

080067a0 <_realloc_r>:
 80067a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a4:	4680      	mov	r8, r0
 80067a6:	4614      	mov	r4, r2
 80067a8:	460e      	mov	r6, r1
 80067aa:	b921      	cbnz	r1, 80067b6 <_realloc_r+0x16>
 80067ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067b0:	4611      	mov	r1, r2
 80067b2:	f7fe bddf 	b.w	8005374 <_malloc_r>
 80067b6:	b92a      	cbnz	r2, 80067c4 <_realloc_r+0x24>
 80067b8:	f7fe fd70 	bl	800529c <_free_r>
 80067bc:	4625      	mov	r5, r4
 80067be:	4628      	mov	r0, r5
 80067c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c4:	f000 f82e 	bl	8006824 <_malloc_usable_size_r>
 80067c8:	4284      	cmp	r4, r0
 80067ca:	4607      	mov	r7, r0
 80067cc:	d802      	bhi.n	80067d4 <_realloc_r+0x34>
 80067ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067d2:	d812      	bhi.n	80067fa <_realloc_r+0x5a>
 80067d4:	4621      	mov	r1, r4
 80067d6:	4640      	mov	r0, r8
 80067d8:	f7fe fdcc 	bl	8005374 <_malloc_r>
 80067dc:	4605      	mov	r5, r0
 80067de:	2800      	cmp	r0, #0
 80067e0:	d0ed      	beq.n	80067be <_realloc_r+0x1e>
 80067e2:	42bc      	cmp	r4, r7
 80067e4:	4622      	mov	r2, r4
 80067e6:	4631      	mov	r1, r6
 80067e8:	bf28      	it	cs
 80067ea:	463a      	movcs	r2, r7
 80067ec:	f7fe f976 	bl	8004adc <memcpy>
 80067f0:	4631      	mov	r1, r6
 80067f2:	4640      	mov	r0, r8
 80067f4:	f7fe fd52 	bl	800529c <_free_r>
 80067f8:	e7e1      	b.n	80067be <_realloc_r+0x1e>
 80067fa:	4635      	mov	r5, r6
 80067fc:	e7df      	b.n	80067be <_realloc_r+0x1e>
	...

08006800 <_read_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4d07      	ldr	r5, [pc, #28]	; (8006820 <_read_r+0x20>)
 8006804:	4604      	mov	r4, r0
 8006806:	4608      	mov	r0, r1
 8006808:	4611      	mov	r1, r2
 800680a:	2200      	movs	r2, #0
 800680c:	602a      	str	r2, [r5, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	f7fa f860 	bl	80008d4 <_read>
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	d102      	bne.n	800681e <_read_r+0x1e>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	b103      	cbz	r3, 800681e <_read_r+0x1e>
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	bd38      	pop	{r3, r4, r5, pc}
 8006820:	200005c8 	.word	0x200005c8

08006824 <_malloc_usable_size_r>:
 8006824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006828:	1f18      	subs	r0, r3, #4
 800682a:	2b00      	cmp	r3, #0
 800682c:	bfbc      	itt	lt
 800682e:	580b      	ldrlt	r3, [r1, r0]
 8006830:	18c0      	addlt	r0, r0, r3
 8006832:	4770      	bx	lr

08006834 <_init>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	bf00      	nop
 8006838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683a:	bc08      	pop	{r3}
 800683c:	469e      	mov	lr, r3
 800683e:	4770      	bx	lr

08006840 <_fini>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	bf00      	nop
 8006844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006846:	bc08      	pop	{r3}
 8006848:	469e      	mov	lr, r3
 800684a:	4770      	bx	lr
